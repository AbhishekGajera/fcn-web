{"version":3,"sources":["app/user-pages/Connect.js"],"names":["Connect","history","useHistory","useCookies","useState","courceType","setcourceType","branchlist","setBranchlist","handleChangeCourceType","e","target","value","useEffect","branchList","getBranchesClient","data","items","results","response","message","toast","error","process","useForm","mode","register","handleSubmit","formState","errors","isDirty","isValid","onSubmit","first_name","last_name","branch","contactno","date","formData","JSON","stringify","name","concat","type","fromDate","CreateConnect","success","push","strongRegexMo","RegExp","className","src","require","alt","autoComplete","id","placeholder","required","pattern","map","item","index","key","label","onChange","checked","Group","Control","min","moment","format","disabled"],"mappings":"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","file":"static/js/105.2685acec.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useCookies } from \"react-cookie\";\r\nimport { CreateConnect ,getBranchesClient, userLogout } from \"../../utils/APIs\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport moment from 'moment';\r\n\r\nconst Connect = () => {\r\n  const history = useHistory();\r\n  const [cookies, setCookie] = useCookies([\"user\"]);\r\n  const [courceType, setcourceType] = useState(1);\r\n  const [branchlist, setBranchlist] = useState([]);\r\n\r\n  const handleChangeCourceType = (e) => {\r\n    setcourceType(+e?.target?.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    branchList();\r\n  }, []);\r\n\r\n  const branchList = async () => {\r\n    try {\r\n      const items = await (await getBranchesClient()).data;\r\n      setBranchlist(items?.results);\r\n    } catch (error) {\r\n      if (error?.response?.data?.message) {\r\n        toast.error(error.response.data.message);\r\n      } else {\r\n        toast.error(process.env.REACT_APP_ERROR_MESSAGE);\r\n      }\r\n\r\n      // if (error?.response?.data?.code === 401) {\r\n      //   const formData = JSON.stringify({\r\n      //     refreshToken: localStorage.getItem(\"refreshToken\"),\r\n      //   });\r\n      //   setCookie(\"user\", null, { path: \"/\" });\r\n      //   userLogout(formData).finally(() => {\r\n      //     history.push(\"/user-pages/login-1\");\r\n      //   });\r\n      // }\r\n    }\r\n  };\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors, isDirty, isValid },\r\n  } = useForm({\r\n    mode: \"onChange\",\r\n  });\r\n\r\n  const onSubmit = async ({ first_name, last_name, branch, contactno, date }) => {\r\n    const formData = JSON.stringify({\r\n      name: first_name.concat(' ', last_name),\r\n      contactno,\r\n      branch,\r\n      type: courceType,\r\n      fromDate: date,\r\n    });\r\n\r\n    try {\r\n      await CreateConnect(formData);\r\n      toast.success(\"registerd sucssefully\");\r\n      history.push(\"/connectedusers/getuserList\");\r\n    } catch (error) {\r\n      if (\r\n        error &&\r\n        error.response &&\r\n        error.response.data &&\r\n        error.response.data.message\r\n      ) {\r\n        toast.error(error.response.data.message);\r\n      } else {\r\n        toast.error(process.env.REACT_APP_ERROR_MESSAGE);\r\n      }\r\n    }\r\n  };\r\n\r\n  var strongRegexMo = new RegExp(\r\n    \"^\\\\s*(?:\\\\+?(\\\\d{1,3}))?[-. (]*(\\\\d{3})[-. )]*(\\\\d{3})[-. ]*(\\\\d{4})(?: *x(\\\\d+))?\\\\s*$\"\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"d-flex align-items-center login-auth auth px-0\">\r\n        <div className=\"row w-100 mx-0\">\r\n          <div className=\"col-lg-4 mx-auto\">\r\n            <div className=\"auth-form-light text-left py-5 px-4 px-sm-5\">\r\n              <div className=\"brand-logo\">\r\n                <img\r\n                  src={require(\"../../assets/images/fcn_logo.png\")}\r\n                  alt=\"logo\"\r\n                />\r\n              </div>\r\n              <h4>New here?</h4>\r\n              <h6 className=\"font-weight-light\">\r\n                Contact us or Subscribe here to get our updates\r\n              </h6>\r\n              <form\r\n                className=\"pt-3\"\r\n                autoComplete=\"new-password\"\r\n                onSubmit={handleSubmit(onSubmit)}\r\n              >\r\n                <div className=\"form-group\">\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control form-control-lg\"\r\n                    id=\"exampleInputUsername1\"\r\n                    placeholder=\"First Name\"\r\n                    name=\"first_name\"\r\n                    {...register(\"first_name\", { required: true })}\r\n                  />\r\n                  {errors && errors.first_name && <p> last name is required field</p>}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control form-control-lg\"\r\n                    id=\"exampleInputUsername1\"\r\n                    placeholder=\"Last Name\"\r\n                    name=\"last_name\"\r\n                    {...register(\"last_name\", { required: true })}\r\n                  />\r\n                  {errors && errors.last_name && <p>last name is required field</p>}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control form-control-lg\"\r\n                    id=\"exampleInputUsername1\"\r\n                    placeholder=\"Contact number\"\r\n                    name=\"contactno\"\r\n                    {...register(\"contactno\", {\r\n                      required: true,\r\n                      pattern: strongRegexMo,\r\n                    })}\r\n                  />\r\n                  {errors &&\r\n                    errors.contactno &&\r\n                    errors.contactno.type === \"required\" && (\r\n                      <p>contact number is required field</p>\r\n                    )}\r\n                  {errors &&\r\n                    errors.contactno &&\r\n                    errors.contactno.type === \"pattern\" && (\r\n                      <p>invalid phone number please use valid formate</p>\r\n                    )}\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <select\r\n                    className=\"form-control form-control-lg\"\r\n                    id=\"exampleFormControlSelect2\"\r\n                    name=\"branch\"\r\n                    {...register(\"branch\", {\r\n                      required: true,\r\n                    })}\r\n                  >\r\n                    {branchlist.map((item, index) => (\r\n                      <option key={index} value={item?.name} label={item?.name}>{item?.name}</option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n\r\n                <div className=\"form-check\">\r\n                  <label className=\"form-check-label\">\r\n                    <input\r\n                      type=\"radio\"\r\n                      className=\"form-check-input\"\r\n                      name=\"optionsRadios\"\r\n                      id=\"optionsRadios1\"\r\n                      value={1}\r\n                      onChange={handleChangeCourceType}\r\n                      checked={courceType === 1}\r\n                    />\r\n                    <i className=\"input-helper\"></i>\r\n                    Free\r\n                  </label>\r\n                </div>\r\n                <div className=\"form-check\">\r\n                  <label className=\"form-check-label\">\r\n                    <input\r\n                      type=\"radio\"\r\n                      className=\"form-check-input\"\r\n                      name=\"optionsRadios\"\r\n                      id=\"optionsRadios2\"\r\n                      value={2}\r\n                      onChange={handleChangeCourceType}\r\n                      checked={courceType === 2}\r\n                    />\r\n                    <i className=\"input-helper\"></i>\r\n                    Paid\r\n                  </label>\r\n                </div>\r\n\r\n                <Form.Group className=\"row\">\r\n                  <label className=\"col-sm-3 col-form-label\">\r\n                    Date of Appoinment\r\n                  </label>\r\n                  <div className=\"col-sm-9\">\r\n                    <Form.Control\r\n                      type=\"date\"\r\n                      name=\"date\"\r\n                      min={moment().format(\"YYYY-MM-DD\")}\r\n                      {...register(\"date\", { required: true })}\r\n                    />\r\n                    {errors && errors.date && <p>Date of Appoinment is required field</p>}\r\n                  </div>\r\n                </Form.Group>\r\n\r\n                <div className=\"mb-4\">\r\n                  <div className=\"form-check\">\r\n                    <label className=\"form-check-label text-muted\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        className=\"form-check-input\"\r\n                        name=\"terms\"\r\n                        {...register(\"terms\", { required: true })}\r\n                      />\r\n                      <i className=\"input-helper\"></i>I agree to all Terms &\r\n                      Conditions\r\n                    </label>\r\n                  </div>\r\n                </div>\r\n                <div className=\"mt-3\">\r\n                  <button\r\n                    className=\"btn btn-block btn-primary btn-lg font-weight-medium auth-form-btn\"\r\n                    type=\"submit\"\r\n                    disabled={!isDirty || !isValid}\r\n                  >\r\n                    SUBMIT!\r\n                  </button>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Connect;\r\n"],"sourceRoot":""}