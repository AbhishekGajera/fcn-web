{"version":3,"sources":["utils/Functions/passwordGenerator.js","utils/Functions/commonOptions.js","utils/Functions/useDebounce.js","app/Admin-components/IboList/index.js"],"names":["password_generator","len","length","string","password","character","entity1","Math","ceil","random","entity2","entity3","hold","charAt","toUpperCase","split","sort","join","substr","statusOption","value","label","roleOption","formateStatus","status","useDebounce","delay","useState","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","IboList","useCookies","cookies","setCookie","itemlist","setitemlist","history","useHistory","searchTerm","setSearchTerm","pageCount","setPageCount","itemOffset","setItemOffset","itemsPerPage","React","show","setShow","valueToEdit","setvalueToEdit","updateStatus","setupdateStatus","branchList","setbranchList","selectedBranch","setselectedBranch","setIBOList","selectedIBO","debouncedSearchTerm","useForm","mode","register","handleSubmit","formState","errors","strongRegexMo","isDirty","isValid","RegExp","onSubmit","data","updatedData","JSON","stringify","updateProfile","id","toast","success","autoClose","list","response","message","error","process","code","formData","refreshToken","localStorage","getItem","path","userLogout","finally","push","generatePassword","randomPassword","newPassword","getIBOList","getIBOs","items","results","getBranchList","getBranches","totalPages","onHide","backdrop","keyboard","Header","closeButton","Title","Body","className","Group","Control","type","name","defaultValue","required","address","contactno","pattern","email","onChange","e","target","map","i","selected","role","branch","aria-label","href","onClick","event","preventDefault","user","aria-current","action","placeholder","item","uid","Swal","fire","title","text","icon","showCancelButton","cancelButtonColor","confirmButtonColor","confirmButtonText","cancelButtonText","then","result","deleteUsr","dismiss","DismissReason","cancel","breakLabel","nextLabel","onPageChange","newOffset","pageRangeDisplayed","previousLabel","renderOnZeroPageCount"],"mappings":"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","file":"static/js/10.864be1d9.chunk.js","sourcesContent":["export const password_generator = ( len ) => {\n    let length = (len)?(len):(10);\n    let string = \"abcdefghijklmnopqrstuvwxyz\"; //to upper \n    let numeric = '0123456789';\n    let punctuation = '!@#$%^&*()_+~`|}{[]\\:;?><,./-=';\n    let password = \"\";\n    let character = \"\";\n    let crunch = true;\n    while( password.length<length ) {\n       let entity1 = Math.ceil(string.length * Math.random()*Math.random());\n       let entity2 = Math.ceil(numeric.length * Math.random()*Math.random());\n       let entity3 = Math.ceil(punctuation.length * Math.random()*Math.random());\n       let hold = string.charAt( entity1 );\n        hold = (password.length%2==0)?(hold.toUpperCase()):(hold);\n        character += hold;\n        character += numeric.charAt( entity2 );\n        character += punctuation.charAt( entity3 );\n        password = character;\n    }\n    password=password.split('').sort(function(){return 0.5-Math.random()}).join('');\n    return password.substr(0,len);\n}\n","export const statusOption = [\n    { value : 0, label : 'Active' },\n    { value : 1, label : 'In Active' },\n    { value : 2, label : 'Terminated' }\n]\n\nexport const roleOption = [\n    { value : 'user', label : 'User' },\n    { value : 'admin', label : 'Admin' },\n    { value : 'IBO', label : 'IBO' },\n    { value : 'branch', label : 'Branch' }\n]\n\nexport const formateStatus = (status) => {\n    switch (+status) {\n        case (0):\n            return 'Active';\n        case (1):\n            return 'In Active';\n        case (2):\n            return 'Terminated'            \n        default:\n            return 'Active';\n    }\n}","import { useEffect, useState } from \"react\";\n\n// Hook\nexport const useDebounce = (value, delay) => {\n    // State and setters for debounced value\n    const [debouncedValue, setDebouncedValue] = useState(value);\n    useEffect(\n      () => {\n        // Update debounced value after delay\n        const handler = setTimeout(() => {\n          setDebouncedValue(value);\n        }, delay);\n        // Cancel the timeout if value changes (also on delay change or unmount)\n        // This is how we prevent debounced value from updating if value is changed ...\n        // .. within the delay period. Timeout gets cleared and restarted.\n        return () => {\n          clearTimeout(handler);\n        };\n      },\n      [value, delay] // Only re-call effect if value or delay changes\n    );\n    return debouncedValue;\n  }","import React, { useEffect, useState } from \"react\";\nimport { useCookies } from \"react-cookie\";\nimport ReactPaginate from \"react-paginate\";\nimport {\n  getUsers,\n  userLogout,\n  deleteUsr,\n  updateProfile,\n  getBranches,\n  getIBOs,\n} from \"../../../utils/APIs\";\nimport { useDebounce } from \"../../../utils/Functions/useDebounce\";\n\nimport Swal from \"sweetalert2\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { useForm } from \"react-hook-form\";\nimport { Form } from \"react-bootstrap\";\nimport { toast } from \"react-toastify\";\nimport { useHistory } from \"react-router-dom\";\nimport { statusOption,formateStatus } from \"../../../utils/Functions/commonOptions\";\nimport { password_generator } from \"../../../utils/Functions/passwordGenerator\";\n\n\nconst IboList = () => {\n  const [cookies, setCookie] = useCookies([\"user\"]);\n  const [itemlist, setitemlist] = useState([]);\n  const history = useHistory();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  \n\n\n  // We start with an empty list of items.\n  const [pageCount, setPageCount] = useState(0);\n  // Here we use item offsets; we could also use page offsets\n  // following the API or data you're working with.\n  const [itemOffset, setItemOffset] = useState(0);\n  const [itemsPerPage] = useState(10);\n  const [show, setShow] = React.useState(false);\n  const [valueToEdit, setvalueToEdit] = useState({});\n  const [updateStatus, setupdateStatus] = useState(0);\n  const [branchList, setbranchList] = useState([]);\n  const [selectedBranch, setselectedBranch] = useState(\"\");\n  const [IBOList, setIBOList] = useState([]);\n  const [selectedIBO, setselectedIBO] = useState(\"\");\n  const [branchUpdate, setbranchUpdate] = useState('')\n  const [roleUpdate, setroleUpdate] = useState('')\n  const debouncedSearchTerm = useDebounce(searchTerm, 500);\n\n  const onChangeBranchUpdate = (e) => {\n    setbranchUpdate(e?.target?.value)\n  }\n\n  const onChangeRolepdate = (e) => {\n    setroleUpdate(e?.target?.value)\n  }\n  const onChangeHandlerBranch = (e) => {\n    setItemOffset(0);\n    setselectedBranch(e.target.value);\n  };\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors, isDirty, isValid },\n  } = useForm({\n    mode: \"onChange\",\n  });\n  var strongRegexMo = new RegExp(\n    \"^\\\\s*(?:\\\\+?(\\\\d{1,3}))?[-. (]*(\\\\d{3})[-. )]*(\\\\d{3})[-. ]*(\\\\d{4})(?: *x(\\\\d+))?\\\\s*$\"\n  );\n\n  const handleClose = () => {\n    setShow(false);\n    setvalueToEdit({});\n    setupdateStatus(0)\n  };\n\n  const handleShow = (value) => {\n    setvalueToEdit(value);\n    setShow(true);\n  };\n\n  const onChangeStatusForm = (e) => {\n    setupdateStatus(+e?.target?.value || 0)\n  }\n\n  const onSubmit = async (data) => {\n    data.status = updateStatus\n    try {\n      const updatedData = JSON.stringify(data);\n      await updateProfile(updatedData, valueToEdit?.id);\n      toast.success('User updated Successfully',{\n        autoClose : 3000\n      })\n      list();\n    } catch (error) {\n      if (error?.response?.data?.message) {\n        toast.error(error.response.data.message);\n      } else {\n        toast.error(process.env.REACT_APP_ERROR_MESSAGE);\n      }\n\n      if (error?.response?.data?.code === 401) {\n        const formData = JSON.stringify({\n          refreshToken: localStorage.getItem(\"refreshToken\"),\n        });\n        setCookie(\"user\", null, { path: \"/\" });\n        userLogout(formData).finally(() => {\n          history.push(\"/user-pages/login-1\");\n        });\n      }\n    } finally {\n      setShow(false);\n    }\n  };\n\n  useEffect(() => {\n    list();\n  }, [itemOffset, itemsPerPage]);\n  const generatePassword = async (id) => {\n    const randomPassword = password_generator();\n    const newPassword = JSON.stringify({\n      password : randomPassword\n    })\n    \n\n    try {\n     await updateProfile(newPassword,id)\n     toast.success('Password generated and sended to user via Email successfully',{ autoClose : 3000 })\n    } catch (error) {\n      toast.error('Password generation failed, please try again later')\n    }\n    \n  };\n  const getIBOList = async () => {\n    const items = await (await getIBOs(5000, 1, \"\", \"IBO\")).data;\n\n    setIBOList(items?.results);\n  };\n\n  // Invoke when user click to request another page.\n  const handlePageClick = (event) => {\n    const newOffset = (event.selected * itemsPerPage) % itemlist.length;\n    setItemOffset(newOffset);\n  };\n  \n  useEffect(() => {\n    list();\n  }, [itemOffset, itemsPerPage, selectedBranch, selectedIBO]);\n\n  useEffect(() => {\n    list();\n  }, [debouncedSearchTerm]);\n\n  useEffect(() => {\n    getBranchList();\n    getIBOList();\n  }, []);\n\n  const getBranchList = async () => {\n    const items = await (await getBranches(5000, 1, \"\", \"branch\")).data;\n    setbranchList(items?.results);\n  };\n\n  const deleteBranch = (uid) => {\n    Swal.fire({\n      title: \"Are you sure?\",\n      text: \"You will not be able to recover this imaginary file!\",\n      icon: \"warning\",\n      showCancelButton: true,\n      cancelButtonColor: \"#DD6B55\",\n      confirmButtonColor: \"#DD6B55\",\n      confirmButtonText: \"Yes, delete it!\",\n      cancelButtonText: \"No, keep it\",\n    }).then((result) => {\n      if (result.value) {\n        return (\n          deleteUsr(uid).finally(() => list()),\n          Swal.fire(\n            \"Deleted!\",\n            \"Your imaginary file has been deleted.\",\n            \"success\"\n          )\n        );\n      } else if (result.dismiss === Swal.DismissReason.cancel) {\n        Swal.fire(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\n      }\n    });\n  };\n\n  const list = async () => {\n    try {\n      const items = await (await getIBOs(itemsPerPage, itemOffset)).data;\n      setitemlist(items?.results);\n      setPageCount(items?.totalPages);\n    } catch (error) {\n      if (error?.response?.data?.message) {\n        toast.error(error.response.data.message);\n      } else {\n        toast.error(process.env.REACT_APP_ERROR_MESSAGE);\n      }\n\n      if (error?.response?.data?.code === 401) {\n        const formData = JSON.stringify({\n          refreshToken: localStorage.getItem(\"refreshToken\"),\n        });\n        setCookie(\"user\", null, { path: \"/\" });\n        userLogout(formData).finally(() => {\n          history.push(\"/user-pages/login-1\");\n        });\n      }\n    }\n  };\n\n  return (\n    <div>\n      <Modal\n        show={show}\n        onHide={handleClose}\n        backdrop=\"static\"\n        keyboard={false}\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>Update Ibo</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <div className=\"row auth\">\n            <div className=\"col-12 grid-margin\">\n              <div className=\"card\">\n                <div className=\"card-body\">\n                  <form\n                    className=\"form-sample\"\n                    onSubmit={handleSubmit(onSubmit)}\n                  >\n                    <p className=\"card-description\"> Update Ibo </p>\n                    <div className=\"row\">\n                      <div className=\"col-md-12\">\n                        <Form.Group className=\"row\">\n                          <label className=\"col-sm-3 col-form-label\">\n                            Name\n                          </label>\n                          <div className=\"col-sm-9\">\n                            <Form.Control\n                              type=\"text\"\n                              name=\"name\"\n                              defaultValue={valueToEdit.name}\n                              {...register(\"name\", { required: true })}\n                            />\n                            {errors && errors.name && (\n                              <p>name is required field</p>\n                            )}\n                          </div>\n                        </Form.Group>\n                      </div>\n                    </div>\n\n                    \n                <div className=\"row\">\n                  <div className=\"col-md-12\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-2 col-form-label\">\n                        Address{\" \"}\n                      </label>\n                      <div className=\"col-sm-10\">\n                        <Form.Control\n                          type=\"text\"\n                          name=\"address\"\n                          {...register(\"address\", { required: true })}\n                        />\n                        {errors && errors.address && (\n                          <p>address is required field</p>\n                        )}\n                      </div>\n                    </Form.Group>\n                  </div>\n                </div>\n\n                    <div className=\"row\">\n                      <div className=\"col-md-12\">\n                        <Form.Group className=\"row\">\n                          <label className=\"col-sm-3 col-form-label\">\n                            Contact No\n                          </label>\n                          <div className=\"col-sm-9\">\n                            <Form.Control\n                              type=\"text\"\n                              name=\"contactno\"\n                              defaultValue={valueToEdit.contactno}\n                              {...register(\"contactno\", {\n                                required: true,\n                                pattern: strongRegexMo,\n                              })}\n                            />\n                            {errors &&\n                              errors.contactno &&\n                              errors.contactno.type === \"required\" && (\n                                <p>contact number is required field</p>\n                              )}\n                            {errors &&\n                              errors.contactno &&\n                              errors.contactno.type === \"pattern\" && (\n                                <p>\n                                  invalid phone number please use valid formate\n                                </p>\n                              )}\n                          </div>\n                        </Form.Group>\n                      </div>\n                    </div>\n\n                    <div className=\"row\">\n                      <div className=\"col-md-12\">\n                        <Form.Group className=\"row\">\n                          <label className=\"col-sm-3 col-form-label\">\n                            Email\n                          </label>\n                          <div className=\"col-sm-9\">\n                            <Form.Control\n                              type=\"text\"\n                              name=\"email\"\n                              defaultValue={valueToEdit.email}\n                              {...register(\"email\", {\n                                required: true,\n                                pattern: /^\\S+@\\S+$/i,\n                              })}\n                            />\n                            {errors &&\n                              errors.email &&\n                              errors.email.type === \"required\" && (\n                                <p>email is required field</p>\n                              )}\n                            {errors &&\n                              errors.email &&\n                              errors.email.type === \"pattern\" && (\n                                <p>invalid email formate</p>\n                              )}\n                          </div>\n                        </Form.Group>\n                      </div>\n                    </div>\n\n                    <div className=\"row\">\n                      <div className=\"col-md-12\">\n                        <Form.Group className=\"row\">\n                          <label className=\"col-sm-3 col-form-label\">\n                            status\n                          </label>\n                          <div className=\"col-sm-9\">\n                            <select\n                              className=\"form-control form-control-sm\"\n                              id=\"exampleFormControlSelect3\"\n                              name=\"status\"\n                              onChange={onChangeStatusForm}\n                            >\n                              {statusOption?.map((i) => {\n                                return (\n                                  <option\n                                    value={i?.value}\n                                    selected={+updateStatus === +i?.value}\n                                  >\n                                    {i?.label}\n                                  </option>\n                                );\n                              })}\n                            </select>\n                          </div>\n                        </Form.Group>\n                      </div>\n                    </div>\n\n                    <div className=\"row\">\n                      <div className=\"col-md-12\">\n                        <Form.Group className=\"row\">\n                          <label className=\"col-sm-3 col-form-label\">\n                            Role\n                          </label>\n                          <div className=\"col-sm-9\">\n                            <Form.Control\n                              type=\"text\"\n                              defaultValue={valueToEdit.role}\n                              name=\"role\"\n                              {...register(\"role\", { required: true })}\n                            />\n                            {errors && errors.branch && (\n                              <p>role is required field</p>\n                            )}\n                          </div>\n                        </Form.Group>\n                      </div>\n                    </div>\n\n                    <div className=\"mt-3\">\n                      <button\n                        className=\"btn  btn-primary btn-lg font-weight-medium auth-form-btn\"\n                        type=\"submit\"\n                      >\n                        UPDATE\n                      </button>\n                    </div>\n                  </form>\n                </div>\n              </div>\n            </div>\n          </div>\n        </Modal.Body>\n      </Modal>\n      <div className=\"page-header\">\n        <h3 className=\"page-title\">ibos / Fetch Ibos </h3>\n        <nav aria-label=\"breadcrumb\">\n          <ol className=\"breadcrumb\">\n            <li className=\"breadcrumb-item\">\n              <a href=\"!#\" onClick={(event) => event.preventDefault()}>\n                {cookies?.user?.role} Dashboard\n              </a>\n            </li>\n            <li className=\"breadcrumb-item active\" aria-current=\"page\">\n              Fetch Ibos\n            </li>\n          </ol>\n        </nav>\n      </div>\n      <div className=\"col-lg-12 grid-margin stretch-card p0\">\n        <div className=\"card\">\n          <div className=\"card-body\">\n          <div className=\"row\">\n              <div className=\"col-md-6\">\n                <Form.Group className=\"row\">\n                  <label className=\"col-sm-4 col-form-label\">\n                    Search Branch\n                  </label>\n                  <div className=\"col-sm-8\">\n                    <select\n                      className=\"form-control form-control-sm\"\n                      id=\"exampleFormControlSelect2\"\n                      name=\"branch\"\n                      onChange={onChangeHandlerBranch}\n                    >\n                      <option selected={\"\" === selectedBranch} value={\"\"}>\n                        Not Selected\n                      </option>\n                      {branchList?.map((i) => {\n                        return (\n                          <>\n                            <option\n                              selected={i.name === selectedBranch}\n                              value={i.name}\n                            >\n                              {i.name}\n                            </option>\n                          </>\n                        );\n                      })}\n                    </select>\n                  </div>\n                </Form.Group>\n              </div>\n\n              <div className=\"col-md-6\">\n                <div className=\"search-field d-none d-md-block\">\n                  <form className=\"d-flex align-items-center h-100\" action=\"#\">\n                    <div className=\"input-group\">\n                      <div className=\"input-group-prepend outline-gray bg-transparent\">\n                        <i className=\"input-group-text border-0 mdi mdi-magnify\"></i>\n                      </div>\n                      <input\n                        type=\"text\"\n                        className=\"form-control outline-gray bg-transparent border-0\"\n                        placeholder=\"Search Clients\"\n                        value={searchTerm}\n                        onChange={(e) => {\n                          setSearchTerm(e?.target?.value);\n                          setItemOffset(0);\n                        }}\n                      />\n                    </div>\n                  </form>\n                </div>\n              </div>\n            </div>\n            <h4 className=\"card-title\">Ibo list</h4>\n\n            <div className=\"table-responsive\">\n              <table className=\"table table-striped\">\n                <thead>\n                  <tr>\n                    <th> Name </th>\n                    <th> Contact no. </th>\n                    <th> Branch </th>\n                    <th> Email </th>\n                    <th> Role </th>\n                    <th> Status </th>\n                    <th> Generate Password </th>\n\n                    <th> Edit </th>\n                    <th> Delete </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {itemlist?.map((item) => {\n                    return (\n                      <tr>\n                        <td>{item?.name}</td>\n                        <td>{item?.contactno}</td>\n                        <td>{item?.branch}</td>\n                        <td>{item?.email}</td>\n                        <td>{item?.role}</td>\n                        <td>{formateStatus(item?.status)}</td>\n                        {/* <td>\n                          <label className=\"badge badge-gradient-success\">\n                            Active\n                          </label>\n                          <label className=\"badge badge-gradient-danger\">\n                            Inactive\n                          </label>\n                        </td> */}\n                        <td>\n                          <button\n                            type=\"button\"\n                            className=\"btn btn-gradient-primary btn-sm \"\n                            onClick={() => generatePassword(item?.id)}\n                          >\n                            Generate\n                          </button>\n                        </td>\n                        <td>\n                          <i\n                            onClick={() => handleShow(item)}\n                            className=\"mdi mdi-lead-pencil\"\n                          ></i>\n                        </td>\n                        <td>\n                          <i\n                            onClick={() => deleteBranch(item?.id)}\n                            className=\"mdi mdi-delete\"\n                          ></i>\n                        </td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n              <ReactPaginate\n                breakLabel=\"...\"\n                nextLabel=\"next >\"\n                className=\"client-list\"\n                onPageChange={handlePageClick}\n                pageRangeDisplayed={5}\n                pageCount={pageCount}\n                previousLabel=\"< previous\"\n                renderOnZeroPageCount={null}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default IboList;\n"],"sourceRoot":""}