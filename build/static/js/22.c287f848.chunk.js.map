{"version":3,"sources":["utils/Functions/useDebounce.js","app/Admin-components/ContactedClients/ClientList/index.js"],"names":["useDebounce","value","delay","useState","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","ClientList","history","useHistory","useCookies","cookies","setCookie","itemlist","setitemlist","searchTerm","searchType","setSearchType","selectedBranch","setselectedBranch","branchList","setbranchList","debouncedSearchTerm","useForm","mode","formState","errors","isDirty","isValid","pageCount","setPageCount","useUrl","itemOffset","setItemOffset","itemsPerPage","isLoading","setIsLoading","list","getBranchList","user","role","getConnectByBranch","name","data","items","getConnect","results","totalPages","response","message","toast","error","process","code","formData","JSON","stringify","refreshToken","localStorage","getItem","path","userLogout","finally","push","csvreport","headers","label","key","filename","getBranches","className","aria-label","href","onClick","event","preventDefault","aria-current","type","fileName","wb","Sheets","XLSX","json_to_sheet","SheetNames","excelBuffer","bookType","Blob","FileSaver","exportToCSV","Group","id","onChange","e","target","selected","map","i","item","contactno","branch","moment","fromDate","format","Id","pathname","search","URLSearchParams","toString","uid","Swal","fire","title","text","icon","showCancelButton","cancelButtonColor","confirmButtonColor","confirmButtonText","cancelButtonText","then","result","deleteContact","dismiss","DismissReason","cancel","breakLabel","nextLabel","onPageChange","window","scrollTo","pageRangeDisplayed","previousLabel","renderOnZeroPageCount","forcePage"],"mappings":"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","file":"static/js/22.c287f848.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\n// Hook\r\nexport const useDebounce = (value, delay) => {\r\n    // State and setters for debounced value\r\n    const [debouncedValue, setDebouncedValue] = useState(value);\r\n    useEffect(\r\n      () => {\r\n        // Update debounced value after delay\r\n        const handler = setTimeout(() => {\r\n          setDebouncedValue(value);\r\n        }, delay);\r\n        // Cancel the timeout if value changes (also on delay change or unmount)\r\n        // This is how we prevent debounced value from updating if value is changed ...\r\n        // .. within the delay period. Timeout gets cleared and restarted.\r\n        return () => {\r\n          clearTimeout(handler);\r\n        };\r\n      },\r\n      [value, delay] // Only re-call effect if value or delay changes\r\n    );\r\n    return debouncedValue;\r\n  }","import React, { useEffect, useState } from \"react\";\r\nimport { useCookies } from \"react-cookie\";\r\nimport ReactPaginate from \"react-paginate\";\r\nimport { userLogout, getConnect, getBranches, deleteContact, getConnectByBranch } from \"../../../../utils/APIs\";\r\nimport { CSVLink } from \"react-csv\";\r\nimport * as FileSaver from \"file-saver\";\r\nimport * as XLSX from \"xlsx\";\r\n\r\nimport { toast } from \"react-toastify\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Swal from \"sweetalert2\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useUrl } from \"../../../../utils/Functions/useUrl\";\r\nimport { useDebounce } from \"../../../../utils/Functions/useDebounce\";\r\nimport Spinner from \"../../../shared/Spinner\";\r\nimport moment from 'moment';\r\nimport { Form } from \"react-bootstrap\";\r\n\r\nconst ClientList = () => {\r\n  const history = useHistory();\r\n  const [cookies, setCookie] = useCookies([\"user\"]);\r\n  const [itemlist, setitemlist] = useState([]);\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [searchType, setSearchType] = useState();\r\n  const [selectedBranch, setselectedBranch] = useState(\"\");\r\n  const [branchList, setbranchList] = useState([]);\r\n  const debouncedSearchTerm = useDebounce(searchTerm, 500);\r\n  const {\r\n    formState: { errors, isDirty, isValid },\r\n  } = useForm({\r\n    mode: \"onChange\",\r\n  });\r\n\r\n  // We start with an empty list of items.\r\n  const [pageCount, setPageCount] = useState(0);\r\n  // Here we use item offsets; we could also use page offsets\r\n  // following the API or data you're working with.\r\n  const [itemOffset, setItemOffset] = useUrl(\"page\");\r\n  const [itemsPerPage] = useState(20);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    list();\r\n  }, [itemOffset, itemsPerPage,searchType, selectedBranch, debouncedSearchTerm]);\r\n\r\n  useEffect(() => {\r\n    getBranchList()\r\n  },[])\r\n\r\n  const list = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      let items\r\n      if (cookies?.user?.role === 'branch') {\r\n        items = await (\r\n          await getConnectByBranch(itemsPerPage, +itemOffset + 1, searchTerm, cookies?.user?.name)\r\n        ).data;\r\n      }\r\n\r\n      if (cookies?.user?.role === 'admin') {\r\n        items = await (\r\n          await getConnect(itemsPerPage, +itemOffset + 1, selectedBranch ,searchType)\r\n        ).data;\r\n      }\r\n      setitemlist(items?.results);\r\n      setPageCount(items?.totalPages);\r\n    } catch (error) {\r\n      if (error?.response?.data?.message) {\r\n        toast.error(error.response.data.message);\r\n      } else {\r\n        toast.error(process.env.REACT_APP_ERROR_MESSAGE);\r\n      }\r\n\r\n      if (error?.response?.data?.code === 401) {\r\n        const formData = JSON.stringify({\r\n          refreshToken: localStorage.getItem(\"refreshToken\"),\r\n        });\r\n        setCookie(\"user\", null, { path: \"/\" });\r\n        userLogout(formData).finally(() => {\r\n          history.push(\"/user-pages/login-1\");\r\n        });\r\n      }\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  // Invoke when user click to request another page.\r\n  const handlePageClick = (event) => {\r\n    window.scrollTo(0, 0);\r\n    setItemOffset(event.selected);\r\n  };\r\n\r\n  const convertClient = (Id) => {\r\n    history.push({\r\n      pathname: '/clients/createclient',\r\n      search: \"?\" + new URLSearchParams({ id: Id }).toString()\r\n    })\r\n  }\r\n\r\n\r\n  // excel export\r\n  const fileType =\r\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\r\n  const fileExtension = \".xlsx\";\r\n\r\n\r\n  // csv export\r\n  const exportToCSV = (fileName) => {\r\n    const ws = XLSX.utils.json_to_sheet(itemlist);\r\n    const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\r\n    const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\r\n    const data = new Blob([excelBuffer], { type: fileType });\r\n    FileSaver.saveAs(data, fileName + fileExtension);\r\n  };\r\n\r\n  const headers = [\r\n    { label: \"Name\", key: \"name\", },\r\n    { label: \"Contact no\", key: \"contactno\", },\r\n    { label: \"Branch\", key: \"branch\", },\r\n    { label: \"Date\", key: \"date\", },\r\n    { label: \"Type\", key: \"type\", },\r\n  ]\r\n\r\n  const csvreport = {\r\n    data: itemlist,\r\n    headers: headers,\r\n    filename: 'Clue_Mediator_Report.csv'\r\n  };\r\n\r\n  const getBranchList = async () => {\r\n    const items = await (await getBranches(5000, 1, \"\", \"branch\")).data;\r\n\r\n    setbranchList(items?.results);\r\n  };\r\n\r\n  const onChangeHandlerBranch = (e) => {\r\n    setItemOffset(0);\r\n    setselectedBranch(e.target.value);\r\n  };\r\n\r\n  const onChangeHandlerType = (e) => {\r\n    setItemOffset(0);\r\n    setSearchType(e.target.value);\r\n  };\r\n  const deleteData = (uid) => {\r\n    Swal.fire({\r\n      title: \"Are you sure?\",\r\n      text: \"You will not be able to recover this imaginary file!\",\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      cancelButtonColor: \"#DD6B55\",\r\n      confirmButtonColor: \"#DD6B55\",\r\n      confirmButtonText: \"Yes, delete it!\",\r\n      cancelButtonText: \"No, keep it\",\r\n    }).then((result) => {\r\n      if (result.value) {\r\n        return (\r\n          deleteContact(uid).finally(() => list()),\r\n          Swal.fire(\r\n            \"Deleted!\",\r\n            \"Your imaginary file has been deleted.\",\r\n            \"success\"\r\n          )\r\n        );\r\n      } else if (result.dismiss === Swal.DismissReason.cancel) {\r\n        Swal.fire(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"page-header\">\r\n        <h3 className=\"page-title\">Contacted clients / Fetch Clients </h3>\r\n        <nav aria-label=\"breadcrumb\">\r\n          <ol className=\"breadcrumb\">\r\n            <li className=\"breadcrumb-item\">\r\n              <a href=\"!#\" onClick={(event) => event.preventDefault()}>\r\n                {cookies?.user?.role} Dashboard\r\n              </a>\r\n            </li>\r\n            <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n              fetch clients\r\n            </li>\r\n          </ol>\r\n        </nav>\r\n      </div>\r\n      <div className=\"col-lg-12 grid-margin stretch-card p0\">\r\n        <div className=\"card\">\r\n          <div className=\"card-body\">\r\n            <div className=\"row mb-4\">\r\n              <div className=\"col-md-3\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-gradient-primary btn-sm \"\r\n                >\r\n                  <CSVLink {...csvreport} className=\"text-white\">Export to CSV</CSVLink>\r\n                </button>\r\n              </div>\r\n\r\n              <div className=\"col-md-3\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-gradient-primary btn-sm \"\r\n                  onClick={() => exportToCSV('test')}\r\n                >\r\n                  Download Excel\r\n                </button>\r\n              </div>\r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"col-md-4\">\r\n                <Form.Group className=\"row\">\r\n                  <label className=\"col-sm-6 col-form-label\">\r\n                    Search Branch\r\n                  </label>\r\n                  <div className=\"col-sm-6\">\r\n                    <select\r\n                      className=\"form-control form-control-sm\"\r\n                      id=\"exampleFormControlSelect2\"\r\n                      name=\"branch\"\r\n                      onChange={onChangeHandlerBranch}\r\n                    >\r\n                      <option selected={\"\" === selectedBranch} value={\"\"}>\r\n                        Not Selected\r\n                      </option>\r\n                      {branchList?.map((i) => {\r\n                        return (\r\n                          <>\r\n                            <option\r\n                              selected={i.name === selectedBranch}\r\n                              value={i.name}\r\n                            >\r\n                              {i.name}\r\n                            </option>\r\n                          </>\r\n                        );\r\n                      })}\r\n                    </select>\r\n                  </div>\r\n                </Form.Group>\r\n              </div>\r\n\r\n              <div className=\"col-md-4\">\r\n                <Form.Group className=\"row\">\r\n                  <label className=\"col-sm-6 col-form-label\">\r\n                    Search Type\r\n                  </label>\r\n                  <div className=\"col-sm-6\">\r\n                    <select\r\n                      className=\"form-control form-control-sm\"\r\n                      id=\"exampleFormControlSelect2\"\r\n                      name=\"type\"\r\n                      onChange={onChangeHandlerType}\r\n                    >\r\n                      <option selected={\"\" === searchType} value={\"\"}>\r\n                        Not Selected\r\n                      </option>\r\n                      <option value={1}>Free</option>\r\n                      <option value={2}>Paid</option>\r\n                    </select>\r\n                  </div>\r\n                </Form.Group>\r\n              </div>\r\n\r\n              {/* <div className=\"col-md-4\">\r\n                <div className=\"search-field d-none d-md-block\">\r\n                  <form className=\"d-flex align-items-center h-100\" action=\"#\">\r\n                    <div className=\"input-group\">\r\n                      <div className=\"input-group-prepend outline-gray bg-transparent\">\r\n                        <i className=\"input-group-text border-0 mdi mdi-magnify\"></i>\r\n                      </div>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control outline-gray bg-transparent border-0\"\r\n                        placeholder=\"Search Clients\"\r\n                        value={searchTerm}\r\n                        onChange={(e) => {\r\n                          setSearchTerm(e?.target?.value);\r\n                          setItemOffset(0);\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  </form>\r\n                </div>\r\n              </div> */}\r\n            </div>\r\n\r\n            <div className=\"table-responsive\">\r\n              <table className=\"table table-striped\">\r\n                <thead>\r\n                  <tr>\r\n                    <th> Name </th>\r\n                    <th> Contact no. </th>\r\n                    <th> Branch </th>\r\n                    <th> Date </th>\r\n                    <th> Type </th>\r\n                    <th> Convert </th>\r\n                    <th> Delete </th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {isLoading ? (\r\n                    <Spinner />\r\n                  ) : (\r\n                    itemlist?.map((item) => {\r\n                      return (\r\n                        <tr>\r\n                          <td>{item?.name}</td>\r\n                          <td>{item?.contactno}</td>\r\n                          <td>{item?.branch}</td>\r\n                          <td>{moment(item?.fromDate).format('DD-MM-YYYY')}</td>\r\n                          <td>{item?.type === 1 ? \"Free\" : \"Paid\"}</td>\r\n                          <td><button\r\n                            type=\"button\"\r\n                            className=\"btn btn-gradient-primary btn-sm \"\r\n                            onClick={() => { convertClient(item?.id) }}\r\n                          >\r\n                            Convert\r\n                          </button></td>\r\n                          <td> <i\r\n                            onClick={() => deleteData(item?.id)}\r\n                            className=\"mdi mdi-delete\"\r\n                          >\r\n                            {\" \"}\r\n                          </i>\r\n                          </td>\r\n                        </tr>\r\n                      );\r\n                    })\r\n                  )}\r\n                </tbody>\r\n              </table>\r\n              <ReactPaginate\r\n                breakLabel=\"...\"\r\n                nextLabel=\"next >\"\r\n                className=\"client-list\"\r\n                onPageChange={handlePageClick}\r\n                pageRangeDisplayed={5}\r\n                pageCount={pageCount}\r\n                previousLabel=\"< previous\"\r\n                renderOnZeroPageCount={null}\r\n                forcePage={itemOffset}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ClientList;\r\n"],"sourceRoot":""}