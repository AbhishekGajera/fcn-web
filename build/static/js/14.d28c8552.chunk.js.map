{"version":3,"sources":["utils/Functions/commonOptions.js","app/Admin-components/Cost/AddExpences.js"],"names":["statusOption","value","label","roleOption","timeOption","Date","setDate","getDate","optionForExpenceType","optionForCostCategory","formateStatus","status","AddExpences","useCookies","cookies","history","useHistory","useForm","mode","register","handleSubmit","formState","errors","values","isDirty","isValid","getValues","onSubmit","data","formData","FormData","append","user","id","cost","expences","desc","file","type","addCost","toast","success","autoClose","push","response","message","error","process","className","style","display","justifyContent","Group","name","required","map","item","Control","as","multiple","onClick","e","preventDefault","element","document","getElementById","click"],"mappings":"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","file":"static/js/14.d28c8552.chunk.js","sourcesContent":["export const statusOption = [\n    { value : 0, label : 'Active' },\n    { value : 1, label : 'In Active' },\n    { value : 2, label : 'Terminated' }\n]\n\nexport const roleOption = [\n    { value : 'user', label : 'User' },\n    { value : 'admin', label : 'Admin' },\n    { value : 'IBO', label : 'IBO' },\n    { value : 'branch', label : 'Branch' }\n]\n\nexport const timeOption = [\n    { value : new Date().setDate(new Date().getDate() - 7), label : '1 week' },\n    { value : new Date().setDate(new Date().getDate() - 30), label : '1 month' },\n    { value : new Date().setDate(new Date().getDate() - 90), label : '3 month' },\n    { value : new Date().setDate(new Date().getDate() - 180), label : '6 month' },\n    { value : new Date().setDate(new Date().getDate() - 365), label : '1 Year' }\n]\n\nexport const optionForExpenceType = [\n    { value : 'Office expence', label : 'Office expence' },\n    { value : 'Employee expence', label : 'Employee expence' },\n    { value : 'Misleniuneous expence', label : 'Misleniuneous expence' },\n    { value : 'Other expence', label : 'Other expence' }\n]\n\nexport const optionForCostCategory = [\n    { value : 'Petrol', label : 'Petrol' },\n    { value : 'Food', label : 'Food' },\n    { value : 'Rent', label : 'Rent' },\n    { value : 'Tea', label : 'Tea' },\n    { value : 'Transport', label : 'Transport' },\n    { value : 'Gift', label : 'Gift' },\n    { value : 'Printing', label : 'Printing' },\n    { value : 'Advertising', label : 'Advertising' },\n    { value : 'Electricity Bill', label : 'Electricity Bill' },\n    { value : 'Cleaning', label : 'Cleaning' },\n    { value : 'Salary', label : 'Salary' },\n    { value : 'Medical Expences', label : 'Medical Expences' },\n    { value : 'Insurance', label : 'Insurance' },\n    { value : 'Legal & Professionals Fees', label : 'Legal & Professionals Fees' },\n    { value : 'Phone Bill', label : 'Phone Bill' },\n    { value : 'Internet Bill', label : 'Internet Bill' },\n    { value : 'Stationaries Bill', label : 'Stationaries Bill' },\n    { value : 'Depreciation', label : 'Depreciation' },\n    { value : 'Row materials', label : 'Row materials' },\n    { value : 'Books and magazine subscriptions', label : 'Books and magazine subscriptions' }\n]\n\nexport const formateStatus = (status) => {\n    switch (+status) {\n        case (0):\n            return 'Active';\n        case (1):\n            return 'In Active';\n        case (2):\n            return 'Terminated'            \n        default:\n            return 'Active';\n    }\n}","import React from 'react'\nimport { Form } from 'react-bootstrap'\nimport { useForm } from 'react-hook-form';\nimport { useCookies } from \"react-cookie\";\nimport { toast } from 'react-toastify';\nimport { addCost } from '../../../utils/APIs';\nimport { optionForExpenceType,optionForCostCategory } from \"../../../utils/Functions/commonOptions\";\nimport { useHistory } from 'react-router-dom';\n\nconst AddExpences = () => {\n    const [cookies ] = useCookies([\"user\"]);\n    const history = useHistory()\n\n    const handleUpload = (e) => {\n        e.preventDefault()\n        const element = document.getElementById('input-id');\n        if (element) {\n            element.click()\n        }\n    };\n\n    // form validation\n    const {\n        register,\n        handleSubmit,\n        formState: { errors, isDirty, isValid },\n        getValues\n    } = useForm({\n        mode: \"onChange\",\n    });\n\n    const values = getValues();\n\n    const onSubmit = async (data) => {\n        const formData = new FormData()\n        formData.append(\"user\",cookies?.user?.id)\n        formData.append(\"totalCost\",+data?.cost)\n        formData.append(\"category\",data?.expences)\n        formData.append(\"description\",data?.desc)\n        formData.append(\"image\",data?.file[0])\n        formData.append(\"type\",data?.type)\n\n        try {\n            await addCost(formData)\n            toast.success(\"Invoice added Succesfully\",{ autoClose : 4000 })\n            history.push('/costs/fetchExpences')\n        } catch (error) {\n            if (\n                error &&\n                error.response &&\n                error.response.data &&\n                error.response.data.message\n              ) {\n                toast.error(error.response.data.message);\n              } else {\n                toast.error(process.env.REACT_APP_ERROR_MESSAGE);\n              }\n        }\n    }\n    return (\n        <div>\n            <div className='page-header'>\n                <h3 className='page-title'>Add Expences</h3>\n            </div>\n            <div className=\"row auth\" style={{ display: 'flex', justifyContent: 'center' }}>\n                <div className=\"col-6 grid-margin\" >\n                    <div className=\"card\">\n                        <div className=\"card-body\">\n                            <form className=\"form-sample\" onSubmit={handleSubmit(onSubmit)}>\n                                <p className=\"card-description\"> Add Expences </p>\n                                <div className=\"row\" >\n                                    <div className=\"col-md-12\">\n                                        <Form.Group className=\"row\">\n                                            <label className=\"col-sm-3 col-form-label\">Expences</label>\n                                            <div className=\"col-sm-9\">\n                                                <select\n                                                    className=\"form-control form-control-lg\"\n                                                    id=\"exampleFormControlSelect2\"\n                                                    name=\"expences\"\n                                                    {...register(\"expences\", {\n                                                        required: true,\n                                                    })}>\n                                                   {optionForCostCategory.map((item) => {\n                                                       return <option value={item.value}> {item.label} </option>\n                                                   })}\n                                                </select>\n                                            </div>\n                                        </Form.Group>\n                                    </div>\n                                </div>\n\n                                <div className=\"row\" >\n                                    <div className=\"col-md-12\">\n                                        <Form.Group className=\"row\">\n                                            <label className=\"col-sm-3 col-form-label\">Type</label>\n                                            <div className=\"col-sm-9\">\n                                                <select\n                                                    className=\"form-control form-control-lg\"\n                                                    id=\"exampleFormControlSelect2\"\n                                                    name=\"type\"\n                                                    {...register(\"type\", {\n                                                        required: true,\n                                                    })}>\n                                                {\n                                                    optionForExpenceType?.map((item) => {\n                                                        return <option value={item.value}>{item.label}</option>\n                                                    })\n                                                }\n                                                </select>\n                                            </div>\n                                        </Form.Group>\n                                    </div>\n                                </div>\n\n                                <div className=\"row\">\n                                    <div className=\"col-md-12\">\n                                        <Form.Group className=\"row\">\n                                            <label className=\"col-sm-3 col-form-label\">\n                                                Total Cost{\" \"}\n                                            </label>\n                                            <div className=\"col-sm-9\">\n                                                <Form.Control\n                                                    type=\"number\"\n                                                    name=\"cost\"\n                                                    {...register(\"cost\", {\n                                                        required: true,\n                                                    })}\n                                                />\n                                                {errors && errors.cost && (\n                                                    <p>cost is required field</p>\n                                                )}\n                                            </div>\n                                        </Form.Group>\n                                    </div>\n                                </div>\n\n                                <div className=\"row\">\n                                    <div className=\"col-md-12\">\n                                        <Form.Group className=\"row\">\n                                            <label className=\"col-sm-3 col-form-label\">\n                                                Description{\" \"}\n                                            </label>\n                                            <div className=\"col-sm-9\">\n                                                <Form.Control\n                                                    type=\"text\"\n                                                    name=\"desc\"\n                                                    as=\"textarea\"\n                                                    {...register(\"desc\", { required: true })}\n                                                />\n                                                {errors && errors.desc && (\n                                                    <p>description is required field</p>\n                                                )}\n                                            </div>\n                                        </Form.Group>\n                                    </div>\n                                </div>\n\n                                <div className=\"row\">\n                                    <div className=\"col-md-12\">\n                                        <Form.Group className=\"row\">\n                                            <label className=\"col-sm-4 col-form-label\">\n                                                Upload Invoice{\" \"}\n                                            </label>\n                                            <div className=\"col-sm-8\">\n                                                <Form.Control\n                                                    id=\"input-id\"\n                                                    className=\"d-none\"\n                                                    type=\"file\"\n                                                    name=\"file\"\n                                                    multiple={false}\n                                                    {...register(\"file\", { required: true })}\n                                                />\n                                                \n                                                <button\n                                                    onClick={handleUpload}\n                                                    className={`btn btn-outline-${values?.file?.[0]?.name ? \" btn-primary\" : \" btn-primary\"\n                                                        }`}\n                                                >\n                                                    {values?.file?.[0]?.name ? values?.file?.[0]?.name : \"Upload Invoice  \"}\n                                                </button>\n                                                {errors && errors.file && (\n                                                    <p>Upload invoice is required field</p>\n                                                )}\n                                            </div>\n                                        </Form.Group>\n                                    </div>\n                                </div>\n                                \n                                <div className=\"mt-3\" style={{ display: 'flex', justifyContent: 'center' }}>\n                                    <button\n                                        className=\"btn  btn-primary btn-lg font-weight-medium auth-form-btn\"\n                                        type=\"submit\"\n                                    >\n                                        Submit\n                                    </button>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default AddExpences"],"sourceRoot":""}