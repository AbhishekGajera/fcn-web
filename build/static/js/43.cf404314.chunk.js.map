{"version":3,"sources":["app/Admin-components/IboCreate/index.js"],"names":["CreateIbo","useCookies","cookies","useState","itemlist","setitemlist","useForm","mode","register","handleSubmit","formState","errors","strongRegexMo","isDirty","isValid","RegExp","strongRegex","onSubmit","data","role","CreateUser","result","console","info","toast","success","response","message","error","process","useEffect","list","getBranches","items","log","results","code","JSON","stringify","refreshToken","localStorage","getItem","className","aria-label","href","onClick","event","preventDefault","user","aria-current","Group","Control","type","name","required","address","pattern","contactno","id","map","item","index","key","value","label","email","dob","password","selected","bankAccNo","bankIfscCode"],"mappings":"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","file":"static/js/43.cf404314.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport { useForm } from \"react-hook-form\";\nimport { Form } from \"react-bootstrap\";\nimport { useCookies } from \"react-cookie\";\nimport { toast } from \"react-toastify\";\nimport { CreateUser,getBranches } from \"../../../utils/APIs\";\n\nconst CreateIbo = () => {\n  const [cookies] = useCookies([\"user\"]);\n  const [itemlist, setitemlist] = useState([]);\n\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors, isDirty, isValid },\n  } = useForm({\n    mode: \"onChange\",\n  });\n  var strongRegexMo = new RegExp(\n    \"^\\\\s*(?:\\\\+?(\\\\d{1,3}))?[-. (]*(\\\\d{3})[-. )]*(\\\\d{3})[-. ]*(\\\\d{4})(?: *x(\\\\d+))?\\\\s*$\"\n  );\n  var strongRegex = new RegExp(\"^(?=.*[A-Za-z])(?=.*[0-9])(?=.{8,})\");\n\n  const onSubmit = async (data) => {\n    data.role = 'IBO'\n      try {\n        const result = await CreateUser(data)\n        console.info(\"result \",result)\n        toast.success(\"user crated successfully\");\n      } catch (error) {\n          console.info(\"error \",error)\n        if (\n          error &&\n          error.response &&\n          error.response.data &&\n          error.response.data.message\n        ) {\n          toast.error(error.response.data.message);\n        } else {\n          toast.error(process.env.REACT_APP_ERROR_MESSAGE);\n        }\n      }\n  };\n  useEffect(() => {\n    list();\n  }, []);\n\n  const list = async () => {\n    try {\n      const items = await (await getBranches()).data;\n      console.log(\"itm\",items)\n      setitemlist(items?.results);\n      // setPageCount(items?.totalPages);\n    } catch (error) {\n      if (error?.response?.data?.message) {\n        toast.error(error.response.data.message);\n      } else {\n        toast.error(process.env.REACT_APP_ERROR_MESSAGE);\n      }\n\n      if (error?.response?.data?.code === 401) {\n        const formData = JSON.stringify({\n          refreshToken: localStorage.getItem(\"refreshToken\"),\n        });\n        // setCookie(\"user\", null, { path: \"/\" });\n        // userLogout(formData).finally(() => {\n        //   history.push(\"/user-pages/login-1\");\n        // });\n      }\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"page-header\">\n        <h3 className=\"page-title\">Ibo / Create Ibos </h3>\n        <nav aria-label=\"breadcrumb\">\n          <ol className=\"breadcrumb\">\n            <li className=\"breadcrumb-item\">\n              <a href=\"!#\" onClick={(event) => event.preventDefault()}>\n                {cookies?.user?.role} Dashboard\n              </a>\n            </li>\n            <li className=\"breadcrumb-item active\" aria-current=\"page\">\n              Create Ibos\n            </li>\n          </ol>\n        </nav>\n      </div>\n      <div className=\"row auth\">\n        <div className=\"col-12 grid-margin\">\n          <div className=\"card\">\n            <div className=\"card-body\">\n              <form className=\"form-sample\" onSubmit={handleSubmit(onSubmit)}>\n                <p className=\"card-description\"> Personal info </p>\n                <div className=\"row\">\n                  <div className=\"col-md-12\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-2 col-form-label\">Name</label>\n                      <div className=\"col-sm-10\">\n                        <Form.Control\n                          type=\"text\"\n                          name=\"name\"\n                          {...register(\"name\", { required: true })}\n                        />\n                        {errors && errors.name && <p>name is required field</p>}\n                      </div>\n                    </Form.Group>\n                  </div>\n                </div>\n\n                <div className=\"row\">\n                  <div className=\"col-md-12\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-2 col-form-label\">\n                        Address{\" \"}\n                      </label>\n                      <div className=\"col-sm-10\">\n                        <Form.Control\n                          type=\"text\"\n                          name=\"address\"\n                          {...register(\"address\", { required: true })}\n                        />\n                        {errors && errors.address && (\n                          <p>address is required field</p>\n                        )}\n                      </div>\n                    </Form.Group>\n                  </div>\n                </div>\n\n                <div className=\"row\">\n                  <div className=\"col-md-6\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-3 col-form-label\">\n                        Contact No\n                      </label>\n                      <div className=\"col-sm-9\">\n                        <Form.Control\n                          type=\"text\"\n                          name=\"contactno\"\n                          {...register(\"contactno\", {\n                            required: true,\n                            pattern: strongRegexMo,\n                          })}\n                        />\n                        {errors &&\n                          errors.contactno &&\n                          errors.contactno.type === \"required\" && (\n                            <p>contact number is required field</p>\n                          )}\n                        {errors &&\n                          errors.contactno &&\n                          errors.contactno.type === \"pattern\" && (\n                            <p>invalid phone number please use valid formate</p>\n                          )}\n                      </div>\n                    </Form.Group>\n                  </div>\n                  <div className=\"col-md-6\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-3 col-form-label\">Branch</label>\n                      <div className=\"col-sm-9\">\n                      {/* {dataValues.map((tags, index) => (\n                  <MenuItem key={index} value={tags.title}>\n                    {tags.title}\n                  </MenuItem>\n                ))} */}\n                      <select\n                          className=\"form-control form-control-lg\"\n                          id=\"exampleFormControlSelect2\"\n                          name=\"branch\"\n                          {...register(\"branch\", {\n                            required: true,\n                          })}\n                        >\n                           {itemlist.map((item, index) => (\n                  <option key={index} value={item?.name} label={item?.name}></option>\n                ))}\n                         \n                          {/* <option>United States of America</option>\n                          <option >India</option>\n                          <option>United Kingdom</option>\n                          <option>Germany</option>\n                          <option>Argentina</option> */}\n                        </select>\n                        </div>\n                      {/* <div className=\"col-sm-9\">\n                        <Form.Control\n                          type=\"text\"\n                          name=\"branch\"\n                          {...register(\"branch\", { required: true })}\n                        />\n                        {errors && errors.branch && (\n                          <p>branch is required field</p>\n                        )}\n                      </div> */}\n                    </Form.Group>\n                  </div>\n                </div>\n                <div className=\"row\">\n                  <div className=\"col-md-6\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-3 col-form-label\">Email</label>\n                      <div className=\"col-sm-9\">\n                        <Form.Control\n                          type=\"text\"\n                          name=\"email\"\n                          {...register(\"email\", {\n                            required: true,\n                            pattern: /^\\S+@\\S+$/i,\n                          })}\n                        />\n                        {errors &&\n                          errors.email &&\n                          errors.email.type === \"required\" && (\n                            <p>email is required field</p>\n                          )}\n                        {errors &&\n                          errors.email &&\n                          errors.email.type === \"pattern\" && (\n                            <p>invalid email formate</p>\n                          )}\n                      </div>\n                    </Form.Group>\n                  </div>\n                  <div className=\"col-md-6\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-3 col-form-label\">DOB</label>\n                      <div className=\"col-sm-9\">\n                        <Form.Control\n                          type=\"date\"\n                          name=\"dob\"\n                          {...register(\"dob\", { required: true })}\n                        />\n                        {errors && errors.dob && <p>DOB is required field</p>}\n                      </div>\n                    </Form.Group>\n                  </div>\n                </div>\n                <div className=\"row\">\n                  <div className=\"col-md-6\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-3 col-form-label\">\n                        Password\n                      </label>\n                      <div className=\"col-sm-9\">\n                        <Form.Control\n                          type=\"text\"\n                          name=\"password\"\n                          {...register(\"password\", {\n                            required: true,\n                            pattern: strongRegex,\n                          })}\n                        />\n                        {errors &&\n                          errors.password &&\n                          errors.password.type === \"required\" && (\n                            <p>password is required field</p>\n                          )}\n                        {errors &&\n                          errors.password &&\n                          errors.password.type === \"pattern\" && (\n                            <p>\n                              password should have at least 8 characters , 1\n                              number and latter\n                            </p>\n                          )}\n                      </div>\n                    </Form.Group>\n                  </div>\n                  <div className=\"col-md-6\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-3 col-form-label\">Select Country</label>\n                      <div className=\"col-sm-9\">\n                        <select\n                          className=\"form-control form-control-lg\"\n                          id=\"exampleFormControlSelect2\"\n                          name=\"country\"\n                          {...register(\"country\", {\n                            required: true,\n                          })}\n                        >\n                          <option>Country</option>\n                          <option>United States of America</option>\n                          <option selected>India</option>\n                          <option>United Kingdom</option>\n                          <option>Germany</option>\n                          <option>Argentina</option>\n                        </select>\n                      </div>\n                    </Form.Group>\n                  </div>\n                </div>\n                <div className=\"row\">\n                  <div className=\"col-md-6\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-3 col-form-label\">\n                        Bank Account no\n                      </label>\n                      <div className=\"col-sm-9\">\n                        <Form.Control\n                          type=\"text\"\n                          name=\"bankAccNo\"\n                          {...register(\"bankAccNo\", { required: true })}\n                        />\n                        {errors && errors.bankAccNo && (\n                          <p>Bank Account number is required field</p>\n                        )}\n                      </div>\n                    </Form.Group>\n                  </div>\n                  <div className=\"col-md-6\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-3 col-form-label\">\n                        IFSC code\n                      </label>\n                      <div className=\"col-sm-9\">\n                        <Form.Control\n                          type=\"text\"\n                          name=\"bankIfscCode\"\n                          {...register(\"bankIfscCode\", { required: true })}\n                        />\n                        {errors && errors.bankIfscCode && (\n                          <p>Bank IFSC number is required field</p>\n                        )}\n                      </div>\n                    </Form.Group>\n                  </div>\n                </div>\n\n                <div className=\"mt-3\">\n                  <button\n                    className=\"btn  btn-primary btn-lg font-weight-medium auth-form-btn\"\n                    type=\"submit\"\n                  >\n                    SUBMIT\n                  </button>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CreateIbo;\n"],"sourceRoot":""}