{"version":3,"sources":["utils/Functions/useDebounce.js","utils/Functions/useUrl.js","app/Admin-components/Product/ProductFetch.js"],"names":["useDebounce","value","delay","useState","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","useUrl","param","history","useHistory","useLocation","search","pathname","url","URLSearchParams","urlParam","get","setValue","val","set","replace","toString","ProductList","searchTerm","setSearchTerm","debouncedSearchTerm","selectedProductType","selectedProductCategory","isChecked","setIsChecked","pageCount","setPageCount","itemOffset","setItemOffset","itemsPerPage","useCookies","cookies","setCookie","itemlist","setitemlist","isLoading","setIsLoading","list","getProductsList","data","items","results","totalPages","response","message","toast","error","process","code","formData","JSON","stringify","refreshToken","localStorage","getItem","path","userLogout","finally","push","handleMultiChange","e","target","id","checked","className","aria-label","href","onClick","event","preventDefault","user","role","aria-current","action","type","placeholder","onChange","Fragment","map","item","index","key","name","category","description","status","formateStatus","console","log","UpdateProducts","success","autoClose","statusChanged","selected","uid","Swal","fire","title","text","icon","showCancelButton","cancelButtonColor","confirmButtonColor","confirmButtonText","cancelButtonText","then","result","deleteProductById","itemList","Object","keys","Promise","all","dismiss","DismissReason","cancel","imageURL","image","window","open","breakLabel","nextLabel","onPageChange","pageRangeDisplayed","previousLabel","renderOnZeroPageCount","forcePage"],"mappings":"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","file":"static/js/28.2d6b27f1.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\n\n// Hook\nexport const useDebounce = (value, delay) => {\n    // State and setters for debounced value\n    const [debouncedValue, setDebouncedValue] = useState(value);\n    useEffect(\n      () => {\n        // Update debounced value after delay\n        const handler = setTimeout(() => {\n          setDebouncedValue(value);\n        }, delay);\n        // Cancel the timeout if value changes (also on delay change or unmount)\n        // This is how we prevent debounced value from updating if value is changed ...\n        // .. within the delay period. Timeout gets cleared and restarted.\n        return () => {\n          clearTimeout(handler);\n        };\n      },\n      [value, delay] // Only re-call effect if value or delay changes\n    );\n    return debouncedValue;\n  }","import { useState } from 'react'\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nexport const useUrl = (param) => {\n\n    const history = useHistory()\n    const { search, pathname } = useLocation()\n    const url = new URLSearchParams(search)\n\n    const urlParam = url.get(param)\n    const [value, setValue] = useState(urlParam !== null ? urlParam : '')\n\n    function _setValue(val){\n        url.set(param, val)\n        history.replace({ pathname, search: url.toString() }); \n        setValue(val)\n    }\n\n    return [value, _setValue]\n}","import React, { useEffect, useState } from \"react\";\nimport { useCookies } from \"react-cookie\";\nimport ReactPaginate from \"react-paginate\";\nimport { deleteProductById, getProductsList, userLogout, UpdateProducts } from \"../../../utils/APIs\";\nimport Swal from \"sweetalert2\";\nimport { useDebounce } from \"../../../utils/Functions/useDebounce\";\nimport Spinner from \"../../shared/Spinner\";\nimport { useUrl } from \"../../../utils/Functions/useUrl\";\nimport { toast } from \"react-toastify\";\nimport { useHistory } from \"react-router-dom\";\n\n\nconst ProductList = () => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const debouncedSearchTerm = useDebounce(searchTerm, 500);\n\n  const [selectedProductType, setselectedProductType] = useState(\"\");\n  const [selectedProductCategory, setselectedProductCategory] = useState(\"\");\n  const [isChecked, setIsChecked] = useState(\"\");\n\n  // We start with an empty list of items.\n  const [pageCount, setPageCount] = useState(0);\n  // Here we use item offsets; we could also use page offsets\n  // following the API or data you're working with.\n  const [itemOffset, setItemOffset] = useUrl(\"page\");\n  const [itemsPerPage] = useState(10);\n  const [cookies, setCookie] = useCookies([\"user\"]);\n  const [itemlist, setitemlist] = useState([]);\n  const [isLoading, setIsLoading] = useState(true)\n  const history = useHistory()\n\n  useEffect(() => {\n    list();\n  }, [itemOffset, itemsPerPage, selectedProductType, selectedProductCategory, debouncedSearchTerm]);\n\n  // Invoke when user click to request another page. \n  const handlePageClick = (event) => {\n    setItemOffset(event.selected);\n  };\n  const statusChanged = (id, e) => {\n    console.log(e.target.value, id);\n    UpdateProducts({\n      \"productId\": id,\n      \"status\": e.target.value\n    })\n    toast.success('Status updated successfully', {\n      autoClose: true\n    })\n  }\n\n  const deleteProduct = (uid) => {\n    Swal.fire({\n      title: \"Are you sure?\",\n      text: \"You will not be able to recover this imaginary file!\",\n      icon: \"warning\",\n      showCancelButton: true,\n      cancelButtonColor: \"#DD6B55\",\n      confirmButtonColor: \"#DD6B55\",\n      confirmButtonText: \"Yes, delete it!\",\n      cancelButtonText: \"No, keep it\",\n    }).then((result) => {\n      if (result.value) {\n        if (isChecked == '') {\n          return (\n            deleteProductById(uid).finally(() => list()),\n            Swal.fire(\n              \"Deleted!\",\n              \"Your imaginary file has been deleted.\",\n              \"success\"\n            )\n          );\n        } else {\n          const itemList = Object.keys(isChecked).map((id) => {\n            if (isChecked[id] === true) {\n              deleteProductById(id)\n            }\n            Swal.fire(\n              \"Deleted!\",\n              \"Your imaginary file has been deleted.\",\n              \"success\"\n            )\n          })\n          Promise.all(itemList).then(() => {\n            list();\n          });\n        }\n      }else if (result.dismiss === Swal.DismissReason.cancel) {\n        Swal.fire(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\n      }\n    });\n  };\n\n  const onClickDownload = (imageURL) => {\n    window.open(imageURL, '_blank');\n  }\n\n  const list = async () => {\n    setIsLoading(true)\n    try {\n      const items = await (\n        await getProductsList(\n          itemsPerPage,\n          +itemOffset + 1,\n          searchTerm,\n        )\n      ).data;\n      setitemlist(items?.results);\n      setPageCount(items?.totalPages);\n      setIsLoading(false)\n    } catch (error) {\n      if (error?.response?.data?.message) {\n        toast.error(error.response.data.message);\n      } else {\n        toast.error(process.env.REACT_APP_ERROR_MESSAGE);\n      }\n\n      if (error?.response?.data?.code === 401) {\n        const formData = JSON.stringify({\n          refreshToken: localStorage.getItem(\"refreshToken\"),\n        });\n        setCookie(\"user\", null, { path: \"/\" });\n        userLogout(formData).finally(() => {\n          history.push(\"/user-pages/login-1\");\n        });\n      }\n    }\n  }\n\n  const formateStatus = (status) => {\n    switch (status) {\n      case '0':\n        return \"Inactive\";\n      case '1':\n        return \"Active\";\n      default:\n        return 'Active';\n    }\n  }\n\n  const handleMultiChange = (e) => {\n    setIsChecked({ ...isChecked, [e.target.id]: e.target.checked });\n  }\n\n  return (\n    <div>\n      <div className=\"page-header\">\n        <h3 className=\"page-title\">Products / Show Products </h3>\n        <nav aria-label=\"breadcrumb\">\n          <ol className=\"breadcrumb\">\n            <li className=\"breadcrumb-item\">\n              <a href=\"!#\" onClick={(event) => event.preventDefault()}>\n                {cookies?.user?.role} Dashboard\n              </a>\n            </li>\n            <li className=\"breadcrumb-item active\" aria-current=\"page\">\n              Show Products\n            </li>\n          </ol>\n        </nav>\n      </div>\n      <div className=\"col-lg-12 grid-margin stretch-card p0\">\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <div className=\"row\">\n              <div className=\"col-md-6\">\n              </div>\n\n              <div className=\"col-md-6\">\n                <div className=\"search-field d-none d-md-block\">\n                  <form className=\"d-flex align-items-center h-100\" action=\"#\">\n                    <div className=\"input-group\">\n                      <div className=\"input-group-prepend outline-gray bg-transparent\">\n                        <i className=\"input-group-text border-0 mdi mdi-magnify\"></i>\n                      </div>\n                      <input\n                        type=\"text\"\n                        className=\"form-control outline-gray bg-transparent border-0\"\n                        placeholder=\"Search Products\"\n                        value={searchTerm}\n                        onChange={(e) => {\n                          setSearchTerm(e?.target?.value);\n                          setItemOffset(0);\n                        }}\n                      />\n                    </div>\n                  </form>\n                </div>\n              </div>\n\n            </div>\n            <h4 className=\"card-title\">Product list</h4>\n\n            <div className=\"table-responsive\">\n              <table className=\"table table-striped\">\n                <thead>\n                  <tr>\n                    <th></th>\n                    <th> Name </th>\n                    <th> Category </th>\n                    <th> Description </th>\n                    <th > Status </th>\n                    <th> Delete </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {\n                    isLoading ? <React.Fragment><Spinner /></React.Fragment>\n                      :\n                      itemlist?.map((item, index) => {\n                        return (\n                          <tr key={index}>\n                            <td>\n                              <input type=\"checkbox\" id={item?.id} value={item?.id} onChange={handleMultiChange} />\n                            </td>\n                            <td>{item?.name}</td>\n                            <td>{item?.category}</td>\n                            <td>{item?.description}</td>\n                            <td>{formateStatus(item?.status)}</td>\n                            <td>\n                              <select\n                                id={item.id}\n                                onChange={(e) => statusChanged(item.id, e)}\n                              >\n                                <option\n                                  value=\"0\"\n                                  selected={item.status == 0 ? \"selected\" : false}\n                                >\n                                  InActive\n                                </option>\n                                <option\n                                  value=\"1\"\n                                  selected={item.status == 1 ? \"selected\" : false}\n                                >\n                                  Active\n                                </option>\n                              </select>\n                            </td>\n                            <td>\n                              <i\n                                onClick={() => deleteProduct(item?.id)}\n                                className=\"mdi mdi-delete\"\n                              ></i>\n                            </td>\n                            <td>\n                              <button\n                                type=\"button\"\n                                className=\"btn btn-gradient-primary btn-sm \"\n                                onClick={() => onClickDownload(item?.image)}\n                              >\n                                Download Product Image\n                              </button>\n                            </td>\n                          </tr>\n                        );\n                      })}\n                </tbody>\n              </table>\n              <ReactPaginate\n                breakLabel=\"...\"\n                nextLabel=\"next >\"\n                className=\"client-list\"\n                onPageChange={handlePageClick}\n                pageRangeDisplayed={5}\n                pageCount={pageCount}\n                previousLabel=\"< previous\"\n                renderOnZeroPageCount={null}\n                forcePage={itemOffset}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProductList;\n"],"sourceRoot":""}