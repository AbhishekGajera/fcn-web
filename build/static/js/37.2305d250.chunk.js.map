{"version":3,"sources":["utils/Functions/useUrl.js","utils/Functions/useDebounce.js","app/Admin-components/Transaction/index.js"],"names":["useUrl","param","history","useHistory","useLocation","search","pathname","url","URLSearchParams","urlParam","get","useState","value","setValue","val","set","replace","toString","useDebounce","delay","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","Transaction","useCookies","cookies","setCookie","React","show","setShow","valueToEdit","setvalueToEdit","itemlist","setitemlist","searchTerm","setSearchTerm","debouncedSearchTerm","pageCount","setPageCount","itemOffset","setItemOffset","itemsPerPage","isLoading","setIsLoading","list","getTransaction","data","items","results","totalPages","response","message","toast","error","process","code","formData","JSON","stringify","refreshToken","localStorage","getItem","path","userLogout","finally","push","useForm","mode","register","handleSubmit","reset","formState","errors","onSubmit","isDirty","isValid","trasaction_id","id","updatedData","updateTransaction","success","autoClose","onHide","backdrop","keyboard","Header","closeButton","Title","Body","className","Group","name","required","selected","status","type","aria-label","href","onClick","event","preventDefault","user","role","aria-current","action","placeholder","onChange","e","target","map","item","from_user","to_user","total","formateStatus","uid","Swal","fire","title","text","icon","showCancelButton","cancelButtonColor","confirmButtonColor","confirmButtonText","cancelButtonText","then","result","deleteTransaction","dismiss","DismissReason","cancel","breakLabel","nextLabel","onPageChange","window","scrollTo","pageRangeDisplayed","previousLabel","renderOnZeroPageCount","forcePage"],"mappings":";2LAGaA,EAAS,SAACC,GAEnB,IAAMC,EAAUC,cAChB,EAA6BC,cAArBC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,SACVC,EAAM,IAAIC,gBAAgBH,GAE1BI,EAAWF,EAAIG,IAAIT,GACzB,EAA0BU,mBAAsB,OAAbF,EAAoBA,EAAW,IAAlE,mBAAOG,EAAP,KAAcC,EAAd,KAQA,MAAO,CAACD,EANR,SAAmBE,GACfP,EAAIQ,IAAId,EAAOa,GACfZ,EAAQc,QAAQ,CAAEV,WAAUD,OAAQE,EAAIU,aACxCJ,EAASC,O,sFCZJI,EAAc,SAACN,EAAOO,GAE/B,MAA4CR,mBAASC,GAArD,mBAAOQ,EAAP,KAAuBC,EAAvB,KAgBA,OAfAC,qBACE,WAEE,IAAMC,EAAUC,YAAW,WACzBH,EAAkBT,KACjBO,GAIH,OAAO,WACLM,aAAaF,MAGjB,CAACX,EAAOO,IAEHC,I,8+MCySIM,UA1SK,WAAO,IAAD,EAChBxB,EAAUC,cAChB,EAA6BwB,YAAW,CAAC,SAAzC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAwBC,IAAMnB,UAAS,GAAvC,mBAAOoB,EAAP,KAAaC,EAAb,KACA,EAAsCrB,mBAAS,IAA/C,mBAAOsB,EAAP,KAAoBC,EAApB,KACA,EAAgCvB,mBAAS,IAAzC,mBAAOwB,EAAP,KAAiBC,EAAjB,KACA,EAAoCzB,mBAAS,IAA7C,mBAAO0B,EAAP,KAAmBC,EAAnB,KACMC,EAAsBrB,YAAYmB,EAAY,KAKpD,EAAkC1B,mBAAS,GAA3C,mBAAO6B,EAAP,KAAkBC,EAAlB,KACA,EAAoCzC,YAAO,QAA3C,mBAAO0C,EAAP,KAAmBC,EAAnB,KACA,EAAuBhC,mBAAS,IAAzBiC,EAAP,oBACA,EAAkCjC,oBAAS,GAA3C,mBAAOkC,EAAP,KAAkBC,EAAlB,KAGAxB,qBAAU,WACNyB,OACD,CAACL,EAAYE,IAEhBtB,qBAAU,WACNyB,OACD,CAACR,IAEJ,IAAMQ,GAAI,uCAAG,qGACTD,GAAa,GADJ,kBAIKE,cAJL,8BAKHC,KALG,OAGCC,EAHD,OAMLd,EAAW,OAACc,QAAD,IAACA,OAAD,EAACA,EAAOC,SACnBV,EAAY,OAACS,QAAD,IAACA,OAAD,EAACA,EAAOE,YAPf,mDASL,sCAAI,KAAOC,gBAAX,iBAAI,EAAiBJ,YAArB,aAAI,EAAuBK,SACvBC,IAAMC,MAAM,KAAMH,SAASJ,KAAKK,SAEhCC,IAAMC,MAAMC,wFAEoB,OAAhC,2CAAOJ,gBAAP,mBAAiBJ,YAAjB,eAAuBS,QACjBC,EAAWC,KAAKC,UAAU,CAC5BC,aAAcC,aAAaC,QAAQ,kBAEvCnC,EAAU,OAAQ,KAAM,CAAEoC,KAAM,MAChCC,aAAWP,GAAUQ,SAAQ,WACzBjE,EAAQkE,KAAK,2BApBhB,QAwBTtB,GAAa,GAxBJ,0DAAH,qDA8CV,GAAmFuB,YAAQ,CACvFC,KAAM,aADFC,GAAR,GAAQA,SAAUC,GAAlB,GAAkBA,aAAcC,GAAhC,GAAgCA,MAAhC,MAAuCC,UAAaC,GAApD,GAAoDA,OA8B9CC,IA9BN,GAA4DC,QAA5D,GAAqEC,QA8BvD,uCAAG,WAAO7B,GAAP,uFAETA,EAAK8B,cAAL,OAAqB9C,QAArB,IAAqBA,OAArB,EAAqBA,EAAa+C,GAC5BC,EAAcrB,KAAKC,UAAUZ,GAH1B,SAIHiC,aAAkBD,GAJf,OAKT1B,IAAM4B,QAAQ,mCAAoC,CAC9CC,UAAW,MAEfrC,KARS,gDAWL,MACA,KAAMM,UACN,KAAMA,SAASJ,MACf,KAAMI,SAASJ,KAAKK,QAEpBC,IAAMC,MAAM,KAAMH,SAASJ,KAAKK,SAEhCC,IAAMC,MAAMC,wFAlBP,yBAqBTzB,GAAQ,GArBC,4EAAH,uDAsCd,OACI,6BACI,kBAAC,IAAD,CACID,KAAMA,EACNsD,OApFQ,WAChBrD,GAAQ,GACRE,EAAe,IACfuC,MAkFQa,SAAS,SACTC,UAAU,GAEV,kBAAC,IAAMC,OAAP,CAAcC,aAAW,GACrB,kBAAC,IAAMC,MAAP,4BAEJ,kBAAC,IAAMC,KAAP,KACI,yBAAKC,UAAU,YACX,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,aACX,0BAAMA,UAAU,cAAchB,SAAUJ,GAAaI,KACjD,uBAAGgB,UAAU,oBAAb,wBACA,yBAAKA,UAAU,OACX,yBAAKA,UAAU,aACX,kBAAC,IAAKC,MAAN,CAAYD,UAAU,OAClB,2BAAOA,UAAU,2BAAjB,UACA,yBAAKA,UAAU,YACX,0CACIA,UAAU,+BACVZ,GAAG,4BACHc,KAAK,UACDvB,GAAS,SAAU,CACnBwB,UAAU,KAEd,4BAAQnF,MAAM,IAAd,qBACA,4BAAQA,MAAM,IAAIoF,SAAiC,IAAvB/D,EAAYgE,QAAxC,WACA,4BAAQrF,MAAM,IAAIoF,SAAiC,IAAvB/D,EAAYgE,QAAxC,YACA,4BAAQrF,MAAM,IAAIoF,SAAiC,IAAvB/D,EAAYgE,QAAxC,aAEHtB,IAAUA,GAAOsB,QACd,2DAMpB,yBAAKL,UAAU,QACX,4BACIA,UAAU,2DACVM,KAAK,UAFT,kBAchC,yBAAKN,UAAU,eACX,wBAAIA,UAAU,cAAd,mCACA,yBAAKO,aAAW,cACZ,wBAAIP,UAAU,cACV,wBAAIA,UAAU,mBACV,uBAAGQ,KAAK,KAAKC,QAAS,SAACC,GAAD,OAAWA,EAAMC,mBAAvC,OACK3E,QADL,IACKA,GADL,UACKA,EAAS4E,YADd,aACK,EAAeC,KADpB,eAIJ,wBAAIb,UAAU,yBAAyBc,eAAa,QAApD,uBAMZ,yBAAKd,UAAU,yCACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,aACf,yBAAKA,UAAU,YACX,yBAAKA,UAAU,kCACX,0BAAMA,UAAU,kCAAkCe,OAAO,KACrD,yBAAKf,UAAU,eACX,yBAAKA,UAAU,mDACX,uBAAGA,UAAU,+CAEjB,2BACIM,KAAK,OACLN,UAAU,oDACVgB,YAAY,qBACZhG,MAAOyB,EACPwE,SAAU,SAACC,GAAO,IAAD,EACbxE,EAAa,OAACwE,QAAD,IAACA,GAAD,UAACA,EAAGC,cAAJ,aAAC,EAAWnG,OACzB+B,EAAc,WAQ1C,wBAAIiD,UAAU,cAAd,oBAEA,yBAAKA,UAAU,oBACX,2BAAOA,UAAU,uBACb,+BACI,4BACI,sCACA,oCACA,wCACA,sCACA,wCACA,sCACA,0CAGR,+BACK/C,EAAY,kBAAC,IAAD,MAAH,OAENV,QAFM,IAENA,OAFM,EAENA,EAAU6E,KAAI,SAACC,GAAU,IAAD,IACpB,OACI,4BACI,mCAAKA,QAAL,IAAKA,GAAL,UAAKA,EAAMC,iBAAX,aAAK,EAAiBpB,MACtB,mCAAKmB,QAAL,IAAKA,GAAL,UAAKA,EAAME,eAAX,aAAK,EAAerB,MACpB,mCAAKmB,QAAL,IAAKA,OAAL,EAAKA,EAAMG,OACX,mCAAKH,QAAL,IAAKA,OAAL,EAAKA,EAAMf,MACX,4BAzI1B,SAACD,GACnB,QAASA,GACL,KAAM,EACF,MAAO,UACX,KAAM,EACF,MAAO,WACX,KAAM,EACF,MAAO,WACX,QACI,MAAO,WAgIkCoB,CAAa,OAACJ,QAAD,IAACA,OAAD,EAACA,EAAMhB,SACzB,4BAAI,uBAAGI,QAAS,kBAvM5CzF,EAuM6DqG,EAtM7ExC,KACAvC,EAAetB,QACfoB,GAAQ,GAHO,IAACpB,GAuMoEgF,UAAU,yBAClD,4BACI,uBACIS,QAAS,kBAhM7CiB,EAgM6D,OAACL,QAAD,IAACA,OAAD,EAACA,EAAMjC,QA/LpFuC,IAAKC,KAAK,CACNC,MAAO,gBACPC,KAAM,uDACNC,KAAM,UACNC,kBAAkB,EAClBC,kBAAmB,UACnBC,mBAAoB,UACpBC,kBAAmB,kBACnBC,iBAAkB,gBACnBC,MAAK,SAACC,GACL,GAAIA,EAAOtH,MACP,OACIuH,YAAkBb,GAAKnD,SAAQ,kBAAMpB,QACrCwE,IAAKC,KACD,WACA,wCACA,WAGDU,EAAOE,UAAYb,IAAKc,cAAcC,QAC7Cf,IAAKC,KAAK,YAAa,iCAAkC,YArBlD,IAACF,GAiMoC1B,UAAU,kBAET,YAQjC,kBAAC,IAAD,CACI2C,WAAW,MACXC,UAAU,SACV5C,UAAU,cACV6C,aApOJ,SAACnC,GACrBoC,OAAOC,SAAS,EAAG,GACnBhG,EAAc2D,EAAMN,WAmOI4C,mBAAoB,EACpBpG,UAAWA,EACXqG,cAAc,aACdC,sBAAuB,KACvBC,UAAWrG","file":"static/js/37.2305d250.chunk.js","sourcesContent":["import { useState } from 'react'\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nexport const useUrl = (param) => {\n\n    const history = useHistory()\n    const { search, pathname } = useLocation()\n    const url = new URLSearchParams(search)\n\n    const urlParam = url.get(param)\n    const [value, setValue] = useState(urlParam !== null ? urlParam : '')\n\n    function _setValue(val){\n        url.set(param, val)\n        history.replace({ pathname, search: url.toString() }); \n        setValue(val)\n    }\n\n    return [value, _setValue]\n}","import { useEffect, useState } from \"react\";\n\n// Hook\nexport const useDebounce = (value, delay) => {\n    // State and setters for debounced value\n    const [debouncedValue, setDebouncedValue] = useState(value);\n    useEffect(\n      () => {\n        // Update debounced value after delay\n        const handler = setTimeout(() => {\n          setDebouncedValue(value);\n        }, delay);\n        // Cancel the timeout if value changes (also on delay change or unmount)\n        // This is how we prevent debounced value from updating if value is changed ...\n        // .. within the delay period. Timeout gets cleared and restarted.\n        return () => {\n          clearTimeout(handler);\n        };\n      },\n      [value, delay] // Only re-call effect if value or delay changes\n    );\n    return debouncedValue;\n  }","import React, { useEffect, useState } from \"react\";\nimport { useCookies } from \"react-cookie\";\nimport ReactPaginate from \"react-paginate\";\nimport {\n    getTransaction,\n    userLogout,\n    updateTransaction,\n    deleteTransaction,\n} from \"../../../utils/APIs\";\n\nimport { toast } from \"react-toastify\";\nimport { useHistory } from \"react-router-dom\";\nimport Swal from \"sweetalert2\";\nimport { useUrl } from \"../../../utils/Functions/useUrl\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { useForm } from \"react-hook-form\";\nimport { Form } from 'react-bootstrap';\nimport { useDebounce } from \"../../../utils/Functions/useDebounce\";\nimport Spinner from \"../../shared/Spinner\";\n\nconst Transaction = () => {\n    const history = useHistory();\n    const [cookies, setCookie] = useCookies([\"user\"]);\n    const [show, setShow] = React.useState(false);\n    const [valueToEdit, setvalueToEdit] = useState({});\n    const [itemlist, setitemlist] = useState([]);\n    const [searchTerm, setSearchTerm] = useState(\"\");\n    const debouncedSearchTerm = useDebounce(searchTerm, 500);\n\n\n\n    // We start with an empty list of items.\n    const [pageCount, setPageCount] = useState(0);\n    const [itemOffset, setItemOffset] = useUrl(\"page\");\n    const [itemsPerPage] = useState(10);\n    const [isLoading, setIsLoading] = useState(true)\n\n\n    useEffect(() => {\n        list();\n    }, [itemOffset, itemsPerPage]);\n\n    useEffect(() => {\n        list();\n    }, [debouncedSearchTerm]);\n\n    const list = async () => {\n        setIsLoading(true)\n        try {\n            const items = await (\n                await getTransaction()\n            ).data;\n            setitemlist(items?.results);\n            setPageCount(items?.totalPages);\n        } catch (error) {\n            if (error?.response?.data?.message) {\n                toast.error(error.response.data.message);\n            } else {\n                toast.error(process.env.REACT_APP_ERROR_MESSAGE);\n            }\n            if (error?.response?.data?.code === 401) {\n                const formData = JSON.stringify({\n                    refreshToken: localStorage.getItem(\"refreshToken\"),\n                });\n                setCookie(\"user\", null, { path: \"/\" });\n                userLogout(formData).finally(() => {\n                    history.push(\"/user-pages/login-1\");\n                });\n            }\n        }\n        setIsLoading(false)\n    };\n\n\n    // Invoke when user click to request another page.\n    const handlePageClick = (event) => {\n        window.scrollTo(0, 0);\n        setItemOffset(event.selected);\n    };\n\n    const handleClose = () => {\n        setShow(false)\n        setvalueToEdit({})\n        reset()\n    };\n\n    const handleShow = (value) => {\n        reset()\n        setvalueToEdit(value)\n        setShow(true);\n    }\n\n    const { register, handleSubmit, reset, formState: { errors, isDirty, isValid } } = useForm({\n        mode: \"onChange\"\n    });\n\n    const deleteData = (uid) => {\n        Swal.fire({\n            title: \"Are you sure?\",\n            text: \"You will not be able to recover this imaginary file!\",\n            icon: \"warning\",\n            showCancelButton: true,\n            cancelButtonColor: \"#DD6B55\",\n            confirmButtonColor: \"#DD6B55\",\n            confirmButtonText: \"Yes, delete it!\",\n            cancelButtonText: \"No, keep it\",\n        }).then((result) => {\n            if (result.value) {\n                return (\n                    deleteTransaction(uid).finally(() => list()),\n                    Swal.fire(\n                        \"Deleted!\",\n                        \"Your imaginary file has been deleted.\",\n                        \"success\"\n                    )\n                );\n            } else if (result.dismiss === Swal.DismissReason.cancel) {\n                Swal.fire(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\n            }\n        });\n    };\n\n    const onSubmit = async (data) => {\n        try {\n            data.trasaction_id = valueToEdit?.id;\n            const updatedData = JSON.stringify(data)\n            await updateTransaction(updatedData)\n            toast.success('Transaction updated Successfully', {\n                autoClose: 3000\n            })\n            list()\n        } catch (error) {\n            if (\n                error &&\n                error.response &&\n                error.response.data &&\n                error.response.data.message\n            ) {\n                toast.error(error.response.data.message);\n            } else {\n                toast.error(process.env.REACT_APP_ERROR_MESSAGE);\n            }\n        } finally {\n            setShow(false)\n        }\n    };\n\n    const formateStatus = (status) => {\n        switch (+status) {\n            case (0):\n                return 'Pending';\n            case (1):\n                return 'approved';\n            case (2):\n                return 'Declined'            \n            default:\n                return 'Pending';\n        }\n    }\n\n    return (\n        <div>\n            <Modal\n                show={show}\n                onHide={handleClose}\n                backdrop=\"static\"\n                keyboard={false}\n            >\n                <Modal.Header closeButton>\n                    <Modal.Title>Update Transaction</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className=\"row auth\">\n                        <div className=\"col-12 grid-margin\">\n                            <div className=\"card\">\n                                <div className=\"card-body\">\n                                    <form className=\"form-sample\" onSubmit={handleSubmit(onSubmit)}>\n                                        <p className=\"card-description\"> Update Transaction </p>\n                                        <div className=\"row\" >\n                                            <div className=\"col-md-12\">\n                                                <Form.Group className=\"row\">\n                                                    <label className=\"col-sm-3 col-form-label\">Status</label>\n                                                    <div className=\"col-sm-9\">\n                                                        <select\n                                                            className=\"form-control form-control-lg\"\n                                                            id=\"exampleFormControlSelect2\"\n                                                            name=\"status\"\n                                                            {...register(\"status\", {\n                                                                required: true,\n                                                            })}>\n                                                            <option value=''>--Select Status--</option>\n                                                            <option value='0' selected={valueToEdit.status === 0}>Pending</option>\n                                                            <option value='1' selected={valueToEdit.status === 1}>approved</option>\n                                                            <option value='2' selected={valueToEdit.status === 2}>Declined</option>\n                                                        </select>\n                                                        {errors && errors.status && (\n                                                            <p>status is required field</p>\n                                                        )}\n                                                    </div>\n                                                </Form.Group>\n                                            </div>\n                                        </div>\n                                        <div className=\"mt-3\">\n                                            <button\n                                                className=\"btn  btn-primary btn-lg font-weight-medium auth-form-btn\"\n                                                type=\"submit\"\n                                            >\n                                                UPDATE\n                                            </button>\n                                        </div>\n                                    </form>\n                                </div>\n                            </div>\n                        </div>\n                    </div >\n                </Modal.Body>\n            </Modal>\n            <div className=\"page-header\">\n                <h3 className=\"page-title\">Transaction / Show Transaction </h3>\n                <nav aria-label=\"breadcrumb\">\n                    <ol className=\"breadcrumb\">\n                        <li className=\"breadcrumb-item\">\n                            <a href=\"!#\" onClick={(event) => event.preventDefault()}>\n                                {cookies?.user?.role} Dashboard\n                            </a>\n                        </li>\n                        <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                            Show Transaction\n                        </li>\n                    </ol>\n                </nav>\n            </div>\n            <div className=\"col-lg-12 grid-margin stretch-card p0\">\n                <div className=\"card\">\n                    <div className=\"card-body\">\n                        <div className=\"row\">\n                            <div className=\"col-md-6\"></div>\n                            <div className=\"col-md-6\">\n                                <div className=\"search-field d-none d-md-block\">\n                                    <form className=\"d-flex align-items-center h-100\" action=\"#\">\n                                        <div className=\"input-group\">\n                                            <div className=\"input-group-prepend outline-gray bg-transparent\">\n                                                <i className=\"input-group-text border-0 mdi mdi-magnify\"></i>\n                                            </div>\n                                            <input\n                                                type=\"text\"\n                                                className=\"form-control outline-gray bg-transparent border-0\"\n                                                placeholder=\"Search Transaction\"\n                                                value={searchTerm}\n                                                onChange={(e) => {\n                                                    setSearchTerm(e?.target?.value);\n                                                    setItemOffset(0);\n                                                }}\n                                            />\n                                        </div>\n                                    </form>\n                                </div>\n                            </div>\n                        </div>\n                        <h4 className=\"card-title\">Transaction list</h4>\n\n                        <div className=\"table-responsive\">\n                            <table className=\"table table-striped\">\n                                <thead>\n                                    <tr>\n                                        <th> From </th>\n                                        <th> TO </th>\n                                        <th> Amount </th>\n                                        <th> Type </th>\n                                        <th> Status </th>\n                                        <th> Edit </th>\n                                        <th> Delete </th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {isLoading ? <Spinner />\n                                        :\n                                        itemlist?.map((item) => {\n                                            return (\n                                                <tr>\n                                                    <td>{item?.from_user?.name}</td>\n                                                    <td>{item?.to_user?.name}</td>\n                                                    <td>{item?.total}</td>\n                                                    <td>{item?.type}</td>\n                                                    <td>{formateStatus(item?.status)}</td>\n                                                    <td><i onClick={() => handleShow(item)} className=\"mdi mdi-lead-pencil\"></i></td>\n                                                    <td>\n                                                        <i\n                                                            onClick={() => deleteData(item?.id)}\n                                                            className=\"mdi mdi-delete\"\n                                                        >\n                                                            {\" \"}\n                                                        </i>\n                                                    </td>\n                                                </tr>\n                                            );\n                                        })}\n                                </tbody>\n                            </table>\n                            <ReactPaginate\n                                breakLabel=\"...\"\n                                nextLabel=\"next >\"\n                                className=\"client-list\"\n                                onPageChange={handlePageClick}\n                                pageRangeDisplayed={5}\n                                pageCount={pageCount}\n                                previousLabel=\"< previous\"\n                                renderOnZeroPageCount={null}\n                                forcePage={itemOffset}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Transaction;\n"],"sourceRoot":""}