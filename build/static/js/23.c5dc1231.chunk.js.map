{"version":3,"sources":["utils/Functions/useDebounce.js","utils/Functions/commonOptions.js","utils/Functions/passwordGenerator.js","app/Admin-components/BranchesList/index.js"],"names":["useDebounce","value","delay","useState","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","statusOption","label","roleOption","roleOptionForAmin","timeOption","Date","setDate","getDate","optionForExpenceType","optionForCostCategory","formateStatus","status","formateStatusForTargets","password_generator","len","length","string","password","character","entity1","Math","ceil","random","entity2","hold","charAt","toUpperCase","split","sort","join","substr","BranchList","searchTerm","setSearchTerm","selectedIBO","setselectedIBO","pageCount","setPageCount","itemOffset","setItemOffset","itemsPerPage","React","show","setShow","valueToEdit","setvalueToEdit","updateStatus","setupdateStatus","roleUpdate","setroleUpdate","debouncedSearchTerm","useCookies","cookies","setCookie","itemlist","setitemlist","IBOList","setIBOList","history","useHistory","isLoading","setIsLoading","useForm","mode","register","handleSubmit","reset","formState","errors","strongRegexMo","isDirty","isValid","RegExp","getIBOList","getIBOs","data","items","results","generatePassword","id","randomPassword","newPassword","JSON","stringify","updateProfile","toast","success","autoClose","error","onSubmit","role","updatedData","list","response","message","process","code","formData","refreshToken","localStorage","getItem","path","userLogout","finally","push","getBranches","console","log","totalPages","onHide","backdrop","keyboard","Header","closeButton","Title","Body","className","Group","Control","type","name","defaultValue","required","address","contactno","pattern","email","onChange","e","target","map","i","selected","aria-label","href","onClick","event","preventDefault","user","aria-current","action","placeholder","item","ibo","uid","Swal","fire","title","text","icon","showCancelButton","cancelButtonColor","confirmButtonColor","confirmButtonText","cancelButtonText","then","result","deleteUsr","dismiss","DismissReason","cancel","breakLabel","nextLabel","onPageChange","window","scrollTo","pageRangeDisplayed","previousLabel","renderOnZeroPageCount","forcePage"],"mappings":"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","file":"static/js/23.c5dc1231.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\n\n// Hook\nexport const useDebounce = (value, delay) => {\n    // State and setters for debounced value\n    const [debouncedValue, setDebouncedValue] = useState(value);\n    useEffect(\n      () => {\n        // Update debounced value after delay\n        const handler = setTimeout(() => {\n          setDebouncedValue(value);\n        }, delay);\n        // Cancel the timeout if value changes (also on delay change or unmount)\n        // This is how we prevent debounced value from updating if value is changed ...\n        // .. within the delay period. Timeout gets cleared and restarted.\n        return () => {\n          clearTimeout(handler);\n        };\n      },\n      [value, delay] // Only re-call effect if value or delay changes\n    );\n    return debouncedValue;\n  }","export const statusOption = [\n    { value : 0, label : 'Active' },\n    { value : 1, label : 'In Active' },\n    { value : 2, label : 'Terminated' }\n]\n\nexport const roleOption = [\n    { value : 'user', label : 'User' },\n    { value : 'admin', label : 'Admin' },\n    { value : 'IBO', label : 'IBO' },\n    { value : 'branch', label : 'Branch' }\n]\n\nexport const roleOptionForAmin = [\n    { value : 'IBO', label : 'IBO' },\n    { value : 'branch', label : 'Branch' }\n]\n\nexport const timeOption = [\n    { value : new Date().setDate(new Date().getDate() - 7), label : '1 week' },\n    { value : new Date().setDate(new Date().getDate() - 30), label : '1 month' },\n    { value : new Date().setDate(new Date().getDate() - 90), label : '3 month' },\n    { value : new Date().setDate(new Date().getDate() - 180), label : '6 month' },\n    { value : new Date().setDate(new Date().getDate() - 365), label : '1 Year' }\n]\n\nexport const optionForExpenceType = [\n    { value : 'Office expence', label : 'Office expence' },\n    { value : 'Employee expence', label : 'Employee expence' },\n    { value : 'Misleniuneous expence', label : 'Misleniuneous expence' },\n    { value : 'Other expence', label : 'Other expence' }\n]\n\nexport const optionForCostCategory = [\n    { value : 'Petrol', label : 'Petrol' },\n    { value : 'Food', label : 'Food' },\n    { value : 'Rent', label : 'Rent' },\n    { value : 'Tea', label : 'Tea' },\n    { value : 'Transport', label : 'Transport' },\n    { value : 'Gift', label : 'Gift' },\n    { value : 'Printing', label : 'Printing' },\n    { value : 'Advertising', label : 'Advertising' },\n    { value : 'Electricity Bill', label : 'Electricity Bill' },\n    { value : 'Cleaning', label : 'Cleaning' },\n    { value : 'Salary', label : 'Salary' },\n    { value : 'Medical Expences', label : 'Medical Expences' },\n    { value : 'Insurance', label : 'Insurance' },\n    { value : 'Legal & Professionals Fees', label : 'Legal & Professionals Fees' },\n    { value : 'Phone Bill', label : 'Phone Bill' },\n    { value : 'Internet Bill', label : 'Internet Bill' },\n    { value : 'Stationaries Bill', label : 'Stationaries Bill' },\n    { value : 'Depreciation', label : 'Depreciation' },\n    { value : 'Row materials', label : 'Row materials' },\n    { value : 'Books and magazine subscriptions', label : 'Books and magazine subscriptions' }\n]\n\nexport const formateStatus = (status) => {\n    switch (+status) {\n        case (0):\n            return 'Active';\n        case (1):\n            return 'In Active';\n        case (2):\n            return 'Terminated'            \n        default:\n            return 'Active';\n    }\n}\n\nexport const formateStatusForTargets = (status) => {\n    switch (+status) {\n        case (1):\n            return 'Running';\n        case (2):\n            return 'Finished';\n        case (3):\n            return 'Cancelled';\n        case (4):\n            return 'Archieved';         \n        default:\n            return 'Cancelled';\n    }\n}","export const password_generator = ( len ) => {\n    let length = (len)?(len):(10);\n    let string = \"abcdefghijklmnopqrstuvwxyz\"; //to upper \n    let numeric = '0123456789';\n    let password = \"\";\n    let character = \"\";\n    let crunch = true;\n    while( password.length<length ) {\n       let entity1 = Math.ceil(string.length * Math.random()*Math.random());\n       let entity2 = Math.ceil(numeric.length * Math.random()*Math.random());\n       let hold = string.charAt( entity1 );\n        hold = (password.length%2==0)?(hold.toUpperCase()):(hold);\n        character += hold;\n        character += numeric.charAt( entity2 );\n        password = character;\n    }\n    password=password.split('').sort(function(){return 0.5-Math.random()}).join('');\n    return password.substr(0,len);\n}\n","import React, { useEffect, useState } from \"react\";\nimport { useCookies } from \"react-cookie\";\nimport ReactPaginate from \"react-paginate\";\nimport {\n  userLogout,\n  deleteUsr,\n  updateProfile,\n  getBranches,\n  getIBOs\n} from \"../../../utils/APIs\";\nimport Swal from \"sweetalert2\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { useForm } from \"react-hook-form\";\nimport { Form } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { useHistory } from 'react-router-dom'\nimport { statusOption, formateStatus, roleOption } from \"../../../utils/Functions/commonOptions\";\nimport { password_generator } from \"../../../utils/Functions/passwordGenerator\";\nimport { useDebounce } from \"../../../utils/Functions/useDebounce\";\nimport Spinner from \"../../shared/Spinner\";\n\n\nconst BranchList = () => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedIBO, setselectedIBO] = useState(\"\");\n\n\n\n  // We start with an empty list of items.\n  const [pageCount, setPageCount] = useState(0);\n  // Here we use item offsets; we could also use page offsets\n  // following the API or data you're working with.\n  const [itemOffset, setItemOffset] = useState(0);\n  const [itemsPerPage] = useState(20);\n  const [show, setShow] = React.useState(false);\n  const [valueToEdit, setvalueToEdit] = useState({});\n  const [updateStatus, setupdateStatus] = useState(0);\n  const [roleUpdate, setroleUpdate] = useState('')\n  const debouncedSearchTerm = useDebounce(searchTerm, 500);\n\n\n  const onChangeRolepdate = (e) => {\n    setroleUpdate(e?.target?.value)\n  }\n  const [cookies, setCookie] = useCookies([\"user\"]);\n  const [itemlist, setitemlist] = useState([]);\n  const [IBOList, setIBOList] = useState([]);\n\n  const history = useHistory()\n  const [isLoading, setIsLoading] = useState(true)\n\n  const { register, handleSubmit, reset, formState: { errors, isDirty, isValid } } = useForm({\n    mode: \"onChange\"\n  });\n  var strongRegexMo = new RegExp(\n    \"^\\\\s*(?:\\\\+?(\\\\d{1,3}))?[-. (]*(\\\\d{3})[-. )]*(\\\\d{3})[-. ]*(\\\\d{4})(?: *x(\\\\d+))?\\\\s*$\"\n  );\n  const getIBOList = async () => {\n    const items = await (await getIBOs(5000, 1, \"\")).data;\n    setIBOList(items?.results);\n    // console.log(\"rs\",items?.results)\n  };\n\n  const onChangeHandlerIBO = (e) => {\n    setItemOffset(0);\n    setselectedIBO(e.target.value);\n  };\n  const handleClose = () => {\n    setShow(false)\n    setvalueToEdit({})\n    setupdateStatus(0)\n    reset()\n\n  };\n\n  const onChangeStatusForm = (e) => {\n    setupdateStatus(+e?.target?.value || 0)\n  }\n\n  const handleShow = (value) => {\n    reset()\n    setvalueToEdit(value)\n    setupdateStatus(value?.status || 0)\n    setroleUpdate(value?.role)\n    setShow(true);\n  }\n  const generatePassword = async (id) => {\n    const randomPassword = password_generator();\n    const newPassword = JSON.stringify({\n      password: randomPassword\n    })\n\n    try {\n      await updateProfile(newPassword, id)\n      toast.success('Password generated and sended to user via Email successfully', { autoClose: 3000 })\n    } catch (error) {\n      toast.error('Password generation failed, please try again later')\n    }\n\n  };\n  const onSubmit = async (data) => {\n    data.status = updateStatus;\n    data.role = roleUpdate;\n    if (data.password === \"\") {\n      delete data.password;\n    }\n    try {\n      const updatedData = JSON.stringify(data)\n      await updateProfile(updatedData, valueToEdit?.id)\n      toast.success('User updated Successfully', {\n        autoClose: 3000\n      })\n      list()\n    } catch (error) {\n      if (error?.response?.data?.message) {\n        toast.error(error.response.data.message);\n      } else {\n        toast.error(process.env.REACT_APP_ERROR_MESSAGE);\n      }\n\n      if (error?.response?.data?.code === 401) {\n        const formData = JSON.stringify({\n          refreshToken: localStorage.getItem(\"refreshToken\"),\n        });\n        setCookie(\"user\", null, { path: \"/\" });\n        userLogout(formData).finally(() => {\n          history.push(\"/user-pages/login-1\");\n        });\n      }\n    } finally {\n      setShow(false)\n    }\n  };\n\n\n\n  useEffect(() => {\n    list()\n  }, [itemOffset, itemsPerPage, selectedIBO]);\n\n  useEffect(() => {\n    list()\n  }, [debouncedSearchTerm]);\n\n  useEffect(() => {\n    getIBOList();\n  }, []);\n\n  // Invoke when user click to request another page.\n  const handlePageClick = (event) => {\n    window.scrollTo(0, 0);\n    setItemOffset(event.selected);\n  };\n\n  const deleteBranch = (uid) => {\n    Swal.fire({\n      title: \"Are you sure?\",\n      text: \"You will not be able to recover this imaginary file!\",\n      icon: \"warning\",\n      showCancelButton: true,\n      cancelButtonColor: \"#DD6B55\",\n      confirmButtonColor: \"#DD6B55\",\n      confirmButtonText: \"Yes, delete it!\",\n      cancelButtonText: \"No, keep it\",\n    }).then((result) => {\n      if (result.value) {\n        return (\n          deleteUsr(uid).finally(() => list()),\n          Swal.fire(\n            \"Deleted!\",\n            \"Your imaginary file has been deleted.\",\n            \"success\",\n          )\n        );\n      } else if (result.dismiss === Swal.DismissReason.cancel) {\n        Swal.fire(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\n      }\n    });\n  }\n\n\n  const list = async () => {\n    setIsLoading(true)\n    const items = await (await getBranches(itemsPerPage, (+itemOffset + 1), searchTerm)).data;\n    setitemlist(items?.results);\n    console.log(\"lst\", items?.results)\n    setPageCount(items?.totalPages);\n    setIsLoading(false)\n  }\n\n  return (\n    <div>\n      <Modal\n        show={show}\n        onHide={handleClose}\n        backdrop=\"static\"\n        keyboard={false}\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>Update Branch</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <div className=\"row auth\">\n            <div className=\"col-12 grid-margin\">\n              <div className=\"card\">\n                <div className=\"card-body\">\n                  <form className=\"form-sample\" onSubmit={handleSubmit(onSubmit)}>\n                    <p className=\"card-description\"> Update Branch </p>\n                    <div className=\"row\">\n                      <div className=\"col-md-12\">\n                        <Form.Group className=\"row\">\n                          <label className=\"col-sm-3 col-form-label\">Name</label>\n                          <div className=\"col-sm-9\">\n                            <Form.Control\n                              type=\"text\"\n                              name=\"name\"\n                              defaultValue={valueToEdit.name}\n                              {...register(\"name\", { required: true })}\n\n                            />\n                            {errors && errors.name && <p>name is required field</p>}\n                          </div>\n                        </Form.Group>\n                        <Form.Group className=\"row\">\n                          <label className=\"col-sm-3 col-form-label\">\n                            Address{\" \"}\n                          </label>\n                          <div className=\"col-sm-8\">\n                            <Form.Control\n                              type=\"text\"\n                              name=\"address\"\n                              defaultValue={valueToEdit.address}\n                              {...register(\"address\", { required: true })}\n                            />\n                            {errors && errors.address && (\n                              <p>address is required field</p>\n                            )}\n                          </div>\n                        </Form.Group>\n                      </div>\n                    </div>\n\n                    <div className=\"row\">\n                      <div className=\"col-md-12\">\n                        <Form.Group className=\"row\">\n                          <label className=\"col-sm-3 col-form-label\">\n                            Contact No\n                          </label>\n                          <div className=\"col-sm-9 contact_no\">\n                            <Form.Control\n                              type=\"text\"\n                              name=\"contactno\"\n                              defaultValue={valueToEdit.contactno}\n                              {...register(\"contactno\", {\n                                required: true,\n                                pattern: strongRegexMo,\n                              })}\n                            />\n                            {errors &&\n                              errors.contactno &&\n                              errors.contactno.type === \"required\" && (\n                                <p>contact number is required field</p>\n                              )}\n                            {errors &&\n                              errors.contactno &&\n                              errors.contactno.type === \"pattern\" && (\n                                <p>invalid phone number please use valid formate</p>\n                              )}\n                          </div>\n                        </Form.Group>\n                      </div>\n                    </div>\n\n                    <div className=\"row\">\n                      <div className=\"col-md-12\">\n                        <Form.Group className=\"row\">\n                          <label className=\"col-sm-3 col-form-label\">Email</label>\n                          <div className=\"col-sm-9\">\n                            <Form.Control\n                              type=\"text\"\n                              name=\"email\"\n                              defaultValue={valueToEdit.email}\n\n                              {...register(\"email\", {\n                                required: true,\n                                pattern: /^\\S+@\\S+$/i,\n                              })}\n                            />\n                            {errors &&\n                              errors.email &&\n                              errors.email.type === \"required\" && (\n                                <p>email is required field</p>\n                              )}\n                            {errors &&\n                              errors.email &&\n                              errors.email.type === \"pattern\" && (\n                                <p>invalid email formate</p>\n                              )}\n                          </div>\n                        </Form.Group>\n                      </div>\n                    </div>\n\n                    <div className=\"row\">\n                      <div className=\"col-md-12\">\n                        <Form.Group className=\"row\">\n                          <label className=\"col-sm-3 col-form-label\">\n                            status\n                          </label>\n                          <div className=\"col-sm-9\">\n                            <select\n                              className=\"form-control form-control-sm\"\n                              id=\"exampleFormControlSelect3\"\n                              name=\"status\"\n                              onChange={onChangeStatusForm}\n                            >\n                              {statusOption?.map((i) => {\n                                return (\n                                  <option\n                                    value={i?.value}\n                                    selected={+updateStatus === +i?.value}\n                                  >\n                                    {i?.label}\n                                  </option>\n                                );\n                              })}\n                            </select>\n                          </div>\n                        </Form.Group>\n                      </div>\n                    </div>\n\n\n                    <div className=\"row\">\n                      <div className=\"col-md-12\">\n                        <Form.Group className=\"row\">\n                          <label className=\"col-sm-3 col-form-label\">\n                            Select Role\n                          </label>\n                          <div className=\"col-sm-9\">\n                            <select\n                              className=\"form-control form-control-sm\"\n                              id=\"exampleFormControlSelect2\"\n                              name=\"branch\"\n                              onChange={onChangeRolepdate}\n                            >\n                              {roleOption?.map((i) => {\n                                return (\n                                  <>\n                                    <option\n                                      selected={i.value === roleUpdate}\n                                      value={i.value}\n                                    >\n                                      {i.label}\n                                    </option>\n                                  </>\n                                );\n                              })}\n                            </select>\n                          </div>\n                        </Form.Group>\n                      </div>\n                    </div>\n\n                    <div className=\"row\">\n                      <div className=\"col-md-12\">\n                        <Form.Group className=\"row\">\n                          <label className=\"col-sm-4 col-form-label\">\n                            Password\n                          </label>\n                          <div className=\"col-sm-8\">\n                            <Form.Control\n                              type=\"password\"\n                              name=\"password\"\n                              {...register(\"password\")}\n                            />\n                          </div>\n                        </Form.Group>\n                      </div>\n                    </div>\n\n                    <div className=\"mt-3\">\n                      <button\n                        className=\"btn  btn-primary btn-lg font-weight-medium auth-form-btn\"\n                        type=\"submit\"\n                      >\n                        UPDATE\n                      </button>\n                    </div>\n                  </form>\n                </div>\n              </div>\n            </div>\n          </div>\n        </Modal.Body>\n\n\n      </Modal>\n      <div className=\"page-header\">\n        <h3 className=\"page-title\">Branches / Show Branch </h3>\n        <nav aria-label=\"breadcrumb\">\n          <ol className=\"breadcrumb\">\n            <li className=\"breadcrumb-item\">\n              <a href=\"!#\" onClick={(event) => event.preventDefault()}>\n                {cookies?.user?.role} Dashboard\n              </a>\n            </li>\n            <li className=\"breadcrumb-item active\" aria-current=\"page\">\n              Show branches\n            </li>\n          </ol>\n        </nav>\n      </div>\n      <div className=\"col-lg-12 grid-margin stretch-card p0\">\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <div className=\"row\">\n              <div className=\"col-md-6\">\n                <Form.Group className=\"row\">\n                  <label className=\"col-sm-5 col-form-label\">Search IBO</label>\n                  <div className=\"col-sm-7\">\n                    <select\n                      className=\"form-control form-control-sm\"\n                      id=\"exampleFormControlSelect2\"\n                      name=\"branch\"\n                      onChange={onChangeHandlerIBO}\n                    >\n                      <option selected={\"\" === selectedIBO} value={\"\"}>\n                        Not Selected\n                      </option>\n                      {IBOList?.map((i) => {\n                        return (\n                          <>\n                            <option\n                              selected={i.name === selectedIBO}\n                              value={i.name}\n                            >\n                              {i.name}\n                            </option>\n                          </>\n                        );\n                      })}\n                    </select>\n                  </div>\n                </Form.Group>\n              </div>\n\n\n              <div className=\"col-md-6\">\n                <div className=\"search-field d-none d-md-block\">\n                  <form className=\"d-flex align-items-center h-100\" action=\"#\">\n                    <div className=\"input-group\">\n                      <div className=\"input-group-prepend outline-gray bg-transparent\">\n                        <i className=\"input-group-text border-0 mdi mdi-magnify\"></i>\n                      </div>\n                      <input\n                        type=\"text\"\n                        className=\"form-control outline-gray bg-transparent border-0\"\n                        placeholder=\"Search Branches\"\n                        value={searchTerm}\n                        onChange={(e) => {\n                          setSearchTerm(e?.target?.value);\n                          setItemOffset(0);\n                        }}\n                      />\n                    </div>\n                  </form>\n                </div>\n              </div>\n            </div>\n            <h4 className=\"card-title\">Branch list</h4>\n\n            <div className=\"table-responsive\">\n              <table className=\"table table-striped\">\n                <thead>\n                  <tr>\n                    <th> Name </th>\n                    <th> Contact no. </th>\n                    <th> Email </th>\n                    <th> IBO </th>\n                    <th> Role </th>\n                    <th> Status </th>\n                    <th> Generate Password </th>\n                    <th> Edit </th>\n                    <th> Delete </th>\n                  </tr>\n                </thead>\n                <tbody>\n\n                  {isLoading ?\n                    <Spinner />\n                    :\n                    itemlist?.map((item) => {\n                      console.log(\"it\", item)\n\n                      return (\n                        <tr>\n                          <td>{item?.name}</td>\n                          <td>{item?.contactno}</td>\n                          <td>{item?.email}</td>\n                          <td>{item?.ibo}</td>\n                          <td>{item?.role}</td>\n                          <td>{formateStatus(item?.status)}</td>\n                          {/* <td>\n                          <label className=\"badge badge-gradient-success\">\n                            Active\n                          </label>\n                          <label className=\"badge badge-gradient-danger\">\n                            Inactive\n                          </label>\n                        </td> */}\n                          <td>\n                            <button\n                              type=\"button\"\n                              className=\"btn btn-gradient-primary btn-sm \"\n                              onClick={() => generatePassword(item?.id)}\n                            >\n                              Generate\n                            </button>\n                          </td>\n                          <td>\n                            <i onClick={() => handleShow(item)} className=\"mdi mdi-lead-pencil\"></i>\n                          </td>\n                          <td>\n                            <i onClick={() => deleteBranch(item?.id)} className=\"mdi mdi-delete\"></i>\n                          </td>\n                        </tr>\n                      );\n                    })}\n                </tbody>\n              </table>\n              <ReactPaginate\n                breakLabel=\"...\"\n                nextLabel=\"next >\"\n                className=\"client-list\"\n                onPageChange={handlePageClick}\n                pageRangeDisplayed={5}\n                pageCount={pageCount}\n                previousLabel=\"< previous\"\n                renderOnZeroPageCount={null}\n                forcePage={itemOffset}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default BranchList;\n"],"sourceRoot":""}