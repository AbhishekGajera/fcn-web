{"version":3,"sources":["utils/Functions/commonOptions.js","utils/Functions/useDebounce.js","utils/Functions/useUrl.js","utils/Functions/passwordGenerator.js","app/IBO-components/ClientList/index.js"],"names":["statusOption","value","label","roleOption","roleOptionForAmin","timeOption","Date","setDate","getDate","optionForExpenceType","optionForCostCategory","formateStatus","status","formateStatusForTargets","useDebounce","delay","useState","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","useUrl","param","history","useHistory","useLocation","search","pathname","url","URLSearchParams","urlParam","get","setValue","val","set","replace","toString","password_generator","len","length","string","password","character","entity1","Math","ceil","random","entity2","entity3","hold","charAt","toUpperCase","split","sort","join","substr","ClientList","useCookies","cookies","setCookie","itemlist","setitemlist","searchTerm","setSearchTerm","debouncedSearchTerm","useForm","mode","register","handleSubmit","formState","errors","strongRegexMo","isDirty","isValid","RegExp","onSubmit","data","updateStatus","branch","branchUpdate","IBO","IBOUpdate","role","roleUpdate","updatedData","JSON","stringify","updateProfile","valueToEdit","id","toast","success","autoClose","list","response","message","error","process","code","formData","refreshToken","localStorage","getItem","path","userLogout","finally","push","setShow","pageCount","setPageCount","itemOffset","setItemOffset","itemsPerPage","React","show","setvalueToEdit","setupdateStatus","branchList","setbranchList","selectedBranch","setselectedBranch","IBOList","setIBOList","selectedIBO","setselectedIBO","setbranchUpdate","setIBOUpdate","setroleUpdate","isLoading","setIsLoading","getBranchList","getIBOList","getBranches","items","results","getIBOs","getUsers","totalPages","generatePassword","randomPassword","newPassword","onHide","backdrop","keyboard","Header","closeButton","Title","Body","className","Group","Control","type","name","defaultValue","required","address","contactno","pattern","email","onChange","e","target","map","i","selected","aadhar_card_no","pan_card_no","aria-label","href","onClick","event","preventDefault","user","aria-current","action","placeholder","item","uid","Swal","fire","title","text","icon","showCancelButton","cancelButtonColor","confirmButtonColor","confirmButtonText","cancelButtonText","then","result","deleteUsr","dismiss","DismissReason","cancel","breakLabel","nextLabel","onPageChange","window","scrollTo","pageRangeDisplayed","previousLabel","renderOnZeroPageCount","forcePage"],"mappings":"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","file":"static/js/13.6b8ff13b.chunk.js","sourcesContent":["export const statusOption = [\n    { value : 0, label : 'Active' },\n    { value : 1, label : 'In Active' },\n    { value : 2, label : 'Terminated' }\n]\n\nexport const roleOption = [\n    { value : 'user', label : 'User' },\n    { value : 'admin', label : 'Admin' },\n    { value : 'IBO', label : 'IBO' },\n    { value : 'branch', label : 'Branch' }\n]\n\nexport const roleOptionForAmin = [\n    { value : 'IBO', label : 'IBO' },\n    { value : 'branch', label : 'Branch' }\n]\n\nexport const timeOption = [\n    { value : new Date().setDate(new Date().getDate() - 7), label : '1 week' },\n    { value : new Date().setDate(new Date().getDate() - 30), label : '1 month' },\n    { value : new Date().setDate(new Date().getDate() - 90), label : '3 month' },\n    { value : new Date().setDate(new Date().getDate() - 180), label : '6 month' },\n    { value : new Date().setDate(new Date().getDate() - 365), label : '1 Year' }\n]\n\nexport const optionForExpenceType = [\n    { value : 'Office expence', label : 'Office expence' },\n    { value : 'Employee expence', label : 'Employee expence' },\n    { value : 'Misleniuneous expence', label : 'Misleniuneous expence' },\n    { value : 'Other expence', label : 'Other expence' }\n]\n\nexport const optionForCostCategory = [\n    { value : 'Petrol', label : 'Petrol' },\n    { value : 'Food', label : 'Food' },\n    { value : 'Rent', label : 'Rent' },\n    { value : 'Tea', label : 'Tea' },\n    { value : 'Transport', label : 'Transport' },\n    { value : 'Gift', label : 'Gift' },\n    { value : 'Printing', label : 'Printing' },\n    { value : 'Advertising', label : 'Advertising' },\n    { value : 'Electricity Bill', label : 'Electricity Bill' },\n    { value : 'Cleaning', label : 'Cleaning' },\n    { value : 'Salary', label : 'Salary' },\n    { value : 'Medical Expences', label : 'Medical Expences' },\n    { value : 'Insurance', label : 'Insurance' },\n    { value : 'Legal & Professionals Fees', label : 'Legal & Professionals Fees' },\n    { value : 'Phone Bill', label : 'Phone Bill' },\n    { value : 'Internet Bill', label : 'Internet Bill' },\n    { value : 'Stationaries Bill', label : 'Stationaries Bill' },\n    { value : 'Depreciation', label : 'Depreciation' },\n    { value : 'Row materials', label : 'Row materials' },\n    { value : 'Books and magazine subscriptions', label : 'Books and magazine subscriptions' }\n]\n\nexport const formateStatus = (status) => {\n    switch (+status) {\n        case (0):\n            return 'Active';\n        case (1):\n            return 'In Active';\n        case (2):\n            return 'Terminated'            \n        default:\n            return 'Active';\n    }\n}\n\nexport const formateStatusForTargets = (status) => {\n    switch (+status) {\n        case (1):\n            return 'Running';\n        case (2):\n            return 'Finished';\n        case (3):\n            return 'Cancelled';\n        case (4):\n            return 'Archieved';         \n        default:\n            return 'Cancelled';\n    }\n}","import { useEffect, useState } from \"react\";\n\n// Hook\nexport const useDebounce = (value, delay) => {\n    // State and setters for debounced value\n    const [debouncedValue, setDebouncedValue] = useState(value);\n    useEffect(\n      () => {\n        // Update debounced value after delay\n        const handler = setTimeout(() => {\n          setDebouncedValue(value);\n        }, delay);\n        // Cancel the timeout if value changes (also on delay change or unmount)\n        // This is how we prevent debounced value from updating if value is changed ...\n        // .. within the delay period. Timeout gets cleared and restarted.\n        return () => {\n          clearTimeout(handler);\n        };\n      },\n      [value, delay] // Only re-call effect if value or delay changes\n    );\n    return debouncedValue;\n  }","import { useState } from 'react'\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nexport const useUrl = (param) => {\n\n    const history = useHistory()\n    const { search, pathname } = useLocation()\n    const url = new URLSearchParams(search)\n\n    const urlParam = url.get(param)\n    const [value, setValue] = useState(urlParam !== null ? urlParam : '')\n\n    function _setValue(val){\n        url.set(param, val)\n        history.replace({ pathname, search: url.toString() }); \n        setValue(val)\n    }\n\n    return [value, _setValue]\n}","export const password_generator = ( len ) => {\n    let length = (len)?(len):(10);\n    let string = \"abcdefghijklmnopqrstuvwxyz\"; //to upper \n    let numeric = '0123456789';\n    let punctuation = '!@#$%^&*()_+~`|}{[]\\:;?><,./-=';\n    let password = \"\";\n    let character = \"\";\n    let crunch = true;\n    while( password.length<length ) {\n       let entity1 = Math.ceil(string.length * Math.random()*Math.random());\n       let entity2 = Math.ceil(numeric.length * Math.random()*Math.random());\n       let entity3 = Math.ceil(punctuation.length * Math.random()*Math.random());\n       let hold = string.charAt( entity1 );\n        hold = (password.length%2==0)?(hold.toUpperCase()):(hold);\n        character += hold;\n        character += numeric.charAt( entity2 );\n        character += punctuation.charAt( entity3 );\n        password = character;\n    }\n    password=password.split('').sort(function(){return 0.5-Math.random()}).join('');\n    return password.substr(0,len);\n}\n","import React, { useEffect, useState } from \"react\";\nimport { useCookies } from \"react-cookie\";\nimport ReactPaginate from \"react-paginate\";\nimport {\n  getUsers,\n  userLogout,\n  deleteUsr,\n  updateProfile,\n  getBranches,\n  getIBOs,\n} from \"../../../utils/APIs\";\n\nimport { toast } from \"react-toastify\";\nimport { useHistory } from \"react-router-dom\";\nimport Swal from \"sweetalert2\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { useForm } from \"react-hook-form\";\nimport { Form } from \"react-bootstrap\";\nimport { password_generator } from \"../../../utils/Functions/passwordGenerator\";\nimport { useUrl } from \"../../../utils/Functions/useUrl\";\nimport {\n  statusOption,\n  formateStatus,\n  roleOption\n} from \"../../../utils/Functions/commonOptions\";\nimport { useDebounce } from \"../../../utils/Functions/useDebounce\";\nimport Spinner from \"../../shared/Spinner\";\n\nconst ClientList = () => {\n  const history = useHistory();\n  const [cookies, setCookie] = useCookies([\"user\"]);\n  const [itemlist, setitemlist] = useState([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const debouncedSearchTerm = useDebounce(searchTerm, 500);\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors, isDirty, isValid },\n  } = useForm({\n    mode: \"onChange\",\n  });\n  var strongRegexMo = new RegExp(\n    \"^\\\\s*(?:\\\\+?(\\\\d{1,3}))?[-. (]*(\\\\d{3})[-. )]*(\\\\d{3})[-. ]*(\\\\d{4})(?: *x(\\\\d+))?\\\\s*$\"\n  );\n\n  const onSubmit = async (data) => {\n    data.status = updateStatus;\n    data.branch = branchUpdate;\n    data.IBO = IBOUpdate;\n    data.role = roleUpdate\n\n    try {\n      const updatedData = JSON.stringify(data);\n      await updateProfile(updatedData, valueToEdit?.id);\n      toast.success(\"User updated Successfully\", {\n        autoClose: 3000,\n      });\n      list();\n    } catch (error) {\n      if (error?.response?.data?.message) {\n        toast.error(error.response.data.message);\n      } else {\n        toast.error(process.env.REACT_APP_ERROR_MESSAGE);\n      }\n\n      if (error?.response?.data?.code === 401) {\n        const formData = JSON.stringify({\n          refreshToken: localStorage.getItem(\"refreshToken\"),\n        });\n        setCookie(\"user\", null, { path: \"/\" });\n        userLogout(formData).finally(() => {\n          history.push(\"/user-pages/login-1\");\n        });\n      }\n    } finally {\n      setShow(false);\n    }\n  };\n\n  // We start with an empty list of items.\n  const [pageCount, setPageCount] = useState(0);\n  // Here we use item offsets; we could also use page offsets\n  // following the API or data you're working with.\n  const [itemOffset, setItemOffset] = useUrl(\"page\");\n  const [itemsPerPage] = useState(10);\n  const [show, setShow] = React.useState(false);\n  const [valueToEdit, setvalueToEdit] = useState({});\n  const [updateStatus, setupdateStatus] = useState(0);\n  const [branchList, setbranchList] = useState([]);\n  const [selectedBranch, setselectedBranch] = useState(\"\");\n  const [IBOList, setIBOList] = useState([]);\n  const [selectedIBO, setselectedIBO] = useState(\"\");\n  const [branchUpdate, setbranchUpdate] = useState('')\n  const [IBOUpdate, setIBOUpdate] = useState('')\n  const [roleUpdate, setroleUpdate] = useState('')\n  const [isLoading, setIsLoading] = useState(true)\n  const onChangeBranchUpdate = (e) => {\n    setbranchUpdate(e?.target?.value)\n  }\n\n  const onChangeStatusForm = (e) => {\n    setupdateStatus(+e?.target?.value || 0);\n  };\n\n  const onChangeIBOpdate = (e) => {\n    setIBOUpdate(e?.target?.value)\n  }\n\n  const onChangeRolepdate = (e) => {\n    setroleUpdate(e?.target?.value)\n  }\n\n  const handleClose = () => {\n    setShow(false);\n    setvalueToEdit({});\n    setupdateStatus(0);\n    setbranchUpdate('');\n    setIBOUpdate('');\n    setroleUpdate('')\n  };\n\n  const handleShow = (value) => {\n    setvalueToEdit(value);\n    setupdateStatus(value?.status || 0);\n    setbranchUpdate(value?.branch)\n    setIBOUpdate(value?.IBO)\n    setroleUpdate(value?.role)\n    setShow(true);\n  };\n\n  useEffect(() => {\n    list();\n  }, [itemOffset, itemsPerPage, selectedBranch, selectedIBO]);\n\n  useEffect(() => {\n    list();\n  }, [debouncedSearchTerm]);\n\n  useEffect(() => {\n    getBranchList();\n    getIBOList();\n  }, []);\n\n  const getBranchList = async () => {\n    const items = await (await getBranches(5000, 1, \"\", \"branch\")).data;\n\n    setbranchList(items?.results);\n  };\n\n  const onChangeHandlerBranch = (e) => {\n    setItemOffset(0);\n    setselectedBranch(e.target.value);\n  };\n\n  const getIBOList = async () => {\n    const items = await (await getIBOs(5000, 1, \"\")).data;\n    setIBOList(items?.results);\n  };\n\n  const onChangeHandlerIBO = (e) => {\n    setItemOffset(0);\n    setselectedIBO(e.target.value);\n  };\n\n  const list = async () => {\n    setIsLoading(true)\n    try {\n      const items = await (\n        await getUsers(\n          itemsPerPage,\n          +itemOffset + 1,\n          searchTerm,\n          \"user\",\n          selectedBranch,\n          selectedIBO\n        )\n      ).data;\n      setitemlist(items?.results);\n      setPageCount(items?.totalPages);\n    } catch (error) {\n      if (error?.response?.data?.message) {\n        toast.error(error.response.data.message);\n      } else {\n        toast.error(process.env.REACT_APP_ERROR_MESSAGE);\n      }\n\n      if (error?.response?.data?.code === 401) {\n        const formData = JSON.stringify({\n          refreshToken: localStorage.getItem(\"refreshToken\"),\n        });\n        setCookie(\"user\", null, { path: \"/\" });\n        userLogout(formData).finally(() => {\n          history.push(\"/user-pages/login-1\");\n        });\n      }\n    }\n    setIsLoading(false)\n  };\n\n  const generatePassword = async (id) => {\n    const randomPassword = password_generator();\n    const newPassword = JSON.stringify({\n      password: randomPassword,\n    });\n\n    try {\n      await updateProfile(newPassword, id);\n      toast.success(\n        \"Password generated and sended to user via Email successfully\",\n        { autoClose: 3000 }\n      );\n    } catch (error) {\n      toast.error(\"Password generation failed, please try again later\");\n    }\n  };\n\n  // Invoke when user click to request another page.\n  const handlePageClick = (event) => {\n    window.scrollTo(0, 0);\n    setItemOffset(event.selected);\n  };\n\n  const deleteData = (uid) => {\n    Swal.fire({\n      title: \"Are you sure?\",\n      text: \"You will not be able to recover this imaginary file!\",\n      icon: \"warning\",\n      showCancelButton: true,\n      cancelButtonColor: \"#DD6B55\",\n      confirmButtonColor: \"#DD6B55\",\n      confirmButtonText: \"Yes, delete it!\",\n      cancelButtonText: \"No, keep it\",\n    }).then((result) => {\n      if (result.value) {\n        return (\n          deleteUsr(uid).finally(() => list()),\n          Swal.fire(\n            \"Deleted!\",\n            \"Your imaginary file has been deleted.\",\n            \"success\"\n          )\n        );\n      } else if (result.dismiss === Swal.DismissReason.cancel) {\n        Swal.fire(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\n      }\n    });\n  };\n\n  return (\n    <div>\n      <Modal\n        show={show}\n        onHide={handleClose}\n        backdrop=\"static\"\n        keyboard={false}\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>Update Client</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <div className=\"row auth\">\n            <div className=\"col-12 grid-margin\">\n              <div className=\"card\">\n                <div className=\"card-body\">\n                  <form\n                    className=\"form-sample\"\n                    onSubmit={handleSubmit(onSubmit)}\n                  >\n                    <p className=\"card-description\"> Update Client </p>\n                    <div className=\"row\">\n                      <div className=\"col-md-12\">\n                        <Form.Group className=\"row\">\n                          <label className=\"col-sm-4 col-form-label\">\n                            Name\n                          </label>\n                          <div className=\"col-sm-8\">\n                            <Form.Control\n                              type=\"text\"\n                              name=\"name\"\n                              defaultValue={valueToEdit.name}\n                              {...register(\"name\", { required: true })}\n                            />\n                            {errors && errors.name && (\n                              <p>name is required field</p>\n                            )}\n                          </div>\n                        </Form.Group>\n                      </div>\n                    </div>\n\n                    <div className=\"row\">\n                      <div className=\"col-md-12\">\n                        <Form.Group className=\"row\">\n                          <label className=\"col-sm-4 col-form-label\">\n                            Address{\" \"}\n                          </label>\n                          <div className=\"col-sm-8\">\n                            <Form.Control\n                              type=\"text\"\n                              name=\"address\"\n                              defaultValue={valueToEdit.address}\n                              {...register(\"address\", { required: true })}\n                            />\n                            {errors && errors.address && (\n                              <p>address is required field</p>\n                            )}\n                          </div>\n                        </Form.Group>\n                      </div>\n                    </div>\n\n                    <div className=\"row\">\n                      <div className=\"col-md-12\">\n                        <Form.Group className=\"row\">\n                          <label className=\"col-sm-4 col-form-label\">\n                            Contact No\n                          </label>\n                          <div className=\"col-sm-8 contact_no\">\n                            <Form.Control\n                              type=\"text\"\n                              name=\"contactno\"\n                              defaultValue={valueToEdit.contactno}\n                              {...register(\"contactno\", {\n                                required: true,\n                                pattern: strongRegexMo,\n                              })}\n                            />\n                            {errors &&\n                              errors.contactno &&\n                              errors.contactno.type === \"required\" && (\n                                <p>contact number is required field</p>\n                              )}\n                            {errors &&\n                              errors.contactno &&\n                              errors.contactno.type === \"pattern\" && (\n                                <p>\n                                  invalid phone number please use valid formate\n                                </p>\n                              )}\n                          </div>\n                        </Form.Group>\n                      </div>\n                    </div>\n\n                    <div className=\"row\">\n                      <div className=\"col-md-12\">\n                        <Form.Group className=\"row\">\n                          <label className=\"col-sm-4 col-form-label\">\n                            Email\n                          </label>\n                          <div className=\"col-sm-8\">\n                            <Form.Control\n                              type=\"text\"\n                              name=\"email\"\n                              defaultValue={valueToEdit.email}\n                              {...register(\"email\", {\n                                required: true,\n                                pattern: /^\\S+@\\S+$/i,\n                              })}\n                            />\n                            {errors &&\n                              errors.email &&\n                              errors.email.type === \"required\" && (\n                                <p>email is required field</p>\n                              )}\n                            {errors &&\n                              errors.email &&\n                              errors.email.type === \"pattern\" && (\n                                <p>invalid email formate</p>\n                              )}\n                          </div>\n                        </Form.Group>\n                      </div>\n                    </div>\n\n                    <div className=\"row\">\n                      <div className=\"col-md-12\">\n                        <Form.Group className=\"row\">\n                          <label className=\"col-sm-4 col-form-label\">\n                            status\n                          </label>\n                          <div className=\"col-sm-8\">\n                            <select\n                              className=\"form-control form-control-sm\"\n                              id=\"exampleFormControlSelect3\"\n                              name=\"status\"\n                              onChange={onChangeStatusForm}\n                            >\n                              {statusOption?.map((i) => {\n                                return (\n                                  <option\n                                    value={i?.value}\n                                    selected={+updateStatus === +i?.value}\n                                  >\n                                    {i?.label}\n                                  </option>\n                                );\n                              })}\n                            </select>\n                          </div>\n                        </Form.Group>\n                      </div>\n                    </div>\n\n                    <div className=\"row\">\n                      <div className=\"col-md-12\">\n                        <Form.Group className=\"row\">\n                          <label className=\"col-sm-4 col-form-label\">\n                            Search Branch\n                          </label>\n                          <div className=\"col-sm-8\">\n                            <select\n                              className=\"form-control form-control-sm\"\n                              id=\"exampleFormControlSelect2\"\n                              name=\"branch\"\n                              onChange={onChangeBranchUpdate}\n                            >\n                              {branchList?.map((i) => {\n                                return (\n                                  <>\n                                    <option\n                                      selected={i.name === branchUpdate}\n                                      value={i.name}\n                                    >\n                                      {i.name}\n                                    </option>\n                                  </>\n                                );\n                              })}\n                            </select>\n                          </div>\n                        </Form.Group>\n                      </div>\n                    </div>\n\n                    <div className=\"row\">\n                      <div className=\"col-md-12\">\n                        <Form.Group className=\"row\">\n                          <label className=\"col-sm-4 col-form-label\">\n                            Select IBO\n                          </label>\n                          <div className=\"col-sm-8\">\n                            <select\n                              className=\"form-control form-control-sm\"\n                              id=\"exampleFormControlSelect2\"\n                              name=\"branch\"\n                              onChange={onChangeIBOpdate}\n                            >\n                              {IBOList?.map((i) => {\n                                return (\n                                  <>\n                                    <option\n                                      selected={i.name === IBOUpdate}\n                                      value={i.name}\n                                    >\n                                      {i.name}\n                                    </option>\n                                  </>\n                                );\n                              })}\n                            </select>\n                          </div>\n                        </Form.Group>\n                      </div>\n                    </div>\n\n                    <div className=\"row\">\n                      <div className=\"col-md-12\">\n                        <Form.Group className=\"row\">\n                          <label className=\"col-sm-4 col-form-label\">\n                            Select Role\n                          </label>\n                          <div className=\"col-sm-8\">\n                            <select\n                              className=\"form-control form-control-sm\"\n                              id=\"exampleFormControlSelect2\"\n                              name=\"branch\"\n                              onChange={onChangeRolepdate}\n                            >\n                              {roleOption?.map((i) => {\n                                return (\n                                  <>\n                                    <option\n                                      selected={i.value === roleUpdate}\n                                      value={i.value}\n                                    >\n                                      {i.label}\n                                    </option>\n                                  </>\n                                );\n                              })}\n                            </select>\n                          </div>\n                        </Form.Group>\n                      </div>\n                    </div>\n\n                    <div className=\"row\">\n                      <div className=\"col-md-12\">\n                        <Form.Group className=\"row\">\n                          <label className=\"col-sm-4 col-form-label\">\n                            AadharCard Number\n                          </label>\n                          <div className=\"col-sm-8\">\n                            <Form.Control\n                              type=\"text\"\n                              name=\"aadhar_card_no\"\n                              defaultValue={valueToEdit.aadhar_card_no}\n                              {...register(\"aadhar_card_no\", { required: true })}\n                            />\n                            {errors && errors.aadhar_card_no && (\n                              <p>Aadharcard number is required field</p>\n                            )}\n                          </div>\n                        </Form.Group>\n                      </div>\n                    </div>\n\n                    <div className=\"row\">\n                      <div className=\"col-md-12\">\n                        <Form.Group className=\"row\">\n                          <label className=\"col-sm-4 col-form-label\">\n                            PanCard Number\n                          </label>\n                          <div className=\"col-sm-8\">\n                            <Form.Control\n                              type=\"text\"\n                              name=\"pan_card_no\"\n                              defaultValue={valueToEdit.pan_card_no}\n                              {...register(\"pan_card_no\", { required: true })}\n                            />\n                            {errors && errors.pan_card_no &&(\n                              <p>PanCard number is required field</p>\n                            )}\n                          </div>\n                        </Form.Group>\n                      </div>\n                    </div>\n\n                    <div className=\"mt-3\">\n                      <button\n                        className=\"btn  btn-primary btn-lg font-weight-medium auth-form-btn\"\n                        type=\"submit\"\n                      >\n                        UPDATE\n                      </button>\n                    </div>\n                  </form>\n                </div>\n              </div>\n            </div>\n          </div>\n        </Modal.Body>\n      </Modal>\n      <div className=\"page-header\">\n        <h3 className=\"page-title\">Clients / Show Clients </h3>\n        <nav aria-label=\"breadcrumb\">\n          <ol className=\"breadcrumb\">\n            <li className=\"breadcrumb-item\">\n              <a href=\"!#\" onClick={(event) => event.preventDefault()}>\n                {cookies?.user?.role} Dashboard\n              </a>\n            </li>\n            <li className=\"breadcrumb-item active\" aria-current=\"page\">\n              Show clients\n            </li>\n          </ol>\n        </nav>\n      </div>\n      <div className=\"col-lg-12 grid-margin stretch-card p0\">\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <div className=\"row\">\n              <div className=\"col-md-4\">\n                <Form.Group className=\"row\">\n                  <label className=\"col-sm-6 col-form-label\">\n                    Search Branch\n                  </label>\n                  <div className=\"col-sm-6\">\n                    <select\n                      className=\"form-control form-control-sm\"\n                      id=\"exampleFormControlSelect2\"\n                      name=\"branch\"\n                      onChange={onChangeHandlerBranch}\n                    >\n                      <option selected={\"\" === selectedBranch} value={\"\"}>\n                        Not Selected\n                      </option>\n                      {branchList?.map((i) => {\n                        return (\n                          <>\n                            <option\n                              selected={i.name === selectedBranch}\n                              value={i.name}\n                            >\n                              {i.name}\n                            </option>\n                          </>\n                        );\n                      })}\n                    </select>\n                  </div>\n                </Form.Group>\n              </div>\n\n              <div className=\"col-md-4\">\n                <Form.Group className=\"row\">\n                  <label className=\"col-sm-5 col-form-label\">Search IBO</label>\n                  <div className=\"col-sm-7\">\n                    <select\n                      className=\"form-control form-control-sm\"\n                      id=\"exampleFormControlSelect2\"\n                      name=\"branch\"\n                      onChange={onChangeHandlerIBO}\n                    >\n                      <option selected={\"\" === selectedIBO} value={\"\"}>\n                        Not Selected\n                      </option>\n                      {IBOList?.map((i) => {\n                        return (\n                          <>\n                            <option\n                              selected={i.name === selectedIBO}\n                              value={i.name}\n                            >\n                              {i.name}\n                            </option>\n                          </>\n                        );\n                      })}\n                    </select>\n                  </div>\n                </Form.Group>\n              </div>\n\n              <div className=\"col-md-4\">\n                <div className=\"search-field d-none d-md-block\">\n                  <form className=\"d-flex align-items-center h-100\" action=\"#\">\n                    <div className=\"input-group\">\n                      <div className=\"input-group-prepend outline-gray bg-transparent\">\n                        <i className=\"input-group-text border-0 mdi mdi-magnify\"></i>\n                      </div>\n                      <input\n                        type=\"text\"\n                        className=\"form-control outline-gray bg-transparent border-0\"\n                        placeholder=\"Search Clients\"\n                        value={searchTerm}\n                        onChange={(e) => {\n                          setSearchTerm(e?.target?.value);\n                          setItemOffset(0);\n                        }}\n                      />\n                    </div>\n                  </form>\n                </div>\n              </div>\n            </div>\n            <h4 className=\"card-title\">Client list</h4>\n\n            <div className=\"table-responsive\">\n              <table className=\"table table-striped\">\n                <thead>\n                  <tr>\n                    <th> Name </th>\n                    <th> Contact no. </th>\n                    <th> Branch </th>\n                    <th> IBO </th>\n                    <th> Email </th>\n                    <th> Role </th>\n                    <th> Status </th>\n                    <th> Generate Password </th>\n                    <th> Edit </th>\n                    <th> Delete </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {isLoading ? <Spinner />\n                  :\n                  itemlist?.map((item) => {\n                    return (\n                      <tr>\n                        <td>{item?.name}</td>\n                        <td>{item?.contactno}</td>\n                        <td>{item?.branch}</td>\n                        <td>{item?.IBO}</td>\n                        <td>{item?.email}</td>\n                        <td>{item?.role}</td>\n                        <td>{formateStatus(item?.status)}</td>\n                        <td>\n                          <button\n                            type=\"button\"\n                            className=\"btn btn-gradient-primary btn-sm \"\n                            onClick={() => generatePassword(item?.id)}\n                          >\n                            Generate\n                          </button>\n                        </td>\n                        <td>\n                          <i\n                            onClick={() => handleShow(item)}\n                            className=\"mdi mdi-lead-pencil\"\n                          ></i>\n                        </td>\n                        <td>\n                          <i\n                            onClick={() => deleteData(item?.id)}\n                            className=\"mdi mdi-delete\"\n                          >\n                            {\" \"}\n                          </i>\n                        </td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n              <ReactPaginate\n                breakLabel=\"...\"\n                nextLabel=\"next >\"\n                className=\"client-list\"\n                onPageChange={handlePageClick}\n                pageRangeDisplayed={5}\n                pageCount={pageCount}\n                previousLabel=\"< previous\"\n                renderOnZeroPageCount={null}\n                forcePage={itemOffset}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ClientList;\n"],"sourceRoot":""}