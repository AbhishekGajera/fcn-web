{"version":3,"sources":["app/user-pages/Login.js"],"names":["Login","history","useHistory","useForm","mode","register","handleSubmit","formState","errors","isDirty","isValid","useCookies","setCookie","onSubmit","data","terms","login","result","user","auth","path","localStorage","setItem","tokens","access","token","refresh","push","toast","success","response","message","error","process","className","src","require","alt","Group","Control","type","placeholder","size","name","required","pattern","email","password","disabled","to"],"mappings":";ohNAoLeA,UA3KD,WACZ,IAAMC,EAAUC,cAEhB,EAIIC,YAAQ,CACVC,KAAM,aAJNC,EADF,EACEA,SACAC,EAFF,EAEEA,aAFF,IAGEC,UAAaC,EAHf,EAGeA,OAAQC,EAHvB,EAGuBA,QAASC,EAHhC,EAGgCA,QAKhC,EAAsBC,YAAW,CAAC,SAAzBC,EAAT,oBAEMC,EAAQ,uCAAG,WAAOC,GAAP,qFACRA,EAAKC,MADG,kBAIQC,aAAMF,GAJd,QAIPG,EAJO,QAKNH,KAAKI,KAAKC,KAAO,WACxBP,EAAU,OAAQK,EAAOH,KAAKI,KAAM,CAAEE,KAAM,MAC5CC,aAAaC,QAAQ,cAAeL,EAAOH,KAAKS,OAAOC,OAAOC,OAC9DJ,aAAaC,QAAQ,eAAgBL,EAAOH,KAAKS,OAAOG,QAAQD,OAChExB,EAAQ0B,KAAK,cACbC,IAAMC,QAAQ,sBAVD,kDAaX,MACA,KAAMC,UACN,KAAMA,SAAShB,MACf,KAAMgB,SAAShB,KAAKiB,QAEpBH,IAAMI,MAAM,KAAMF,SAAShB,KAAKiB,SAEhCH,IAAMI,MAAMC,wFApBD,0DAAH,sDAyDd,OACE,6BACE,yBAAKC,UAAU,kDACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,oBACT,yBAAKA,UAAU,+CACb,yBAAKA,UAAU,cACb,yBACEC,IAAKC,EAAQ,KACbC,IAAI,UAGR,wDACA,wBAAIH,UAAU,qBAAd,wBACA,kBAAC,IAAD,CAAMA,UAAU,OAAOrB,SAAUP,EAAaO,IAC5C,kBAAC,IAAKyB,MAAN,CAAYJ,UAAU,iCACpB,kBAAC,IAAKK,QAAN,eACEC,KAAK,QACLC,YAAY,QACZC,KAAK,KACLC,KAAK,QACLT,UAAU,UACN7B,EAAS,QAAS,CACpBuC,UAAU,EACVC,QAAS,iBAEV,IACH,6BACCrC,GACCA,EAAOsC,OACe,aAAtBtC,EAAOsC,MAAMN,MACX,sDAEHhC,GACCA,EAAOsC,OACe,YAAtBtC,EAAOsC,MAAMN,MACX,qDAGN,kBAAC,IAAKF,MAAN,CAAYJ,UAAU,iCACpB,kBAAC,IAAKK,QAAN,eACEC,KAAK,WACLC,YAAY,WACZC,KAAK,KACLR,UAAU,SACVS,KAAK,YACDtC,EAAS,WAAY,CAAEuC,UAAU,MACpC,IACH,6BACCpC,GAAUA,EAAOuC,UAChB,0DAGJ,yBAAKb,UAAU,QACb,4BACEA,UAAU,oEACVc,UAAWvC,IAAYC,GAFzB,YAOF,yBAAKwB,UAAU,0DACb,yBAAKA,UAAU,cACb,2BAAOA,UAAU,+BACf,yCACEM,KAAK,WACLN,UAAU,mBACVS,KAAK,SACDtC,EAAS,WAEf,uBAAG6B,UAAU,iBAPf,sBAWF,kBAAC,IAAD,CACEe,GAAG,gCACHf,UAAU,wBAFZ,qBASF,yBAAKA,UAAU,sCAAf,yBACyB,IACvB,kBAAC,IAAD,CACEe,GAAG,yBACHf,UAAU,gBAFZ","file":"static/js/103.a44ac481.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useCookies } from \"react-cookie\";\r\nimport { googleLoginHandler, login } from \"../../utils/APIs\";\r\nimport { toast } from \"react-toastify\";\r\nimport GoogleLogin from \"react-google-login\";\r\n\r\nconst Login = () => {\r\n  const history = useHistory();\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors, isDirty, isValid },\r\n  } = useForm({\r\n    mode: \"onChange\",\r\n  });\r\n\r\n  const [, setCookie] = useCookies([\"user\"]);\r\n\r\n  const onSubmit = async (data) => {\r\n    delete data.terms;\r\n\r\n    try {\r\n      const result = await login(data);\r\n      result.data.user.auth = \"verified\";\r\n      setCookie(\"user\", result.data.user, { path: \"/\" });\r\n      localStorage.setItem(\"accessToken\", result.data.tokens.access.token);\r\n      localStorage.setItem(\"refreshToken\", result.data.tokens.refresh.token);\r\n      history.push(\"/dashboard\");\r\n      toast.success(\"login Successfully\");\r\n    } catch (error) {\r\n      if (\r\n        error &&\r\n        error.response &&\r\n        error.response.data &&\r\n        error.response.data.message\r\n      ) {\r\n        toast.error(error.response.data.message);\r\n      } else {\r\n        toast.error(process.env.REACT_APP_ERROR_MESSAGE);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleLogin = async (googleData) => {\r\n    const formData = JSON.stringify({\r\n      token: googleData.tokenId,\r\n    });\r\n\r\n    try {\r\n      const result = await googleLoginHandler(formData);\r\n      result.data.user.auth = \"verified\";\r\n      setCookie(\"user\", result.data.user, { path: \"/\" });\r\n      localStorage.setItem(\"accessToken\", result.data.tokens.access.token);\r\n      localStorage.setItem(\"refreshToken\", result.data.tokens.refresh.token);\r\n      toast.success(\"login sucssefully\");\r\n      history.push(\"/dashboard\");\r\n      \r\n    } catch (error) {\r\n      if (\r\n        error &&\r\n        error.response &&\r\n        error.response.data &&\r\n        error.response.data.message\r\n      ) {\r\n        toast.error(error.response.data.message);\r\n      } else {\r\n        toast.error(process.env.REACT_APP_ERROR_MESSAGE);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleLoginFailure = (res) => {\r\n    toast.error(res.error);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"d-flex align-items-center login-auth auth px-0\">\r\n        <div className=\"row w-100 mx-0\">\r\n          <div className=\"col-lg-4 mx-auto\">\r\n                <div className=\"auth-form-light text-left py-5 px-4 px-sm-5\">\r\n                  <div className=\"brand-logo\">\r\n                    <img\r\n                      src={require(\"../../assets/images/fcn_logo.png\")}\r\n                      alt=\"logo\"\r\n                    />\r\n                  </div>\r\n                  <h4>Hello! let's get started</h4>\r\n                  <h6 className=\"font-weight-light\">Sign in to continue.</h6>\r\n                  <Form className=\"pt-3\" onSubmit={handleSubmit(onSubmit)}>\r\n                    <Form.Group className=\"d-flex flex-wrap search-field\">\r\n                      <Form.Control\r\n                        type=\"email\"\r\n                        placeholder=\"Email\"\r\n                        size=\"lg\"\r\n                        name=\"email\"\r\n                        className=\"h-auto\"\r\n                        {...register(\"email\", {\r\n                          required: true,\r\n                          pattern: /^\\S+@\\S+$/i,\r\n                        })}\r\n                      />{\" \"}\r\n                      <br />\r\n                      {errors &&\r\n                        errors.email &&\r\n                        errors.email.type === \"required\" && (\r\n                          <p>email is required field</p>\r\n                        )}\r\n                      {errors &&\r\n                        errors.email &&\r\n                        errors.email.type === \"pattern\" && (\r\n                          <p>invalid email formate</p>\r\n                        )}\r\n                    </Form.Group>\r\n                    <Form.Group className=\"d-flex flex-wrap search-field\">\r\n                      <Form.Control\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                        size=\"lg\"\r\n                        className=\"h-auto\"\r\n                        name=\"password\"\r\n                        {...register(\"password\", { required: true })}\r\n                      />{\" \"}\r\n                      <br />\r\n                      {errors && errors.password && (\r\n                        <p>password is required field</p>\r\n                      )}\r\n                    </Form.Group>\r\n                    <div className=\"mt-3\">\r\n                      <button\r\n                        className=\"btn btn-block btn-primary btn-lg font-weight-medium auth-form-btn\"\r\n                        disabled={!isDirty || !isValid}\r\n                      >\r\n                        SIGN IN\r\n                      </button>\r\n                    </div>\r\n                    <div className=\"my-2 d-flex justify-content-between align-items-center\">\r\n                      <div className=\"form-check\">\r\n                        <label className=\"form-check-label text-muted\">\r\n                          <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"\r\n                            name=\"terms\"\r\n                            {...register(\"terms\")}\r\n                          />\r\n                          <i className=\"input-helper\"></i>\r\n                          Keep me signed in\r\n                        </label>\r\n                      </div>\r\n                      <Link\r\n                        to=\"/user-pages/forgot-password-1\"\r\n                        className=\"auth-link text-black\"\r\n                      >\r\n                        Forgot password?\r\n                      </Link>\r\n                    </div>\r\n                  \r\n                   \r\n                    <div className=\"text-center mt-4 font-weight-light\">\r\n                      Don't have an account?{\" \"}\r\n                      <Link\r\n                        to=\"/user-pages/register-1\"\r\n                        className=\"text-primary\"\r\n                      >\r\n                        Create\r\n                      </Link>\r\n                    </div>\r\n                  </Form>\r\n                </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"sourceRoot":""}