{"version":3,"sources":["utils/Functions/useUrl.js","utils/Functions/useDebounce.js","app/Admin-components/Leads/index.js"],"names":["useUrl","param","history","useHistory","useLocation","search","pathname","url","URLSearchParams","urlParam","get","useState","value","setValue","val","set","replace","toString","useDebounce","delay","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","Leads","searchTerm","setSearchTerm","debouncedSearchTerm","pageCount","setPageCount","itemOffset","setItemOffset","itemsPerPage","useCookies","cookies","setCookie","React","show","setShow","itemlist","setitemlist","branchlist","setbranchlist","isLoading","setIsLoading","list","useForm","mode","register","handleSubmit","reset","formState","errors","isDirty","isValid","getBranchesClient","data","branch","results","getLeads","items","totalPages","response","message","toast","error","process","code","formData","JSON","stringify","refreshToken","localStorage","getItem","path","userLogout","finally","push","onSubmit","CreateLead","success","autoClose","onHide","backdrop","keyboard","Header","closeButton","Title","Body","className","Group","Control","type","name","placeholder","autoFocus","required","Name","email","id","map","item","index","key","label","contactno","aria-label","href","onClick","event","preventDefault","user","role","aria-current","action","onChange","e","target","style","textAlign","Fragment","title","console","log","updateLead","statusChanged","selected","status","uid","Swal","fire","text","icon","showCancelButton","cancelButtonColor","confirmButtonColor","confirmButtonText","cancelButtonText","then","result","deleteLead","dismiss","DismissReason","cancel","breakLabel","nextLabel","onPageChange","pageRangeDisplayed","previousLabel","renderOnZeroPageCount","forcePage"],"mappings":"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","file":"static/js/32.92ceb842.chunk.js","sourcesContent":["import { useState } from 'react'\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nexport const useUrl = (param) => {\n\n    const history = useHistory()\n    const { search, pathname } = useLocation()\n    const url = new URLSearchParams(search)\n\n    const urlParam = url.get(param)\n    const [value, setValue] = useState(urlParam !== null ? urlParam : '')\n\n    function _setValue(val){\n        url.set(param, val)\n        history.replace({ pathname, search: url.toString() }); \n        setValue(val)\n    }\n\n    return [value, _setValue]\n}","import { useEffect, useState } from \"react\";\n\n// Hook\nexport const useDebounce = (value, delay) => {\n    // State and setters for debounced value\n    const [debouncedValue, setDebouncedValue] = useState(value);\n    useEffect(\n      () => {\n        // Update debounced value after delay\n        const handler = setTimeout(() => {\n          setDebouncedValue(value);\n        }, delay);\n        // Cancel the timeout if value changes (also on delay change or unmount)\n        // This is how we prevent debounced value from updating if value is changed ...\n        // .. within the delay period. Timeout gets cleared and restarted.\n        return () => {\n          clearTimeout(handler);\n        };\n      },\n      [value, delay] // Only re-call effect if value or delay changes\n    );\n    return debouncedValue;\n  }","import React, { useEffect, useState } from \"react\";\nimport { useCookies } from \"react-cookie\";\nimport ReactPaginate from \"react-paginate\";\nimport { CreateLead, getLeads, getBranchesClient, updateLead, deleteLead, userLogout } from \"../../../utils/APIs\";\nimport Swal from \"sweetalert2\";\nimport { useDebounce } from \"../../../utils/Functions/useDebounce\";\nimport Spinner from \"../../shared/Spinner\";\nimport { useUrl } from \"../../../utils/Functions/useUrl\";\nimport { toast } from \"react-toastify\";\nimport { useHistory } from \"react-router-dom\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { useForm } from \"react-hook-form\";\nimport { Form } from 'react-bootstrap';\n\n\nconst Leads = () => {\n    const [searchTerm, setSearchTerm] = useState(\"\");\n    const debouncedSearchTerm = useDebounce(searchTerm, 500);\n\n    // We start with an empty list of items.\n    const [pageCount, setPageCount] = useState(0);\n    // Here we use item offsets; we could also use page offsets\n    // following the API or data you're working with.\n    const [itemOffset, setItemOffset] = useUrl(\"page\");\n    const [itemsPerPage] = useState(20);\n\n    const [cookies, setCookie] = useCookies([\"user\"]);\n    const [show, setShow] = React.useState(false);\n    const [itemlist, setitemlist] = useState([]);\n    const [branchlist, setbranchlist] = useState([]);\n    const [isLoading, setIsLoading] = useState(true)\n    const history = useHistory()\n\n    useEffect(() => {\n        list();\n    }, [itemOffset, itemsPerPage, debouncedSearchTerm]);\n\n    // Invoke when user click to request another page. \n    const handlePageClick = (event) => {\n        setItemOffset(event.selected);\n    };\n\n    const deleteLeads = (uid) => {\n        // console.log(\"uid\", uid)\n        Swal.fire({\n            title: \"Are you sure?\",\n            text: \"You will not be able to recover this imaginary file!\",\n            icon: \"warning\",\n            showCancelButton: true,\n            cancelButtonColor: \"#DD6B55\",\n            confirmButtonColor: \"#DD6B55\",\n            confirmButtonText: \"Yes, delete it!\",\n            cancelButtonText: \"No, keep it\",\n        }).then((result) => {\n            if (result.value) {\n                return (\n                    deleteLead(uid).finally(() => list()),\n                    Swal.fire(\n                        \"Deleted!\",\n                        \"Your Lead has been deleted.\",\n                        \"success\"\n                    )\n                );\n            } else if (result.dismiss === Swal.DismissReason.cancel) {\n                Swal.fire(\"Cancelled\", \"Your Lead is safe :)\", \"error\");\n            }\n        });\n    };\n\n    const { register, handleSubmit, reset, formState: { errors, isDirty, isValid } } = useForm({\n        mode: \"onChange\"\n    });\n\n    const list = async () => {\n        setIsLoading(true)\n        try {\n            const branch = await (await getBranchesClient()).data;\n            setbranchlist(branch?.results);\n            const items = await (\n                await getLeads(\n                    itemsPerPage,\n                    +itemOffset + 1,\n                    searchTerm\n                )\n            ).data;\n            setitemlist(items?.results);\n            setPageCount(items?.totalPages);\n            setIsLoading(false)\n        } catch (error) {\n            if (error?.response?.data?.message) {\n                toast.error(error.response.data.message);\n            } else {\n                toast.error(process.env.REACT_APP_ERROR_MESSAGE);\n            }\n\n            if (error?.response?.data?.code === 401) {\n                const formData = JSON.stringify({\n                    refreshToken: localStorage.getItem(\"refreshToken\"),\n                });\n                setCookie(\"user\", null, { path: \"/\" });\n                userLogout(formData).finally(() => {\n                    history.push(\"/user-pages/login-1\");\n                });\n            }\n        }\n    }\n\n\n    const statusChanged = (id, e) => {\n        console.log(e.target.value, id);\n        updateLead({\n            \"lead_id\": id,\n            \"status\": e.target.value\n        })\n        toast.success('Status updated successfully', {\n            autoClose: true\n        })\n    }\n\n    const handleClose = () => {\n        setShow(false)\n        reset()\n    };\n\n    const onSubmit = async (data) => {\n        await CreateLead(data)\n        setShow(false);\n        toast.success('Lead added successfully', {\n            autoClose: true\n        })\n    }\n\n    const handleShow = () => {\n        reset()\n        setShow(true);\n    }\n\n    return (\n        <div>\n            <Modal\n                show={show}\n                onHide={handleClose}\n                backdrop=\"static\"\n                keyboard={false}\n            >\n                <Modal.Header closeButton>\n                    <Modal.Title>Create Lead</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className=\"row auth\">\n                        <div className=\"col-12 grid-margin\">\n                            <div className=\"card\">\n                                <div className=\"card-body\">\n                                    <form className=\"form-sample\" onSubmit={handleSubmit(onSubmit)}>\n\n                                        <div className=\"row\">\n                                            <div className=\"col-md-12\">\n                                                <Form.Group className=\"row\">\n                                                    <label className=\"col-sm-3 col-form-label\">\n                                                        Name\n                                                    </label>\n                                                    <div className=\"col-sm-9\">\n                                                        <Form.Control\n                                                            type=\"text\"\n                                                            name=\"name\"\n                                                            placeholder=\"Name\"\n                                                            autoFocus\n                                                            {...register(\"name\", {\n                                                                required: true,\n                                                            })}\n                                                        />\n                                                        {errors &&\n                                                            errors.Name &&\n                                                            errors.Name.type === \"required\" && (\n                                                                <p>Name is required field</p>\n                                                            )}\n                                                    </div>\n                                                </Form.Group>\n                                            </div>\n                                        </div>\n                                        <div className=\"row\">\n                                            <div className=\"col-md-12\">\n                                                <Form.Group className=\"row\">\n                                                    <label className=\"col-sm-3 col-form-label\">\n                                                        Title\n                                                    </label>\n                                                    <div className=\"col-sm-9\">\n                                                        <Form.Control\n                                                            type=\"text\"\n                                                            name=\"title\"\n                                                            placeholder=\"Title\"\n                                                            autoFocus\n                                                            {...register(\"title\", {\n                                                                required: true,\n                                                            })}\n                                                        />\n                                                        {errors &&\n                                                            errors.Title &&\n                                                            errors.Title.type === \"required\" && (\n                                                                <p>Title is required field</p>\n                                                            )}\n                                                    </div>\n                                                </Form.Group>\n                                            </div>\n                                        </div>\n                                        <div className=\"row\">\n                                            <div className=\"col-md-12\">\n                                                <Form.Group className=\"row\">\n                                                    <label className=\"col-sm-3 col-form-label\">\n                                                        Email\n                                                    </label>\n                                                    <div className=\"col-sm-9\">\n                                                        <Form.Control\n                                                            type=\"text\"\n                                                            name=\"email\"\n                                                            placeholder=\"Email\"\n                                                            autoFocus\n                                                            {...register(\"email\", {\n                                                                required: true,\n                                                            })}\n                                                        />\n                                                        {errors &&\n                                                            errors.email &&\n                                                            errors.email.type === \"required\" && (\n                                                                <p>Email is required field</p>\n                                                            )}\n                                                    </div>\n                                                </Form.Group>\n                                            </div>\n                                        </div>\n                                        <div className=\"row\">\n                                            <div className=\"col-md-12\">\n                                                <Form.Group className=\"row\">\n                                                    <label className=\"col-sm-3 col-form-label\">\n                                                        Branch\n                                                    </label>\n                                                    <div className=\"col-sm-9\">\n                                                        <select\n                                                            className=\"form-control form-control-lg\"\n                                                            id=\"exampleFormControlSelect2\"\n                                                            name=\"branch\"\n                                                            {...register(\"branch\", {\n                                                                required: true,\n                                                            })}\n                                                        >\n                                                            <option value=''>--Select branch--</option>\n                                                            {branchlist.map((item, index) => (\n                                                                <option key={index} value={item?.name} label={item?.name}></option>\n                                                            ))}\n                                                        </select>\n                                                        {errors && errors.branch && <p>Select branch is required field</p>}\n                                                    </div>\n                                                </Form.Group>\n                                            </div>\n                                        </div>\n\n                                        <div className=\"row\">\n                                            <div className=\"col-md-12\">\n                                                <Form.Group className=\"row\">\n                                                    <label className=\"col-sm-3 col-form-label\">Contact No</label>\n                                                    <div className=\"col-sm-9\">\n                                                        <Form.Control\n                                                            type=\"text\"\n                                                            name=\"contactno\"\n                                                            placeholder=\"Contact Number\"\n                                                            autoFocus\n                                                            {...register(\"contactno\", {\n                                                                required: true,\n                                                            })}\n                                                        />\n                                                        {errors &&\n                                                            errors.contactno &&\n                                                            errors.contactno.type === \"required\" && (\n                                                                <p>Contact Number is required field</p>\n                                                            )}\n\n                                                    </div>\n                                                </Form.Group>\n                                            </div>\n                                        </div>\n\n                                        <div className=\"mt-3\">\n                                            <button\n                                                className=\"btn  btn-primary btn-sm font-weight-medium auth-form-btn\"\n                                                type=\"submit\"\n                                            >\n                                                CREATE\n                                            </button>\n                                        </div>\n                                    </form>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </Modal.Body>\n            </Modal>\n            <div className=\"page-header\">\n                <h3 className=\"page-title\">Leads / Show Leads </h3>\n                <nav aria-label=\"breadcrumb\">\n                    <ol className=\"breadcrumb\">\n                        <li className=\"breadcrumb-item\">\n                            <a href=\"!#\" onClick={(event) => event.preventDefault()}>\n                                {cookies?.user?.role} Dashboard\n                            </a>\n                        </li>\n                        <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                            Show Leads\n                        </li>\n                    </ol>\n                </nav>\n            </div>\n            <div className=\"col-lg-12 grid-margin stretch-card p0\">\n                <div className=\"card\">\n                    <div className=\"card-body\">\n                        <div className=\"row mb-3\">\n                            <div className=\"col-md-4\">\n                                <h4 className=\"card-title\">Lead list</h4>\n                            </div>\n                            <div className=\"col-md-5\">\n                                <div className=\"search-field d-none d-md-block\">\n                                    <form className=\"d-flex align-items-center h-100\" action=\"#\">\n                                        <div className=\"input-group\">\n                                            <div className=\"input-group-prepend outline-gray bg-transparent\">\n                                                <i className=\"input-group-text border-0 mdi mdi-magnify\"></i>\n                                            </div>\n                                            <input\n                                                type=\"text\"\n                                                className=\"form-control outline-gray bg-transparent border-0\"\n                                                placeholder=\"Search Lead\"\n                                                value={searchTerm}\n                                                onChange={(e) => {\n                                                    setSearchTerm(e?.target?.value);\n                                                    setItemOffset(0);\n                                                }}\n                                            />\n                                        </div>\n                                    </form>\n                                </div>\n                            </div>\n                            <div className=\"col-md-3\" style={{ textAlign: 'end' }}>\n                                <button\n                                    type=\"button\"\n                                    className=\"btn btn-gradient-primary btn-fw\"\n                                    onClick={() => handleShow()}\n                                >\n                                    Add Lead\n                                </button>\n                            </div>\n                        </div>\n                        <div className=\"table-responsive\">\n                            <table className=\"table table-striped\">\n                                <thead>\n                                    <tr>\n                                        <th> Name </th>\n                                        <th> Title </th>\n                                        <th> Branch Name </th>\n                                        <th> Email </th>\n                                        <th> Phone </th>\n                                        <th> Status </th>\n                                        <th> Delete </th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {\n                                        isLoading ? <React.Fragment><Spinner /></React.Fragment>\n                                            :\n                                            itemlist?.map((item, index) => {\n                                                return (\n                                                    <tr key={index}>\n                                                        <td>{item?.name}</td>\n                                                        <td>{item?.title}</td>\n                                                        <td>{item?.branch}</td>\n                                                        <td>{item?.email}</td>\n                                                        <td>{item?.contactno}</td>\n                                                        <td>\n                                                            <select\n\n                                                                id={item.id}\n\n                                                                onChange={(e) => statusChanged(item.id, e)}\n                                                            >\n                                                                <option\n                                                                    value=\"0\"\n                                                                    selected={item.status == 0 ? \"selected\" : true}\n                                                                >\n                                                                    New\n                                                                </option>\n                                                                <option\n                                                                    value=\"1\"\n                                                                    selected={item.status == 1 ? \"selected\" : false}\n                                                                >\n                                                                    Working\n                                                                </option>\n\n                                                            </select>\n                                                        </td>\n                                                        <td>\n                                                            <i\n                                                                onClick={() => deleteLeads(item?.id)}\n                                                                className=\"mdi mdi-delete\"\n                                                            ></i>\n                                                        </td>\n                                                        <td>\n\n                                                        </td>\n                                                    </tr>\n                                                );\n                                            })}\n                                </tbody>\n                            </table>\n                            <ReactPaginate\n                                breakLabel=\"...\"\n                                nextLabel=\"next >\"\n                                className=\"client-list\"\n                                onPageChange={handlePageClick}\n                                pageRangeDisplayed={5}\n                                pageCount={pageCount}\n                                previousLabel=\"< previous\"\n                                renderOnZeroPageCount={null}\n                                forcePage={itemOffset}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Leads;\n"],"sourceRoot":""}