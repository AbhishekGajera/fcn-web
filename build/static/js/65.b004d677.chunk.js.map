{"version":3,"sources":["utils/Functions/useUrl.js","app/client-component/travel/QueryList.js"],"names":["useUrl","param","history","useHistory","useLocation","search","pathname","url","URLSearchParams","urlParam","get","useState","value","setValue","val","set","replace","toString","QueryList","pageCount","setPageCount","itemOffset","setItemOffset","itemsPerPage","useCookies","cookies","setCookie","itemlist","setitemlist","isLoading","setIsLoading","useEffect","list","deleteProduct","uid","Swal","fire","title","text","icon","showCancelButton","cancelButtonColor","confirmButtonColor","confirmButtonText","cancelButtonText","then","result","deleteTravelQuery","dismiss","DismissReason","cancel","getTravelQuery","data","items","results","totalPages","response","message","toast","error","process","code","formData","JSON","stringify","refreshToken","localStorage","getItem","path","userLogout","finally","push","className","aria-label","href","onClick","event","preventDefault","user","role","aria-current","Fragment","map","item","index","key","source","destination","start_date","end_date","name","id","onChange","e","formdata","travel_id","status","target","updateTravelQuery","success","autoClose","statusChanged","selected","breakLabel","nextLabel","onPageChange","pageRangeDisplayed","previousLabel","renderOnZeroPageCount","forcePage"],"mappings":"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","file":"static/js/65.b004d677.chunk.js","sourcesContent":["import { useState } from 'react'\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nexport const useUrl = (param) => {\n\n    const history = useHistory()\n    const { search, pathname } = useLocation()\n    const url = new URLSearchParams(search)\n\n    const urlParam = url.get(param)\n    const [value, setValue] = useState(urlParam !== null ? urlParam : '')\n\n    function _setValue(val){\n        url.set(param, val)\n        history.replace({ pathname, search: url.toString() }); \n        setValue(val)\n    }\n\n    return [value, _setValue]\n}","import React, { useEffect, useState } from \"react\";\nimport { useCookies } from \"react-cookie\";\nimport ReactPaginate from \"react-paginate\";\nimport { deleteTravelQuery, getTravelQuery, userLogout, updateTravelQuery } from \"../../../utils/APIs\";\nimport Swal from \"sweetalert2\";\nimport Spinner from \"../../shared/Spinner\";\nimport { useUrl } from \"../../../utils/Functions/useUrl\";\nimport { toast } from \"react-toastify\";\nimport { useHistory } from \"react-router-dom\";\n\n\nconst QueryList = () => {\n  // We start with an empty list of items.\n  const [pageCount, setPageCount] = useState(0);\n  // Here we use item offsets; we could also use page offsets\n  // following the API or data you're working with.\n  const [itemOffset, setItemOffset] = useUrl(\"page\");\n  const [itemsPerPage] = useState(20);\n  const [cookies, setCookie] = useCookies([\"user\"]);\n  const [itemlist, setitemlist] = useState([]);\n  const [isLoading, setIsLoading] = useState(true)\n  const history = useHistory()\n\n  useEffect(() => {\n    list();\n  }, [itemOffset, itemsPerPage]);\n\n  // Invoke when user click to request another page. \n  const handlePageClick = (event) => {\n    setItemOffset(event.selected);\n  };\n\n  const deleteProduct = async (uid) => {\n    Swal.fire({\n      title: \"Are you sure?\",\n      text: \"You will not be able to recover this imaginary file!\",\n      icon: \"warning\",\n      showCancelButton: true,\n      cancelButtonColor: \"#DD6B55\",\n      confirmButtonColor: \"#DD6B55\",\n      confirmButtonText: \"Yes, delete it!\",\n      cancelButtonText: \"No, keep it\",\n    }).then( async (result) => {\n      if (result.value) {\n            await  deleteTravelQuery(uid)\n              Swal.fire(\n                \"Deleted!\",\n                \"Your imaginary file has been deleted.\",\n                \"success\"\n                )\n                list()\n      } else if (result.dismiss === Swal.DismissReason.cancel) {\n        Swal.fire(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\n      }\n    });\n  };\n\n  const list = async () => {\n    setIsLoading(true)\n    try {\n      const items = await (\n        await getTravelQuery(\n          itemsPerPage,\n          +itemOffset + 1,\n        )\n      ).data;\n      setitemlist(items?.results);\n      setPageCount(items?.totalPages);\n      setIsLoading(false)\n    } catch (error) {\n      if (error?.response?.data?.message) {\n        toast.error(error.response.data.message);\n      } else {\n        toast.error(process.env.REACT_APP_ERROR_MESSAGE);\n      }\n\n      if (error?.response?.data?.code === 401) {\n        const formData = JSON.stringify({\n          refreshToken: localStorage.getItem(\"refreshToken\"),\n        });\n        setCookie(\"user\", null, { path: \"/\" });\n        userLogout(formData).finally(() => {\n          history.push(\"/user-pages/login-1\");\n        });\n      }\n    }\n  }\n  const statusChanged = (id, e) => {\n\n    const formdata = JSON.stringify({\n      travel_id : id,\n      status : e.target.value\n    })\n\n    updateTravelQuery(formdata)\n    toast.success('Status updated successfully', {\n      autoClose: true\n    })\n  }\n\n\n\n\n  return (\n    <div>\n      <div className=\"page-header\">\n        <h3 className=\"page-title\">Travel / Show Queries </h3>\n        <nav aria-label=\"breadcrumb\">\n          <ol className=\"breadcrumb\">\n            <li className=\"breadcrumb-item\">\n              <a href=\"!#\" onClick={(event) => event.preventDefault()}>\n                {cookies?.user?.role} Dashboard\n              </a>\n            </li>\n            <li className=\"breadcrumb-item active\" aria-current=\"page\">\n              Show Products\n            </li>\n          </ol>\n        </nav>\n      </div>\n      <div className=\"col-lg-12 grid-margin stretch-card p0\">\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <div className=\"row\">\n              <div className=\"col-md-6\">\n              </div>\n\n            </div>\n            <h4 className=\"card-title\">Query's list</h4>\n\n            <div className=\"table-responsive\">\n              <table className=\"table table-striped\">\n                <thead>\n                  <tr>\n                    <th> Source </th>\n                    <th> Destination </th>\n                    <th> Start Date </th>\n                    <th> End Date</th>\n                    <th> User </th>\n                    <th> Status </th>\n                    <th> Delete </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {\n                    isLoading ? <React.Fragment><Spinner /></React.Fragment>\n                      :\n                      itemlist?.map((item, index) => {\n                        return (\n                          <tr key={index}>\n                            <td>{item?.source}</td>\n                            <td>{item?.destination}</td>\n                            <td>{item?.start_date}</td>\n                            <td>{item?.end_date}</td>\n                            <td>{item?.user?.name}</td>\n                            <td>\n                              <select\n                                id={item.id}\n                                onChange={(e) => statusChanged(item.id, e)}\n                              >\n                                <option\n                                  value=\"0\"\n                                  selected={item.status == 0 ? \"selected\" : false}\n                                >\n                                  pending\n                                </option>\n                                <option\n                                  value=\"1\"\n                                  selected={item.status == 1 ? \"selected\" : false}\n                                >\n                                  approved\n                                </option>\n                                <option\n                                  value=\"1\"\n                                  selected={item.status == 2 ? \"selected\" : false}\n                                >\n                                  declined\n                                </option>\n                              </select>\n                            </td>\n                            <td>\n                              <i\n                                onClick={() => deleteProduct(item?.id)}\n                                className=\"mdi mdi-delete\"\n                              ></i>\n                            </td>\n                          </tr>\n                        );\n                      })}\n                </tbody>\n              </table>\n              <ReactPaginate\n                breakLabel=\"...\"\n                nextLabel=\"next >\"\n                className=\"client-list\"\n                onPageChange={handlePageClick}\n                pageRangeDisplayed={5}\n                pageCount={pageCount}\n                previousLabel=\"< previous\"\n                renderOnZeroPageCount={null}\n                forcePage={itemOffset}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div >\n  );\n};\n\nexport default QueryList;\n"],"sourceRoot":""}