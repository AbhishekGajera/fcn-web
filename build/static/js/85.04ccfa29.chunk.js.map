{"version":3,"sources":["app/IBO-components/CreateClients/index.js"],"names":["CreateClints","queryParams","queryString","parse","window","location","search","useState","clientlist","setClientlist","useCookies","cookies","setCookie","itemlist","setitemlist","branchlist","setBranchlist","productlist","setproductlist","contactno","phone","setPhone","isShow","setIsShow","toInputUppercase","e","target","value","toUpperCase","history","useHistory","useForm","mode","register","handleSubmit","formState","errors","strongRegex","isDirty","isValid","RegExp","strongaadharcode","getClientDetail","getConnectedById","id","data","items","response","message","toast","error","process","onSubmit","name","first_name","last_name","CreateUser","success","push","useEffect","list","branchList","productList","getBranchesClient","results","code","formData","JSON","stringify","refreshToken","localStorage","getItem","path","userLogout","finally","getIBOsClient","getProductsListClient","className","aria-label","href","onClick","event","preventDefault","user","role","aria-current","Group","Control","type","defaulValue","required","address","max","moment","format","dob","map","item","index","key","label","product","branch","ibo","pattern","email","style","float","marginTop","marginRight","onChange","password","selected","inputExtraProps","autoFocus","country","bankAccNo","onInput","bankIfscCode","aadhar_card_no","pan_card_no","placeholder","minAmount","maxAmount"],"mappings":"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","file":"static/js/85.04ccfa29.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { useCookies } from \"react-cookie\";\r\nimport { toast } from \"react-toastify\";\r\nimport { CreateUser, getBranchesClient, getIBOsClient, getConnect, getIBOs, userLogout, getProductsList, getProductsListClient, getConnectedById } from \"../../../utils/APIs\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport moment from 'moment';\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport queryString from \"query-string\";\r\nimport 'react-phone-input-2/lib/style.css'\r\n\r\n\r\nconst CreateClints = () => {\r\n  const queryParams = queryString.parse(window.location.search)\r\n  const [clientlist, setClientlist] = useState();\r\n  const [cookies, setCookie] = useCookies([\"user\"]);\r\n  const [itemlist, setitemlist] = useState([]);\r\n  const [branchlist, setBranchlist] = useState([]);\r\n  const [productlist, setproductlist] = useState([]);\r\n  const [phone, setPhone] = useState(clientlist?.contactno || '+91');\r\n  const [isShow, setIsShow] = useState(false);\r\n\r\n  const toInputUppercase = e => {\r\n    e.target.value = (\"\" + e.target.value).toUpperCase();\r\n  };\r\n  const history = useHistory()\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors, isDirty, isValid },\r\n  } = useForm({\r\n    mode: \"onChange\",\r\n  });\r\n  var strongRegexMo = new RegExp(\r\n    \"^\\\\s*(?:\\\\+?(\\\\d{1,3}))?[-. (]*(\\\\d{3})[-. )]*(\\\\d{3})[-. ]*(\\\\d{4})(?: *x(\\\\d+))?\\\\s*$\"\r\n  );\r\n  var strongRegex = new RegExp(\"^(?=.*[A-Za-z])(?=.*[0-9])(?=.{8,})\");\r\n\r\n  var strongRegexcode = new RegExp(\"^[A-Z]{4}0[A-Z0-9]{6}$\");\r\n\r\n  var strongaadharcode = new RegExp(\"^([0-9]){12}$\");\r\n\r\n  const handleOnChange = value => {\r\n    setPhone(value);\r\n  }\r\n\r\n  const getClientDetail = async () => {\r\n    try {\r\n      const items = await (\r\n        await getConnectedById(queryParams.id)\r\n      ).data;\r\n      setClientlist(items);\r\n    } catch (error) {\r\n      if (error?.response?.data?.message) {\r\n        toast.error(error.response.data.message);\r\n      } else {\r\n        toast.error(process.env.REACT_APP_ERROR_MESSAGE);\r\n      }\r\n    }\r\n  }\r\n\r\n  const onSubmit = async (data) => {\r\n    try {\r\n\r\n      data.contactno = phone;\r\n\r\n      data.name = data.first_name + ' ' + data.last_name;\r\n      await CreateUser(data)\r\n      toast.success(\"user created successfully\");\r\n      history.push('/clients/clientlist')\r\n    } catch (error) {\r\n      if (\r\n        error &&\r\n        error.response &&\r\n        error.response.data &&\r\n        error.response.data.message\r\n      ) {\r\n        toast.error(error.response.data.message);\r\n      } else {\r\n        toast.error(process.env.REACT_APP_ERROR_MESSAGE);\r\n      }\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    list();\r\n  }, []);\r\n  useEffect(() => {\r\n    if (queryParams.id) {\r\n      getClientDetail();\r\n    }\r\n    branchList();\r\n  }, []);\r\n  useEffect(() => {\r\n    productList();\r\n  }, []);\r\n\r\n  const list = async () => {\r\n    try {\r\n      const items = await (await getBranchesClient()).data;\r\n      setitemlist(items?.results);\r\n      // setPageCount(items?.totalPages);\r\n    } catch (error) {\r\n      if (error?.response?.data?.message) {\r\n        toast.error(error.response.data.message);\r\n      } else {\r\n        toast.error(process.env.REACT_APP_ERROR_MESSAGE);\r\n      }\r\n\r\n      if (error?.response?.data?.code === 401) {\r\n        const formData = JSON.stringify({\r\n          refreshToken: localStorage.getItem(\"refreshToken\"),\r\n        });\r\n        setCookie(\"user\", null, { path: \"/\" });\r\n        userLogout(formData).finally(() => {\r\n          history.push(\"/user-pages/login-1\");\r\n        });\r\n      }\r\n    }\r\n  };\r\n  const branchList = async () => {\r\n    try {\r\n      const items = await (await getIBOsClient()).data;\r\n      // console.log(\"itm\",items)\r\n      setBranchlist(items?.results);\r\n      // setPageCount(items?.totalPages);\r\n    } catch (error) {\r\n      if (error?.response?.data?.message) {\r\n        toast.error(error.response.data.message);\r\n      } else {\r\n        toast.error(process.env.REACT_APP_ERROR_MESSAGE);\r\n      }\r\n\r\n      if (error?.response?.data?.code === 401) {\r\n        const formData = JSON.stringify({\r\n          refreshToken: localStorage.getItem(\"refreshToken\"),\r\n        });\r\n        setCookie(\"user\", null, { path: \"/\" });\r\n        userLogout(formData).finally(() => {\r\n          history.push(\"/user-pages/login-1\");\r\n        });\r\n      }\r\n    }\r\n  };\r\n  const productList = async () => {\r\n    try {\r\n      const items = await (await getProductsListClient()).data;\r\n      // console.log(\"itm\", items)\r\n      setproductlist(items?.results);\r\n      // setPageCount(items?.totalPages);\r\n    } catch (error) {\r\n      if (error?.response?.data?.message) {\r\n        toast.error(error.response.data.message);\r\n      } else {\r\n        toast.error(process.env.REACT_APP_ERROR_MESSAGE);\r\n      }\r\n\r\n      if (error?.response?.data?.code === 401) {\r\n        const formData = JSON.stringify({\r\n          refreshToken: localStorage.getItem(\"refreshToken\"),\r\n        });\r\n        setCookie(\"user\", null, { path: \"/\" });\r\n        userLogout(formData).finally(() => {\r\n          history.push(\"/user-pages/login-1\");\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"page-header\">\r\n        <h3 className=\"page-title\">Clients / create Clients </h3>\r\n        <nav aria-label=\"breadcrumb\">\r\n          <ol className=\"breadcrumb\">\r\n            <li className=\"breadcrumb-item\">\r\n              <a href=\"!#\" onClick={(event) => event.preventDefault()}>\r\n                {cookies?.user?.role} Dashboard\r\n              </a>\r\n            </li>\r\n            <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n              Create clients\r\n            </li>\r\n          </ol>\r\n        </nav>\r\n      </div>\r\n      <div className=\"row auth\">\r\n        <div className=\"col-12 grid-margin\">\r\n          <div className=\"card\">\r\n            <div className=\"card-body\">\r\n              <form className=\"form-sample\" onSubmit={handleSubmit(onSubmit)}>\r\n                <p className=\"card-description\"> Personal info </p>\r\n                <div className=\"row\">\r\n                  <div className=\"col-md-6\">\r\n                    <Form.Group className=\"row\">\r\n                      <label className=\"col-sm-4 col-form-label\">First Name</label>\r\n                      <div className=\"col-sm-8\">\r\n                        <Form.Control\r\n                          type=\"text\"\r\n                          name=\"first_name\"\r\n                          defaulValue={clientlist ? clientlist.name : ''}\r\n                          {...register(\"first_name\", { required: true })}\r\n                        />\r\n                        {errors && errors.first_name && <p>first name is required field</p>}\r\n                      </div>\r\n                    </Form.Group>\r\n                  </div>\r\n                  <div className=\"col-md-6\">\r\n                    <Form.Group className=\"row\">\r\n                      <label className=\"col-sm-4 col-form-label\">Last Name</label>\r\n                      <div className=\"col-sm-8\">\r\n                        <Form.Control\r\n                          type=\"text\"\r\n                          name=\"last_name\"\r\n                          {...register(\"last_name\", { required: true })}\r\n                        />\r\n                        {errors && errors.last_name && <p>last name is required field</p>}\r\n                      </div>\r\n                    </Form.Group>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                  <div className=\"col-md-6\">\r\n                    <Form.Group className=\"row\">\r\n                      <label className=\"col-sm-4 col-form-label\">\r\n                        Address{\" \"}\r\n                      </label>\r\n                      <div className=\"col-sm-8\">\r\n                        <Form.Control\r\n                          type=\"text\"\r\n                          name=\"address\"\r\n                          {...register(\"address\", { required: true })}\r\n                        />\r\n                        {errors && errors.address && (\r\n                          <p>address is required field</p>\r\n                        )}\r\n                      </div>\r\n                    </Form.Group>\r\n                  </div>\r\n                  <div className=\"col-md-6\">\r\n                    <Form.Group className=\"row\">\r\n                      <label className=\"col-sm-3 col-form-label\">DOB</label>\r\n                      <div className=\"col-sm-9\">\r\n                        <Form.Control\r\n                          type=\"date\"\r\n                          name=\"dob\"\r\n                          max={moment().format(\"YYYY-MM-DD\")}\r\n                          {...register(\"dob\", { required: true })}\r\n                        />\r\n                        {errors && errors.dob && <p>DOB is required field</p>}\r\n                      </div>\r\n                    </Form.Group>\r\n                  </div>\r\n\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                  <div className=\"col-md-4\">\r\n                    <Form.Group className=\"row\">\r\n                      <label className=\"col-sm-4 col-form-label\">Product</label>\r\n                      <div className=\"col-sm-8\">\r\n\r\n                        <select\r\n                          className=\"form-control form-control-lg\"\r\n                          id=\"exampleFormControlSelect2\"\r\n                          name=\"product\"\r\n                          {...register(\"product\", {\r\n                            required: true,\r\n                          })}\r\n                        >\r\n                          <option value=''>--Select product--</option>\r\n                          {productlist.map((item, index) => (\r\n\r\n                            <option key={index} value={item?.id} label={item?.name}></option>\r\n                          ))}\r\n                        </select>\r\n                        {errors && errors.product && <p>Select product is required field</p>}\r\n                      </div>\r\n\r\n                    </Form.Group>\r\n                  </div>\r\n\r\n                  <div className=\"col-md-4\">\r\n                    <Form.Group className=\"row\">\r\n                      <label className=\"col-sm-4 col-form-label\">Branch</label>\r\n                      <div className=\"col-sm-8\">\r\n\r\n                        <select\r\n                          className=\"form-control form-control-lg\"\r\n                          id=\"exampleFormControlSelect2\"\r\n                          name=\"branch\"\r\n                          {...register(\"branch\", {\r\n                            required: true,\r\n                          })}\r\n                        >\r\n                          <option value=''>--Select branch--</option>\r\n                          {itemlist.map((item, index) => (\r\n                            <option key={index} value={item?.name} label={item?.name} ></option>\r\n                          ))}\r\n                        </select>\r\n                        {errors && errors.branch && <p>Select branch is required field</p>}\r\n                      </div>\r\n\r\n                    </Form.Group>\r\n                  </div>\r\n                  <div className=\"col-md-4\">\r\n                    <Form.Group className=\"row\">\r\n                      <label className=\"col-sm-3 col-form-label\">Ibo</label>\r\n                      <div className=\"col-sm-9\">\r\n\r\n                        <select\r\n                          className=\"form-control form-control-lg\"\r\n                          id=\"exampleFormControlSelect2\"\r\n                          name=\"IBO\"\r\n                          {...register(\"IBO\", {\r\n                            required: true,\r\n                          })}\r\n                        >\r\n                          <option value=''>--Select ibo--</option>\r\n                          {branchlist.map((item, index) => (\r\n                            <option key={index} value={item?.id} label={item?.name}></option>\r\n                          ))}\r\n\r\n\r\n                        </select>\r\n                        {errors && errors.ibo && <p>Select Ibo is required field</p>}\r\n                      </div>\r\n\r\n                    </Form.Group>\r\n                  </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                  <div className=\"col-md-6\">\r\n                    <Form.Group className=\"row\">\r\n                      <label className=\"col-sm-3 col-form-label\">Email</label>\r\n                      <div className=\"col-sm-9\">\r\n                        <Form.Control\r\n                          type=\"text\"\r\n                          name=\"email\"\r\n                          {...register(\"email\", {\r\n                            required: true,\r\n                            pattern: /^\\S+@\\S+$/i,\r\n                          })}\r\n                        />\r\n                        {errors &&\r\n                          errors.email &&\r\n                          errors.email.type === \"required\" && (\r\n                            <p>email is required field</p>\r\n                          )}\r\n                        {errors &&\r\n                          errors.email &&\r\n                          errors.email.type === \"pattern\" && (\r\n                            <p>invalid email formate</p>\r\n                          )}\r\n                      </div>\r\n                    </Form.Group>\r\n                  </div>\r\n                  <div className=\"col-md-6\">\r\n                    <Form.Group className=\"row\">\r\n                      <label className=\"col-sm-3 col-form-label\">\r\n                        Password\r\n                      </label>\r\n                      <div className=\"col-sm-9\">\r\n                        <Form.Control\r\n                          type={isShow ? \"text\" : \"password\"}\r\n                          name=\"password\"\r\n                          {...register(\"password\", {\r\n                            required: true,\r\n                            pattern: strongRegex,\r\n                          })}\r\n                        />\r\n\r\n                        <span className=\"d-flex\" style={{ float: 'right', marginTop: \"10px\" }} >\r\n                          <input style={{ marginRight: \"10px\" }} type=\"checkbox\" value={isShow} onChange={() => {\r\n                            if (isShow) {\r\n                              setIsShow(false)\r\n                            } else {\r\n                              setIsShow(true)\r\n                            }\r\n                          }} />\r\n                          show password\r\n                        </span>\r\n                        {errors &&\r\n                          errors.password &&\r\n                          errors.password.type === \"required\" && (\r\n                            <p>password is required field</p>\r\n                          )}\r\n                        {errors &&\r\n                          errors.password &&\r\n                          errors.password.type === \"pattern\" && (\r\n                            <p>\r\n                              password should have at least 8 characters , 1\r\n                              number and latter\r\n                            </p>\r\n                          )}\r\n                      </div>\r\n                    </Form.Group>\r\n                  </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                  <div className=\"col-md-6\">\r\n                    <Form.Group className=\"row\">\r\n                      <label className=\"col-sm-4 col-form-label\">Select Country</label>\r\n                      <div className=\"col-sm-8\">\r\n                        <select\r\n                          className=\"form-control form-control-lg\"\r\n                          id=\"exampleFormControlSelect2\"\r\n                          name=\"country\"\r\n                          {...register(\"country\", {\r\n                            required: true,\r\n                          })}\r\n                        >\r\n                          <option>Country</option>\r\n                          <option>United States of America</option>\r\n                          <option selected>India</option>\r\n                          <option>United Kingdom</option>\r\n                          <option>Germany</option>\r\n                          <option>Argentina</option>\r\n                        </select>\r\n                      </div>\r\n                    </Form.Group>\r\n                  </div>\r\n                  <div className=\"col-md-6\">\r\n                    <Form.Group className=\"row\">\r\n                      <label className=\"col-sm-4 col-form-label\">\r\n                        Contact\r\n                      </label>\r\n                      <div className=\"col-sm-8 contact_no\">\r\n                        <PhoneInput\r\n                          inputExtraProps={{\r\n                            name: \"contactno\",\r\n                            required: true,\r\n                            autoFocus: true\r\n                          }}\r\n                          country={\"US\"}\r\n                          value={phone}\r\n                          // value={clientlist? clientlist.contactno : phone}\r\n                          onChange={handleOnChange}\r\n                        />\r\n                      </div>\r\n                    </Form.Group>\r\n                  </div>\r\n\r\n                </div>\r\n                <div className=\"row\">\r\n                  <div className=\"col-md-6\">\r\n                    <Form.Group className=\"row\">\r\n                      <label className=\"col-sm-4 col-form-label\">\r\n                        Bank Account no\r\n                      </label>\r\n                      <div className=\"col-sm-8\">\r\n                        <Form.Control\r\n                          type=\"text\"\r\n                          name=\"bankAccNo\"\r\n                          {...register(\"bankAccNo\", { required: true })}\r\n                        />\r\n                        {errors && errors.bankAccNo && (\r\n                          <p>Bank Account number is required field</p>\r\n                        )}\r\n                      </div>\r\n                    </Form.Group>\r\n                  </div>\r\n                  <div className=\"col-md-6\">\r\n                    <Form.Group className=\"row\">\r\n                      <label className=\"col-sm-3 col-form-label\">\r\n                        IFSC code\r\n                      </label>\r\n                      <div className=\"col-sm-9\">\r\n                        <Form.Control\r\n                          type=\"text\"\r\n                          name=\"bankIfscCode\"\r\n                          onInput={toInputUppercase}\r\n                          {...register(\"bankIfscCode\", { required: true, pattern: strongRegex })}\r\n                        />\r\n                        {errors && errors.bankIfscCode &&\r\n                          errors.bankIfscCode.type === \"required\" && (\r\n                            <p>Bank IFSC number is required field</p>\r\n                          )}\r\n                        {errors &&\r\n                          errors.bankIfscCode &&\r\n                          errors.bankIfscCode.type === \"pattern\" && (\r\n                            <p>\r\n                              IFSC code should have Capital latter and Number\r\n                            </p>\r\n                          )}\r\n                      </div>\r\n                    </Form.Group>\r\n                  </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                  <div className=\"col-md-6\">\r\n                    <Form.Group className=\"row\">\r\n                      <label className=\"col-sm-4 col-form-label\">\r\n                        AadharCard Number\r\n                      </label>\r\n                      <div className=\"col-sm-8\">\r\n                        <Form.Control\r\n                          type=\"text\"\r\n                          name=\"aadhar_card_no\"\r\n                          {...register(\"aadhar_card_no\", { required: true, pattern: strongaadharcode })}\r\n                        />\r\n                        {errors && errors.aadhar_card_no &&\r\n                          errors.aadhar_card_no.type === \"required\" && (\r\n                            <p>Aadharcard number is required field</p>\r\n                          )}\r\n                        {errors &&\r\n                          errors.aadhar_card_no &&\r\n                          errors.aadhar_card_no.type === \"pattern\" && (\r\n                            <p>\r\n                              Aadharcard should have number\r\n                            </p>\r\n                          )}\r\n                      </div>\r\n                    </Form.Group>\r\n                  </div>\r\n                  <div className=\"col-md-6\">\r\n                    <Form.Group className=\"row\">\r\n                      <label className=\"col-sm-3 col-form-label\">\r\n                        PanCard Number\r\n                      </label>\r\n                      <div className=\"col-sm-9\">\r\n                        <Form.Control\r\n                          type=\"text\"\r\n                          name=\"pan_card_no\"\r\n                          onInput={toInputUppercase}\r\n                          {...register(\"pan_card_no\", { required: true })}\r\n                        />\r\n                        {errors && errors.pan_card_no && (\r\n                          <p>PanCard number is required field</p>\r\n                        )}\r\n                      </div>\r\n                    </Form.Group>\r\n                  </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                  <div className=\"col-md-6\">\r\n                    <Form.Group className=\"row\">\r\n                      <label className=\"col-sm-3 col-form-label\">\r\n                        Min Amount{\" \"}</label>\r\n\r\n                      <div className=\"col-sm-9\">\r\n                        <Form.Control\r\n                          id=\"minamount\"\r\n                          className=\"form-control\"\r\n                          type=\"number\"\r\n                          name=\"minAmount\"\r\n                          placeholder=\"minamount\"\r\n                          {...register(\"minAmount\", { required: true })}\r\n                        />\r\n                        {errors && errors.minAmount && (\r\n                          <p>Product minamount is required field</p>\r\n                        )}\r\n                      </div>\r\n                    </Form.Group>\r\n                  </div>\r\n                  <div className=\"col-md-6\">\r\n                    <Form.Group className=\"row\">\r\n                      <label className=\"col-sm-3 col-form-label\">\r\n                        Max Amount{\" \"}</label>\r\n\r\n                      <div className=\"col-sm-9\">\r\n                        <Form.Control\r\n                          id=\"maxamount\"\r\n                          className=\"form-control\"\r\n                          type=\"number\"\r\n                          name=\"maxAmount\"\r\n                          placeholder=\"maxamount\"\r\n                          {...register(\"maxAmount\", { required: true })}\r\n                        />\r\n                        {errors && errors.maxAmount && (\r\n                          <p>Product maxamount is required field</p>\r\n                        )}\r\n                      </div>\r\n                    </Form.Group>\r\n                  </div>\r\n                </div>\r\n                <div className=\"mt-3\">\r\n                  <button\r\n                    className=\"btn  btn-primary btn-lg font-weight-medium auth-form-btn\"\r\n                    type=\"submit\"\r\n                  >\r\n                    SUBMIT\r\n                  </button>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateClints;\r\n"],"sourceRoot":""}