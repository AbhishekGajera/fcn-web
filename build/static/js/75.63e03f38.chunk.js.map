{"version":3,"sources":["app/Admin-components/Video/FetchVideo.js"],"names":["FetchVideo","useState","pageCount","setPageCount","useUrl","itemOffset","setItemOffset","itemsPerPage","React","show","setShow","valueToEdit","setvalueToEdit","useCookies","cookies","setCookie","itemlist","setitemlist","isLoading","setIsLoading","history","useHistory","useEffect","list","useForm","mode","register","handleSubmit","reset","formState","errors","onSubmit","isDirty","isValid","data","target_id","id","updatedData","JSON","stringify","UpdateTargets","toast","success","autoClose","response","message","error","process","getVideo","items","results","totalPages","code","formData","refreshToken","localStorage","getItem","path","userLogout","finally","push","onHide","backdrop","keyboard","Header","closeButton","Title","Body","className","Group","Control","as","type","name","defaultValue","Description","required","placeholder","aria-label","href","onClick","event","preventDefault","user","role","aria-current","Fragment","map","item","index","key","title","uid","Swal","fire","text","icon","showCancelButton","cancelButtonColor","confirmButtonColor","confirmButtonText","cancelButtonText","then","result","value","deleteVideo","dismiss","DismissReason","cancel","videoURL","url","window","open","breakLabel","nextLabel","onPageChange","selected","pageRangeDisplayed","previousLabel","renderOnZeroPageCount","forcePage"],"mappings":"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","file":"static/js/75.63e03f38.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useCookies } from \"react-cookie\";\r\nimport ReactPaginate from \"react-paginate\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Form } from 'react-bootstrap';\r\nimport {\r\n    deleteVideo,\r\n    getVideo,\r\n    UpdateTargets,\r\n    userLogout\r\n} from \"../../../utils/APIs\";\r\nimport Swal from \"sweetalert2\";\r\nimport Spinner from \"../../shared/Spinner\";\r\nimport { useUrl } from \"../../../utils/Functions/useUrl\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst FetchVideo = () => {\r\n\r\n    const [pageCount, setPageCount] = useState(0);\r\n    const [itemOffset, setItemOffset] = useUrl(\"page\");\r\n    const [itemsPerPage] = useState(20);\r\n    const [show, setShow] = React.useState(false);\r\n    const [valueToEdit, setvalueToEdit] = useState({});\r\n    const [cookies, setCookie] = useCookies([\"user\"]);\r\n    const [itemlist, setitemlist] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        list();\r\n    }, [itemOffset, itemsPerPage]);\r\n\r\n    // Invoke when user click to request another page.\r\n    const handlePageClick = (event) => {\r\n        setItemOffset(event.selected);\r\n    };\r\n\r\n    const { register, handleSubmit, reset, formState: { errors, isDirty, isValid } } = useForm({\r\n        mode: \"onChange\"\r\n    });\r\n\r\n    const handleClose = () => {\r\n        setShow(false)\r\n        setvalueToEdit({})\r\n        reset()\r\n    };\r\n\r\n    const handleShow = (value) => {\r\n        reset()\r\n        setvalueToEdit(value)\r\n        setShow(true);\r\n    }\r\n\r\n    const deleteData = (uid) => {\r\n        Swal.fire({\r\n            title: \"Are you sure?\",\r\n            text: \"You will not be able to recover this imaginary file!\",\r\n            icon: \"warning\",\r\n            showCancelButton: true,\r\n            cancelButtonColor: \"#DD6B55\",\r\n            confirmButtonColor: \"#DD6B55\",\r\n            confirmButtonText: \"Yes, delete it!\",\r\n            cancelButtonText: \"No, keep it\",\r\n        }).then((result) => {\r\n            if (result.value) {\r\n                return (\r\n                    deleteVideo(uid).finally(() => list()),\r\n                    Swal.fire(\r\n                        \"Deleted!\",\r\n                        \"Your imaginary file has been deleted.\",\r\n                        \"success\"\r\n                    )\r\n                );\r\n            } else if (result.dismiss === Swal.DismissReason.cancel) {\r\n                Swal.fire(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\r\n            }\r\n        });\r\n    };\r\n\r\n    const onSubmit = async (data) => {\r\n        try {\r\n            data.target_id = valueToEdit?.id;\r\n            const updatedData = JSON.stringify(data)\r\n            await UpdateTargets(updatedData)\r\n            toast.success('Target updated Successfully', {\r\n                autoClose: 3000\r\n            })\r\n            list()\r\n        } catch (error) {\r\n            if (\r\n                error &&\r\n                error.response &&\r\n                error.response.data &&\r\n                error.response.data.message\r\n            ) {\r\n                toast.error(error.response.data.message);\r\n            } else {\r\n                toast.error(process.env.REACT_APP_ERROR_MESSAGE);\r\n            }\r\n        } finally {\r\n            setShow(false)\r\n        }\r\n    };\r\n\r\n    const list = async () => {\r\n        setIsLoading(true);\r\n        try {\r\n            const items = await (\r\n                await getVideo()\r\n            ).data;\r\n            setitemlist(items?.results);\r\n            setPageCount(items?.totalPages);\r\n            setIsLoading(false);\r\n        } catch (error) {\r\n            if (error?.response?.data?.message) {\r\n                toast.error(error.response.data.message);\r\n            } else {\r\n                toast.error(process.env.REACT_APP_ERROR_MESSAGE);\r\n            }\r\n\r\n            if (error?.response?.data?.code === 401) {\r\n                const formData = JSON.stringify({\r\n                    refreshToken: localStorage.getItem(\"refreshToken\"),\r\n                });\r\n                setCookie(\"user\", null, { path: \"/\" });\r\n                userLogout(formData).finally(() => {\r\n                    history.push(\"/user-pages/login-1\");\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    const onClickDownload = (videoURL) => {\r\n        window.open(videoURL, '_blank');\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Modal\r\n                show={show}\r\n                onHide={handleClose}\r\n                backdrop=\"static\"\r\n                keyboard={false}\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Update Target</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <div className=\"row auth\">\r\n                        <div className=\"col-12 grid-margin\">\r\n                            <div className=\"card\">\r\n                                <div className=\"card-body\">\r\n                                    <form className=\"form-sample\" onSubmit={handleSubmit(onSubmit)}>\r\n                                        <p className=\"card-description\"> Update Target </p>\r\n                                        <div className=\"row\">\r\n                                            <div className=\"col-md-12\">\r\n                                                <Form.Group className=\"row\">\r\n                                                    <label className=\"col-sm-3 col-form-label\">\r\n                                                        Description\r\n                                                    </label>\r\n                                                    <div className=\"col-sm-9\">\r\n                                                        <Form.Control\r\n                                                            as=\"textarea\"\r\n                                                            type=\"text\"\r\n                                                            name=\"Description\"\r\n                                                            defaultValue={valueToEdit.Description}\r\n                                                            {...register(\"Description\", { required: true })}\r\n                                                            placeholder=\"Description\"\r\n                                                        />\r\n                                                        {errors && errors.Description && (\r\n                                                            <p>Description is required field</p>\r\n                                                        )}\r\n                                                    </div>\r\n                                                </Form.Group>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div className=\"row\">\r\n                                            <div className=\"col-md-12\">\r\n\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div className=\"mt-3\">\r\n                                            <button\r\n                                                className=\"btn  btn-primary btn-lg font-weight-medium auth-form-btn\"\r\n                                                type=\"submit\"\r\n                                            >\r\n                                                UPDATE\r\n                                            </button>\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </Modal.Body>\r\n\r\n\r\n            </Modal>\r\n            <div className=\"page-header\">\r\n                <h3 className=\"page-title\">Video / Show Video </h3>\r\n                <nav aria-label=\"breadcrumb\">\r\n                    <ol className=\"breadcrumb\">\r\n                        <li className=\"breadcrumb-item\">\r\n                            <a href=\"!#\" onClick={(event) => event.preventDefault()}>\r\n                                {cookies?.user?.role} Dashboard\r\n                            </a>\r\n                        </li>\r\n                        <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n                            Show Video\r\n                        </li>\r\n                    </ol>\r\n                </nav>\r\n            </div>\r\n            <div className=\"col-lg-12 grid-margin stretch-card p0\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                        <h4 className=\"card-title\">Video list</h4>\r\n\r\n                        <div className=\"table-responsive\">\r\n                            <table className=\"table table-striped\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th> Type </th>\r\n                                        <th> Title </th>\r\n                                        <th> Delete </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {isLoading ? (\r\n                                        <React.Fragment>\r\n                                            <Spinner />\r\n                                        </React.Fragment>\r\n                                    ) : (\r\n                                        itemlist?.map((item, index) => {\r\n                                            return (\r\n                                                <tr key={index}>\r\n                                                    <td>{item?.type}</td>\r\n                                                    <td>{item?.title}</td>\r\n                                                    <td>\r\n                                                        <i\r\n                                                            onClick={() => deleteData(item?.id)}\r\n                                                            className=\"mdi mdi-delete\"\r\n                                                        ></i>\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <button\r\n                                                            type=\"button\"\r\n                                                            className=\"btn btn-gradient-primary btn-sm \"\r\n                                                            onClick={() => onClickDownload(item?.url)}\r\n                                                        >\r\n                                                            Download Video\r\n                                                        </button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            );\r\n                                        })\r\n                                    )}\r\n                                </tbody>\r\n                            </table>\r\n                            <ReactPaginate\r\n                                breakLabel=\"...\"\r\n                                nextLabel=\"next >\"\r\n                                className=\"client-list\"\r\n                                onPageChange={handlePageClick}\r\n                                pageRangeDisplayed={5}\r\n                                pageCount={pageCount}\r\n                                previousLabel=\"< previous\"\r\n                                renderOnZeroPageCount={null}\r\n                                forcePage={itemOffset}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FetchVideo;\r\n"],"sourceRoot":""}