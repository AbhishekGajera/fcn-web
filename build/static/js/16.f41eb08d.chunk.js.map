{"version":3,"sources":["utils/Functions/useDebounce.js","utils/Functions/commonOptions.js","utils/Functions/passwordGenerator.js","app/Admin-components/IboList/index.js"],"names":["useDebounce","value","delay","useState","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","statusOption","label","roleOption","roleOptionForAmin","timeOption","Date","setDate","getDate","optionForExpenceType","optionForCostCategory","formateStatus","status","formateStatusForTargets","password_generator","len","length","string","password","character","entity1","Math","ceil","random","entity2","hold","charAt","toUpperCase","split","sort","join","substr","IboList","useCookies","cookies","setCookie","itemlist","setitemlist","history","useHistory","searchTerm","setSearchTerm","isLoading","setIsLoading","React","showPerfomer","setShowPerfomer","pageCount","setPageCount","itemOffset","setItemOffset","itemsPerPage","show","setShow","valueToEdit","setvalueToEdit","updateStatus","setupdateStatus","updatePerfomence","setupdatePerfomence","branchList","setbranchList","selectedBranch","setselectedBranch","branchUpdate","setbranchUpdate","debouncedSearchTerm","useForm","mode","register","handleSubmit","reset","formState","errors","strongRegexMo","isDirty","isValid","RegExp","handleClose","onSubmit","data","updatedData","JSON","stringify","updateProfile","id","toast","success","autoClose","list","response","message","error","process","code","formData","refreshToken","localStorage","getItem","path","userLogout","finally","push","generatePassword","randomPassword","newPassword","getBranchList","getBranches","items","results","onPerformanceSubmit","perfomance","getIBOs","totalPages","csvreport","headers","key","filename","onHide","backdrop","keyboard","Header","closeButton","Title","Body","className","Group","name","onChange","e","target","selected","type","onClick","Control","defaultValue","required","address","contactno","pattern","map","i","email","role","branch","aria-label","href","event","preventDefault","user","aria-current","action","placeholder","fileName","wb","Sheets","XLSX","json_to_sheet","SheetNames","excelBuffer","bookType","Blob","FileSaver","exportToCSV","includes","item","Id","uid","Swal","fire","title","text","icon","showCancelButton","cancelButtonColor","confirmButtonColor","confirmButtonText","cancelButtonText","then","result","deleteUsr","dismiss","DismissReason","cancel","breakLabel","nextLabel","onPageChange","window","scrollTo","pageRangeDisplayed","previousLabel","renderOnZeroPageCount","forcePage"],"mappings":";oLAGaA,EAAc,SAACC,EAAOC,GAE/B,MAA4CC,mBAASF,GAArD,mBAAOG,EAAP,KAAuBC,EAAvB,KAgBA,OAfAC,qBACE,WAEE,IAAMC,EAAUC,YAAW,WACzBH,EAAkBJ,KACjBC,GAIH,OAAO,WACLO,aAAaF,MAGjB,CAACN,EAAOC,IAEHE,I,iCCrBX,gRAAO,IAAMM,EAAe,CACxB,CAAET,MAAQ,EAAGU,MAAQ,UACrB,CAAEV,MAAQ,EAAGU,MAAQ,aACrB,CAAEV,MAAQ,EAAGU,MAAQ,eAGZC,EAAa,CACtB,CAAEX,MAAQ,OAAQU,MAAQ,QAC1B,CAAEV,MAAQ,QAASU,MAAQ,SAC3B,CAAEV,MAAQ,MAAOU,MAAQ,OACzB,CAAEV,MAAQ,SAAUU,MAAQ,WAGnBE,EAAoB,CAC7B,CAAEZ,MAAQ,MAAOU,MAAQ,OACzB,CAAEV,MAAQ,SAAUU,MAAQ,WAGnBG,EAAa,CACtB,CAAEb,OAAQ,IAAIc,MAAOC,SAAQ,IAAID,MAAOE,UAAY,GAAIN,MAAQ,UAChE,CAAEV,OAAQ,IAAIc,MAAOC,SAAQ,IAAID,MAAOE,UAAY,IAAKN,MAAQ,WACjE,CAAEV,OAAQ,IAAIc,MAAOC,SAAQ,IAAID,MAAOE,UAAY,IAAKN,MAAQ,WACjE,CAAEV,OAAQ,IAAIc,MAAOC,SAAQ,IAAID,MAAOE,UAAY,KAAMN,MAAQ,WAClE,CAAEV,OAAQ,IAAIc,MAAOC,SAAQ,IAAID,MAAOE,UAAY,KAAMN,MAAQ,WAGzDO,EAAuB,CAChC,CAAEjB,MAAQ,iBAAkBU,MAAQ,kBACpC,CAAEV,MAAQ,mBAAoBU,MAAQ,oBACtC,CAAEV,MAAQ,wBAAyBU,MAAQ,yBAC3C,CAAEV,MAAQ,gBAAiBU,MAAQ,kBAG1BQ,EAAwB,CACjC,CAAElB,MAAQ,SAAUU,MAAQ,UAC5B,CAAEV,MAAQ,OAAQU,MAAQ,QAC1B,CAAEV,MAAQ,OAAQU,MAAQ,QAC1B,CAAEV,MAAQ,MAAOU,MAAQ,OACzB,CAAEV,MAAQ,YAAaU,MAAQ,aAC/B,CAAEV,MAAQ,OAAQU,MAAQ,QAC1B,CAAEV,MAAQ,WAAYU,MAAQ,YAC9B,CAAEV,MAAQ,cAAeU,MAAQ,eACjC,CAAEV,MAAQ,mBAAoBU,MAAQ,oBACtC,CAAEV,MAAQ,WAAYU,MAAQ,YAC9B,CAAEV,MAAQ,SAAUU,MAAQ,UAC5B,CAAEV,MAAQ,mBAAoBU,MAAQ,oBACtC,CAAEV,MAAQ,YAAaU,MAAQ,aAC/B,CAAEV,MAAQ,6BAA8BU,MAAQ,8BAChD,CAAEV,MAAQ,aAAcU,MAAQ,cAChC,CAAEV,MAAQ,gBAAiBU,MAAQ,iBACnC,CAAEV,MAAQ,oBAAqBU,MAAQ,qBACvC,CAAEV,MAAQ,eAAgBU,MAAQ,gBAClC,CAAEV,MAAQ,gBAAiBU,MAAQ,iBACnC,CAAEV,MAAQ,mCAAoCU,MAAQ,qCAG7CS,EAAgB,SAACC,GAC1B,QAASA,GACL,KAAM,EACF,MAAO,SACX,KAAM,EACF,MAAO,YACX,KAAM,EACF,MAAO,aACX,QACI,MAAO,WAINC,EAA0B,SAACD,GACpC,QAASA,GACL,KAAM,EACF,MAAO,UACX,KAAM,EACF,MAAO,WACX,KAAM,EACF,MAAO,YACX,KAAM,EACF,MAAO,YACX,QACI,MAAO,e,iCChFnB,kCAAO,IAAME,EAAqB,SAAEC,GAOhC,IANA,IAAIC,EAAUD,GAAY,GACtBE,EAAS,6BAETC,EAAW,GACXC,EAAY,GAETD,EAASF,OAAOA,GAAS,CAC7B,IAAII,EAAUC,KAAKC,KAAKL,EAAOD,OAASK,KAAKE,SAASF,KAAKE,UACvDC,EAAUH,KAAKC,KANR,aAMqBN,OAASK,KAAKE,SAASF,KAAKE,UACxDE,EAAOR,EAAOS,OAAQN,GAEzBD,GADAM,EAAQP,EAASF,OAAO,GAAG,EAAIS,EAAKE,cAAgBF,EAGpDP,EADAC,GAVU,aAUWO,OAAQF,GAIjC,OADAN,EAASA,EAASU,MAAM,IAAIC,MAAK,WAAW,MAAO,GAAIR,KAAKE,YAAWO,KAAK,KAC5DC,OAAO,EAAEhB,K,+gNCowBdiB,UA3vBC,WAAO,IAAD,IACpB,EAA6BC,YAAW,CAAC,SAAzC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAgCzC,mBAAS,IAAzC,mBAAO0C,EAAP,KAAiBC,EAAjB,KACMC,EAAUC,cAChB,EAAoC7C,mBAAS,IAA7C,mBAAO8C,EAAP,KAAmBC,EAAnB,KACA,EAAkC/C,oBAAS,GAA3C,mBAAOgD,EAAP,KAAkBC,EAAlB,KACA,EAAwCC,IAAMlD,UAAS,GAAvD,mBAAOmD,EAAP,KAAqBC,EAArB,KAIA,EAAkCpD,mBAAS,GAA3C,mBAAOqD,EAAP,KAAkBC,EAAlB,KAGA,EAAoCtD,mBAAS,GAA7C,mBAAOuD,EAAP,KAAmBC,EAAnB,KACA,EAAuBxD,mBAAS,IAAzByD,EAAP,oBACA,GAAwBP,IAAMlD,UAAS,GAAvC,qBAAO0D,GAAP,MAAaC,GAAb,MACA,GAAsC3D,mBAAS,IAA/C,qBAAO4D,GAAP,MAAoBC,GAApB,MACA,GAAwC7D,mBAAS,GAAjD,qBAAO8D,GAAP,MAAqBC,GAArB,MACA,GAAgD/D,mBAAS,GAAzD,qBAAOgE,GAAP,MAAyBC,GAAzB,MACA,GAAoCjE,mBAAS,IAA7C,qBAAOkE,GAAP,MAAmBC,GAAnB,MACA,GAA4CnE,mBAAS,IAArD,qBAAOoE,GAAP,MAAuBC,GAAvB,MACA,GAAwCrE,mBAAS,IAAjD,qBAAOsE,GAAP,MAAqBC,GAArB,MACMC,GAAsB3E,YAAYiD,EAAY,KAyBpD,GAKI2B,YAAQ,CACVC,KAAM,aALNC,GADF,GACEA,SACAC,GAFF,GAEEA,aACAC,GAHF,GAGEA,MAHF,MAIEC,UAAaC,GAJf,GAIeA,OAIXC,IARJ,GAIuBC,QAJvB,GAIgCC,QAIZ,IAAIC,OACtB,4FAGIC,GAAc,WAClBzB,IAAQ,GACRE,GAAe,IACfE,GAAgB,GAChBc,MAaIQ,GAAQ,uCAAG,WAAOC,GAAP,wFACfA,EAAKpE,OAAS4C,GACQ,KAAlBwB,EAAK9D,iBACA8D,EAAK9D,SAHC,SAMP+D,EAAcC,KAAKC,UAAUH,GANtB,SAOPI,aAAcH,EAAD,OAAc3B,SAAd,IAAcA,QAAd,EAAcA,GAAa+B,IAPjC,OAQbC,IAAMC,QAAQ,4BAA6B,CACzCC,UAAW,MAEbC,KAXa,mDAab,sCAAI,KAAOC,gBAAX,iBAAI,EAAiBV,YAArB,aAAI,EAAuBW,SACzBL,IAAMM,MAAM,KAAMF,SAASV,KAAKW,SAEhCL,IAAMM,MAAMC,wFAGsB,OAAhC,2CAAOH,gBAAP,mBAAiBV,YAAjB,eAAuBc,QACnBC,EAAWb,KAAKC,UAAU,CAC9Ba,aAAcC,aAAaC,QAAQ,kBAErC/D,EAAU,OAAQ,KAAM,CAAEgE,KAAM,MAChCC,aAAWL,GAAUM,SAAQ,WAC3B/D,EAAQgE,KAAK,2BAzBJ,yBA6BbjD,IAAQ,GA7BK,6EAAH,sDAiCdxD,qBAAU,WACR4F,OACC,CAACxC,EAAYE,IAChB,IAAMoD,GAAgB,uCAAG,WAAOlB,GAAP,gFACjBmB,EAAiB1F,cACjB2F,EAAcvB,KAAKC,UAAU,CACjCjE,SAAUsF,IAHW,kBAQfpB,aAAcqB,EAAapB,GARZ,OASrBC,IAAMC,QAAQ,+DAAgE,CAAEC,UAAW,MATtE,gDAWrBF,IAAMM,MAAM,sDAXS,yDAAH,sDAsBtB/F,qBAAU,WACR4F,OACC,CAACxC,EAAYE,EAAcW,KAE9BjE,qBAAU,WACR4F,OACC,CAACvB,KAEJrE,qBAAU,WACR6G,OACC,IAEH,IAAMA,GAAa,uCAAG,oGACOC,YAAY,IAAM,EAAG,GAAI,UADhC,8BAC2C3B,KAD3C,OACd4B,EADc,OAEpB/C,GAAa,OAAC+C,QAAD,IAACA,OAAD,EAACA,EAAOC,SAFD,2CAAH,qDA+BbC,GAAmB,uCAAG,8GAElB7B,EAAcC,KAAKC,UAAU,CAAE4B,WAAYrD,KAFzB,SAGlB0B,aAAcH,EAAD,OAAc3B,SAAd,IAAcA,QAAd,EAAcA,GAAa+B,IAHtB,OAIxBC,IAAMC,QAAQ,8BAA+B,CAC3CC,UAAW,MAEbC,KAPwB,iDASxB,sCAAI,KAAOC,gBAAX,iBAAI,EAAiBV,YAArB,aAAI,EAAuBW,SACzBL,IAAMM,MAAM,KAAMF,SAASV,KAAKW,SAEhCL,IAAMM,MAAMC,wFAGsB,OAAhC,2CAAOH,gBAAP,mBAAiBV,YAAjB,eAAuBc,QACnBC,EAAWb,KAAKC,UAAU,CAC9Ba,aAAcC,aAAaC,QAAQ,kBAErC/D,EAAU,OAAQ,KAAM,CAAEgE,KAAM,MAChCC,aAAWL,GAAUM,SAAQ,WAC3B/D,EAAQgE,KAAK,2BArBO,yBAyBxBxD,GAAgB,GAzBQ,4EAAH,qDA6BnB2C,GAAI,uCAAG,qGACX9C,GAAa,GADF,kBAGkBqE,aAAQ7D,GAAeF,EAAa,EAAGT,EAAYsB,IAHrE,8BAGsFkB,KAHtF,OAGH4B,EAHG,OAITvE,EAAW,OAACuE,QAAD,IAACA,OAAD,EAACA,EAAOC,SACnB7D,EAAY,OAAC4D,QAAD,IAACA,OAAD,EAACA,EAAOK,YALX,mDAOT,sCAAI,KAAOvB,gBAAX,iBAAI,EAAiBV,YAArB,aAAI,EAAuBW,SACzBL,IAAMM,MAAM,KAAMF,SAASV,KAAKW,SAEhCL,IAAMM,MAAMC,wFAGsB,OAAhC,2CAAOH,gBAAP,mBAAiBV,YAAjB,eAAuBc,QACnBC,EAAWb,KAAKC,UAAU,CAC9Ba,aAAcC,aAAaC,QAAQ,kBAErC/D,EAAU,OAAQ,KAAM,CAAEgE,KAAM,MAChCC,aAAWL,GAAUM,SAAQ,WAC3B/D,EAAQgE,KAAK,2BAnBR,QAuBX3D,GAAa,GAvBF,0DAAH,qDA0DJuE,GAAY,CAChBlC,KAAM5C,EACN+E,QAnBc,CACd,CAAEjH,MAAO,OAAQkH,IAAK,QACtB,CAAElH,MAAO,aAAckH,IAAK,aAC5B,CAAElH,MAAO,SAAUkH,IAAK,UACxB,CAAElH,MAAO,MAAOkH,IAAK,YACrB,CAAElH,MAAO,QAASkH,IAAK,SACvB,CAAElH,MAAO,SAAUkH,IAAK,UACxB,CAAElH,MAAO,MAAOkH,IAAK,OACrB,CAAElH,MAAO,OAAQkH,IAAK,QACtB,CAAElH,MAAO,SAAUkH,IAAK,UACxB,CAAElH,MAAO,kBAAmBkH,IAAK,aACjC,CAAElH,MAAO,iBAAkBkH,IAAK,gBAChC,CAAElH,MAAO,qBAAsBkH,IAAK,oBACpC,CAAElH,MAAO,UAAWkH,IAAK,YAOzBC,SAAU,4BAIZ,OACE,6BACE,kBAAC,IAAD,CACEjE,KAAMP,EACNyE,OAAQxC,GACRyC,SAAS,SACTC,UAAU,GAEV,kBAAC,IAAMC,OAAP,CAAcC,aAAW,GACvB,kBAAC,IAAMC,MAAP,2BAEF,kBAAC,IAAMC,KAAP,KACE,yBAAKC,UAAU,YACb,yBAAKA,UAAU,sBACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,0BACEA,UAAU,eAEV,uBAAGA,UAAU,oBAAb,uBACA,yBAAKA,UAAU,OACb,yBAAKA,UAAU,aACb,kBAAC,IAAKC,MAAN,CAAYD,UAAU,OACpB,2BAAOA,UAAU,2BAAjB,mBAGA,yBAAKA,UAAU,YACb,4BACEA,UAAU,+BACVxC,GAAG,4BACH0C,KAAK,aACLC,SA5QD,SAACC,GAAO,IAAD,EAChCtE,KAAoB,OAACsE,QAAD,IAACA,GAAD,UAACA,EAAGC,cAAJ,aAAC,EAAW1I,QAAS,KA6Qf,4BAAQA,MAAM,IAAI2I,SAAsC,KAAjB,OAAX7E,SAAW,IAAXA,QAAA,EAAAA,GAAayD,aAAzC,KACA,4BAAQvH,MAAM,IAAI2I,SAAsC,KAAjB,OAAX7E,SAAW,IAAXA,QAAA,EAAAA,GAAayD,aAAzC,KACA,4BAAQvH,MAAM,IAAI2I,SAAsC,KAAjB,OAAX7E,SAAW,IAAXA,QAAA,EAAAA,GAAayD,aAAzC,UAMV,yBAAKc,UAAU,QACb,4BACEA,UAAU,2DACVO,KAAK,SACLC,QAASvB,IAHX,6BAehB,kBAAC,IAAD,CACE1D,KAAMA,GACNkE,OAAQxC,GACRyC,SAAS,SACTC,UAAU,GAEV,kBAAC,IAAMC,OAAP,CAAcC,aAAW,GACvB,kBAAC,IAAMC,MAAP,oBAEF,kBAAC,IAAMC,KAAP,KACE,yBAAKC,UAAU,YACb,yBAAKA,UAAU,sBACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,0BACEA,UAAU,cACV9C,SAAUT,GAAaS,KAEvB,uBAAG8C,UAAU,oBAAb,gBACA,yBAAKA,UAAU,OACb,yBAAKA,UAAU,aACb,kBAAC,IAAKC,MAAN,CAAYD,UAAU,OACpB,2BAAOA,UAAU,2BAAjB,QAGA,yBAAKA,UAAU,YACb,kBAAC,IAAKS,QAAN,eACEF,KAAK,OACLL,KAAK,OACLQ,aAAcjF,GAAYyE,MACtB1D,GAAS,OAAQ,CAAEmE,UAAU,MAElC/D,IAAUA,GAAOsD,MAChB,yDAQV,yBAAKF,UAAU,OACb,yBAAKA,UAAU,aACb,kBAAC,IAAKC,MAAN,CAAYD,UAAU,OACpB,2BAAOA,UAAU,2BAAjB,UACU,KAEV,yBAAKA,UAAU,aACb,kBAAC,IAAKS,QAAN,eACEF,KAAK,OACLL,KAAK,WACD1D,GAAS,UAAW,CAAEmE,UAAU,MAErC/D,IAAUA,GAAOgE,SAChB,4DAOV,yBAAKZ,UAAU,OACb,yBAAKA,UAAU,aACb,kBAAC,IAAKC,MAAN,CAAYD,UAAU,OACpB,2BAAOA,UAAU,2BAAjB,cAGA,yBAAKA,UAAU,uBACb,kBAAC,IAAKS,QAAN,eACEF,KAAK,OACLL,KAAK,YACLQ,aAAcjF,GAAYoF,WACtBrE,GAAS,YAAa,CACxBmE,UAAU,EACVG,QAASjE,OAGZD,IACCA,GAAOiE,WACmB,aAA1BjE,GAAOiE,UAAUN,MACf,+DAEH3D,IACCA,GAAOiE,WACmB,YAA1BjE,GAAOiE,UAAUN,MACf,gFAQZ,yBAAKP,UAAU,OACb,yBAAKA,UAAU,aACb,kBAAC,IAAKC,MAAN,CAAYD,UAAU,OACpB,2BAAOA,UAAU,2BAAjB,iBAGA,yBAAKA,UAAU,YACb,4BACEA,UAAU,+BACVxC,GAAG,4BACH0C,KAAK,SACLC,SAxZC,SAACC,GAAO,IAAD,EAClChE,GAAe,OAACgE,QAAD,IAACA,GAAD,UAACA,EAAGC,cAAJ,aAAC,EAAW1I,SAmZH,OAMGoE,SANH,IAMGA,QANH,EAMGA,GAAYgF,KAAI,SAACC,GAChB,OACE,oCACE,4BACEV,SAAUU,EAAEd,OAAS/D,GACrBxE,MAAOqJ,EAAEd,MAERc,EAAEd,eAUrB,yBAAKF,UAAU,OACb,yBAAKA,UAAU,aACb,kBAAC,IAAKC,MAAN,CAAYD,UAAU,OACpB,2BAAOA,UAAU,2BAAjB,SAGA,yBAAKA,UAAU,YACb,kBAAC,IAAKS,QAAN,eACEF,KAAK,OACLL,KAAK,QACLQ,aAAcjF,GAAYwF,OACtBzE,GAAS,QAAS,CACpBmE,UAAU,EACVG,QAAS,iBAGZlE,IACCA,GAAOqE,OACe,aAAtBrE,GAAOqE,MAAMV,MACX,sDAEH3D,IACCA,GAAOqE,OACe,YAAtBrE,GAAOqE,MAAMV,MACX,wDAOZ,yBAAKP,UAAU,OACb,yBAAKA,UAAU,aACb,kBAAC,IAAKC,MAAN,CAAYD,UAAU,OACpB,2BAAOA,UAAU,2BAAjB,UAGA,yBAAKA,UAAU,YACb,4BACEA,UAAU,+BACVxC,GAAG,4BACH0C,KAAK,SACLC,SAraD,SAACC,GAAO,IAAD,EAChCxE,KAAgB,OAACwE,QAAD,IAACA,GAAD,UAACA,EAAGC,cAAJ,aAAC,EAAW1I,QAAS,KAgab,OAMGS,UANH,IAMGA,SANH,EAMGA,IAAc2I,KAAI,SAACC,GAClB,OACE,4BACErJ,MAAK,OAAEqJ,QAAF,IAAEA,OAAF,EAAEA,EAAGrJ,MACV2I,UAAW3E,OAAiB,OAACqF,QAAD,IAACA,OAAD,EAACA,EAAGrJ,QAFlC,OAIGqJ,QAJH,IAIGA,OAJH,EAIGA,EAAG3I,eAUpB,yBAAK2H,UAAU,OACb,yBAAKA,UAAU,aACb,kBAAC,IAAKC,MAAN,CAAYD,UAAU,OACpB,2BAAOA,UAAU,2BAAjB,QAGA,yBAAKA,UAAU,YACb,kBAAC,IAAKS,QAAN,eACEF,KAAK,OACLG,aAAcjF,GAAYyF,KAC1BhB,KAAK,QACD1D,GAAS,OAAQ,CAAEmE,UAAU,MAElC/D,IAAUA,GAAOuE,QAChB,yDAOV,yBAAKnB,UAAU,OACb,yBAAKA,UAAU,aACb,kBAAC,IAAKC,MAAN,CAAYD,UAAU,OACpB,2BAAOA,UAAU,2BAAjB,YAGA,yBAAKA,UAAU,YACb,kBAAC,IAAKS,QAAN,eACEF,KAAK,WACLL,KAAK,YACD1D,GAAS,kBAOvB,yBAAKwD,UAAU,QACb,4BACEA,UAAU,2DACVO,KAAK,UAFP,kBAchB,yBAAKP,UAAU,eACb,wBAAIA,UAAU,cAAd,qBACA,yBAAKoB,aAAW,cACd,wBAAIpB,UAAU,cACZ,wBAAIA,UAAU,mBACZ,uBAAGqB,KAAK,KAAKb,QAAS,SAACc,GAAD,OAAWA,EAAMC,mBAAvC,OACGlH,QADH,IACGA,GADH,UACGA,EAASmH,YADZ,aACG,EAAeN,KADlB,eAIF,wBAAIlB,UAAU,yBAAyByB,eAAa,QAApD,gBAMN,yBAAKzB,UAAU,yCACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YACb,kBAAC,IAAKC,MAAN,CAAYD,UAAU,OACpB,2BAAOA,UAAU,2BAAjB,iBAGA,yBAAKA,UAAU,YACb,4BACEA,UAAU,+BACVxC,GAAG,4BACH0C,KAAK,SACLC,SAviBU,SAACC,GAC7B/E,EAAc,GACda,GAAkBkE,EAAEC,OAAO1I,SAuiBT,4BAAQ2I,SAAU,KAAOrE,GAAgBtE,MAAO,IAAhD,gBANF,OASGoE,SATH,IASGA,QATH,EASGA,GAAYgF,KAAI,SAACC,GAChB,OACE,oCACE,4BACEV,SAAUU,EAAEd,OAASjE,GACrBtE,MAAOqJ,EAAEd,MAERc,EAAEd,cAUnB,yBAAKF,UAAU,YACb,yBAAKA,UAAU,kCACb,0BAAMA,UAAU,kCAAkC0B,OAAO,KACvD,yBAAK1B,UAAU,eACb,yBAAKA,UAAU,mDACb,uBAAGA,UAAU,+CAEf,2BACEO,KAAK,OACLP,UAAU,oDACV2B,YAAY,aACZhK,MAAOgD,EACPwF,SAAU,SAACC,GAAO,IAAD,EACfxF,EAAa,OAACwF,QAAD,IAACA,GAAD,UAACA,EAAGC,cAAJ,aAAC,EAAW1I,OACzB0D,EAAc,WAQ5B,wBAAI2E,UAAU,cAAd,YACA,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YACb,4BACEO,KAAK,SACLP,UAAU,oCAEV,kBAAC,UAAD,iBAAaX,GAAb,CAAwBW,UAAU,eAAlC,mBAIJ,yBAAKA,UAAU,YACb,4BACEO,KAAK,SACLP,UAAU,mCACVQ,QAAS,kBA7ZL,SAACoB,GACnB,IACMC,EAAK,CAAEC,OAAQ,CAAE3E,KADZ4E,IAAWC,cAAczH,IACD0H,WAAY,CAAC,SAC1CC,EAAcH,IAAWF,EAAI,CAAEM,SAAU,OAAQ5B,KAAM,UACvDpD,EAAO,IAAIiF,KAAK,CAACF,GAAc,CAAE3B,KATvC,oFAUA8B,SAAiBlF,EAAMyE,EATH,SAiaSU,CAAY,SAH7B,oBASJ,yBAAKtC,UAAU,oBACb,2BAAOA,UAAU,uBACf,+BACE,4BACE,sCACA,6CACA,wCACA,uCACA,sCACA,wCACA,mDACA,sCACA,sCACA,wCACC,CAAC,SAASuC,SAAV,OAAmBlI,QAAnB,IAAmBA,GAAnB,UAAmBA,EAASmH,YAA5B,aAAmB,EAAeN,OACjC,+BAIN,+BAEIrG,EACE,kBAAC,IAAD,MADO,OAELN,QAFK,IAELA,OAFK,EAELA,EAAUwG,KAAI,SAACyB,GAAU,IAAD,EACxB,OACE,4BACE,mCAAKA,QAAL,IAAKA,OAAL,EAAKA,EAAMtC,MACX,mCAAKsC,QAAL,IAAKA,OAAL,EAAKA,EAAM3B,WACX,mCAAK2B,QAAL,IAAKA,OAAL,EAAKA,EAAMrB,QACX,mCAAKqB,QAAL,IAAKA,OAAL,EAAKA,EAAMvB,OACX,mCAAKuB,QAAL,IAAKA,OAAL,EAAKA,EAAMtB,MACX,4BAAKpI,YAAa,OAAC0J,QAAD,IAACA,OAAD,EAACA,EAAMzJ,SASzB,4BACE,4BACEwH,KAAK,SACLP,UAAU,mCACVQ,QAAS,kBAAM9B,GAAgB,OAAC8D,QAAD,IAACA,OAAD,EAACA,EAAMhF,MAHxC,aAQF,4BACE,4BACE+C,KAAK,SACLP,UAAU,mCACVQ,QAAS,WAjqBtB,IAACiC,IAiqBqC,OAACD,QAAD,IAACA,OAAD,EAACA,EAAMhF,GAhqB5D/C,EAAQgE,KAAR,oBAA0BgE,MA6pBA,SAQF,4BACE,uBACEjC,QAAS,kBA5oBnB7I,EA4oBoC6K,EA3oBtD9F,KACAhB,GAAe/D,QACf6D,IAAQ,GAHS,IAAC7D,GA6oBUqI,UAAU,yBAGd,4BACE,uBACEQ,QAAS,kBA7jBjBkC,EA6jBmC,OAACF,QAAD,IAACA,OAAD,EAACA,EAAMhF,QA5jB9DmF,IAAKC,KAAK,CACRC,MAAO,gBACPC,KAAM,uDACNC,KAAM,UACNC,kBAAkB,EAClBC,kBAAmB,UACnBC,mBAAoB,UACpBC,kBAAmB,kBACnBC,iBAAkB,gBACjBC,MAAK,SAACC,GACP,GAAIA,EAAO3L,MACT,OACE4L,YAAUb,GAAKlE,SAAQ,kBAAMZ,QAC7B+E,IAAKC,KACH,WACA,wCACA,WAGKU,EAAOE,UAAYb,IAAKc,cAAcC,QAC/Cf,IAAKC,KAAK,YAAa,iCAAkC,YArB1C,IAACF,GA8jBQ1C,UAAU,oBAGb,CAAC,SAASuC,SAAV,OAAmBlI,QAAnB,IAAmBA,GAAnB,UAAmBA,EAASmH,YAA5B,aAAmB,EAAeN,OACnC,4BACE,4BACEX,KAAK,SACLP,UAAU,mCACVQ,QAAS,kBAjsBT7I,EAisBoC6K,EAhsBhE9F,KACAhB,GAAe/D,QACfsD,GAAgB,GAHW,IAACtD,IA8rBF,4BAchB,kBAAC,IAAD,CACEgM,WAAW,MACXC,UAAU,SACV5D,UAAU,cACV6D,aA3mBU,SAACvC,GACvBwC,OAAOC,SAAS,EAAG,GACnB1I,EAAciG,EAAMhB,WA0mBR0D,mBAAoB,EACpB9I,UAAWA,EACX+I,cAAc,aACdC,sBAAuB,KACvBC,UAAW/I","file":"static/js/16.f41eb08d.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\n// Hook\r\nexport const useDebounce = (value, delay) => {\r\n    // State and setters for debounced value\r\n    const [debouncedValue, setDebouncedValue] = useState(value);\r\n    useEffect(\r\n      () => {\r\n        // Update debounced value after delay\r\n        const handler = setTimeout(() => {\r\n          setDebouncedValue(value);\r\n        }, delay);\r\n        // Cancel the timeout if value changes (also on delay change or unmount)\r\n        // This is how we prevent debounced value from updating if value is changed ...\r\n        // .. within the delay period. Timeout gets cleared and restarted.\r\n        return () => {\r\n          clearTimeout(handler);\r\n        };\r\n      },\r\n      [value, delay] // Only re-call effect if value or delay changes\r\n    );\r\n    return debouncedValue;\r\n  }","export const statusOption = [\r\n    { value : 0, label : 'Active' },\r\n    { value : 1, label : 'In Active' },\r\n    { value : 2, label : 'Terminated' }\r\n]\r\n\r\nexport const roleOption = [\r\n    { value : 'user', label : 'User' },\r\n    { value : 'admin', label : 'Admin' },\r\n    { value : 'IBO', label : 'IBO' },\r\n    { value : 'branch', label : 'Branch' }\r\n]\r\n\r\nexport const roleOptionForAmin = [\r\n    { value : 'IBO', label : 'IBO' },\r\n    { value : 'branch', label : 'Branch' }\r\n]\r\n\r\nexport const timeOption = [\r\n    { value : new Date().setDate(new Date().getDate() - 7), label : '1 week' },\r\n    { value : new Date().setDate(new Date().getDate() - 30), label : '1 month' },\r\n    { value : new Date().setDate(new Date().getDate() - 90), label : '3 month' },\r\n    { value : new Date().setDate(new Date().getDate() - 180), label : '6 month' },\r\n    { value : new Date().setDate(new Date().getDate() - 365), label : '1 Year' }\r\n]\r\n\r\nexport const optionForExpenceType = [\r\n    { value : 'Office expence', label : 'Office expence' },\r\n    { value : 'Employee expence', label : 'Employee expence' },\r\n    { value : 'Misleniuneous expence', label : 'Misleniuneous expence' },\r\n    { value : 'Other expence', label : 'Other expence' }\r\n]\r\n\r\nexport const optionForCostCategory = [\r\n    { value : 'Petrol', label : 'Petrol' },\r\n    { value : 'Food', label : 'Food' },\r\n    { value : 'Rent', label : 'Rent' },\r\n    { value : 'Tea', label : 'Tea' },\r\n    { value : 'Transport', label : 'Transport' },\r\n    { value : 'Gift', label : 'Gift' },\r\n    { value : 'Printing', label : 'Printing' },\r\n    { value : 'Advertising', label : 'Advertising' },\r\n    { value : 'Electricity Bill', label : 'Electricity Bill' },\r\n    { value : 'Cleaning', label : 'Cleaning' },\r\n    { value : 'Salary', label : 'Salary' },\r\n    { value : 'Medical Expences', label : 'Medical Expences' },\r\n    { value : 'Insurance', label : 'Insurance' },\r\n    { value : 'Legal & Professionals Fees', label : 'Legal & Professionals Fees' },\r\n    { value : 'Phone Bill', label : 'Phone Bill' },\r\n    { value : 'Internet Bill', label : 'Internet Bill' },\r\n    { value : 'Stationaries Bill', label : 'Stationaries Bill' },\r\n    { value : 'Depreciation', label : 'Depreciation' },\r\n    { value : 'Row materials', label : 'Row materials' },\r\n    { value : 'Books and magazine subscriptions', label : 'Books and magazine subscriptions' }\r\n]\r\n\r\nexport const formateStatus = (status) => {\r\n    switch (+status) {\r\n        case (0):\r\n            return 'Active';\r\n        case (1):\r\n            return 'In Active';\r\n        case (2):\r\n            return 'Terminated'            \r\n        default:\r\n            return 'Active';\r\n    }\r\n}\r\n\r\nexport const formateStatusForTargets = (status) => {\r\n    switch (+status) {\r\n        case (1):\r\n            return 'Running';\r\n        case (2):\r\n            return 'Finished';\r\n        case (3):\r\n            return 'Cancelled';\r\n        case (4):\r\n            return 'Archieved';         \r\n        default:\r\n            return 'Cancelled';\r\n    }\r\n}","export const password_generator = ( len ) => {\r\n    let length = (len)?(len):(10);\r\n    let string = \"abcdefghijklmnopqrstuvwxyz\"; //to upper \r\n    let numeric = '0123456789';\r\n    let password = \"\";\r\n    let character = \"\";\r\n    let crunch = true;\r\n    while( password.length<length ) {\r\n       let entity1 = Math.ceil(string.length * Math.random()*Math.random());\r\n       let entity2 = Math.ceil(numeric.length * Math.random()*Math.random());\r\n       let hold = string.charAt( entity1 );\r\n        hold = (password.length%2==0)?(hold.toUpperCase()):(hold);\r\n        character += hold;\r\n        character += numeric.charAt( entity2 );\r\n        password = character;\r\n    }\r\n    password=password.split('').sort(function(){return 0.5-Math.random()}).join('');\r\n    return password.substr(0,len);\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useCookies } from \"react-cookie\";\r\nimport ReactPaginate from \"react-paginate\";\r\nimport {\r\n  userLogout,\r\n  deleteUsr,\r\n  updateProfile,\r\n  getBranches,\r\n  getIBOs,\r\n} from \"../../../utils/APIs\";\r\nimport { useDebounce } from \"../../../utils/Functions/useDebounce\";\r\nimport { CSVLink } from \"react-csv\";\r\nimport * as FileSaver from \"file-saver\";\r\nimport * as XLSX from \"xlsx\";\r\n\r\nimport Swal from \"sweetalert2\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { statusOption, formateStatus } from \"../../../utils/Functions/commonOptions\";\r\nimport { password_generator } from \"../../../utils/Functions/passwordGenerator\";\r\nimport Spinner from \"../../shared/Spinner\";\r\n\r\n\r\nconst IboList = () => {\r\n  const [cookies, setCookie] = useCookies([\"user\"]);\r\n  const [itemlist, setitemlist] = useState([]);\r\n  const history = useHistory();\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  const [showPerfomer, setShowPerfomer] = React.useState(false);\r\n\r\n\r\n  // We start with an empty list of items.\r\n  const [pageCount, setPageCount] = useState(0);\r\n  // Here we use item offsets; we could also use page offsets\r\n  // following the API or data you're working with.\r\n  const [itemOffset, setItemOffset] = useState(0);\r\n  const [itemsPerPage] = useState(20);\r\n  const [show, setShow] = React.useState(false);\r\n  const [valueToEdit, setvalueToEdit] = useState({});\r\n  const [updateStatus, setupdateStatus] = useState(0);\r\n  const [updatePerfomence, setupdatePerfomence] = useState(1);\r\n  const [branchList, setbranchList] = useState([]);\r\n  const [selectedBranch, setselectedBranch] = useState(\"\");\r\n  const [branchUpdate, setbranchUpdate] = useState('')\r\n  const debouncedSearchTerm = useDebounce(searchTerm, 500);\r\n\r\n  const onChangeBranchUpdate = (e) => {\r\n    setbranchUpdate(e?.target?.value)\r\n  }\r\n\r\n  const handlePerfomanceShow = (value) => {\r\n    reset()\r\n    setvalueToEdit(value);\r\n    setShowPerfomer(true);\r\n  };\r\n\r\n  const onChangePerfomence = (e) => {\r\n    setupdatePerfomence(+e?.target?.value || 0);\r\n  };\r\n\r\n  const viewUser = (Id) => {\r\n    history.push(`/viewUser/${Id}`);\r\n  }\r\n\r\n  const onChangeHandlerBranch = (e) => {\r\n    setItemOffset(0);\r\n    setselectedBranch(e.target.value);\r\n  };\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors, isDirty, isValid },\r\n  } = useForm({\r\n    mode: \"onChange\",\r\n  });\r\n  var strongRegexMo = new RegExp(\r\n    \"^\\\\s*(?:\\\\+?(\\\\d{1,3}))?[-. (]*(\\\\d{3})[-. )]*(\\\\d{3})[-. ]*(\\\\d{4})(?: *x(\\\\d+))?\\\\s*$\"\r\n  );\r\n\r\n  const handleClose = () => {\r\n    setShow(false);\r\n    setvalueToEdit({});\r\n    setupdateStatus(0)\r\n    reset()\r\n  };\r\n\r\n  const handleShow = (value) => {\r\n    reset()\r\n    setvalueToEdit(value);\r\n    setShow(true);\r\n  };\r\n\r\n  const onChangeStatusForm = (e) => {\r\n    setupdateStatus(+e?.target?.value || 0)\r\n  }\r\n\r\n  const onSubmit = async (data) => {\r\n    data.status = updateStatus\r\n    if (data.password === \"\") {\r\n      delete data.password;\r\n    }\r\n    try {\r\n      const updatedData = JSON.stringify(data);\r\n      await updateProfile(updatedData, valueToEdit?.id);\r\n      toast.success('User updated Successfully', {\r\n        autoClose: 3000\r\n      })\r\n      list();\r\n    } catch (error) {\r\n      if (error?.response?.data?.message) {\r\n        toast.error(error.response.data.message);\r\n      } else {\r\n        toast.error(process.env.REACT_APP_ERROR_MESSAGE);\r\n      }\r\n\r\n      if (error?.response?.data?.code === 401) {\r\n        const formData = JSON.stringify({\r\n          refreshToken: localStorage.getItem(\"refreshToken\"),\r\n        });\r\n        setCookie(\"user\", null, { path: \"/\" });\r\n        userLogout(formData).finally(() => {\r\n          history.push(\"/user-pages/login-1\");\r\n        });\r\n      }\r\n    } finally {\r\n      setShow(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    list();\r\n  }, [itemOffset, itemsPerPage]);\r\n  const generatePassword = async (id) => {\r\n    const randomPassword = password_generator();\r\n    const newPassword = JSON.stringify({\r\n      password: randomPassword\r\n    })\r\n\r\n\r\n    try {\r\n      await updateProfile(newPassword, id)\r\n      toast.success('Password generated and sended to user via Email successfully', { autoClose: 3000 })\r\n    } catch (error) {\r\n      toast.error('Password generation failed, please try again later')\r\n    }\r\n\r\n  };\r\n\r\n  // Invoke when user click to request another page.\r\n  const handlePageClick = (event) => {\r\n    window.scrollTo(0, 0);\r\n    setItemOffset(event.selected);\r\n  };\r\n\r\n  useEffect(() => {\r\n    list();\r\n  }, [itemOffset, itemsPerPage, selectedBranch]);\r\n\r\n  useEffect(() => {\r\n    list();\r\n  }, [debouncedSearchTerm]);\r\n\r\n  useEffect(() => {\r\n    getBranchList();\r\n  }, []);\r\n\r\n  const getBranchList = async () => {\r\n    const items = await (await getBranches(5000, 1, \"\", \"branch\")).data;\r\n    setbranchList(items?.results);\r\n  };\r\n\r\n  const deleteBranch = (uid) => {\r\n    Swal.fire({\r\n      title: \"Are you sure?\",\r\n      text: \"You will not be able to recover this imaginary file!\",\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      cancelButtonColor: \"#DD6B55\",\r\n      confirmButtonColor: \"#DD6B55\",\r\n      confirmButtonText: \"Yes, delete it!\",\r\n      cancelButtonText: \"No, keep it\",\r\n    }).then((result) => {\r\n      if (result.value) {\r\n        return (\r\n          deleteUsr(uid).finally(() => list()),\r\n          Swal.fire(\r\n            \"Deleted!\",\r\n            \"Your imaginary file has been deleted.\",\r\n            \"success\"\r\n          )\r\n        );\r\n      } else if (result.dismiss === Swal.DismissReason.cancel) {\r\n        Swal.fire(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\r\n      }\r\n    });\r\n  };\r\n\r\n  const onPerformanceSubmit = async () => {\r\n    try {\r\n      const updatedData = JSON.stringify({ perfomance: updatePerfomence })\r\n      await updateProfile(updatedData, valueToEdit?.id);\r\n      toast.success(\"Add Perfomance Successfully\", {\r\n        autoClose: 3000,\r\n      });\r\n      list();\r\n    } catch (error) {\r\n      if (error?.response?.data?.message) {\r\n        toast.error(error.response.data.message);\r\n      } else {\r\n        toast.error(process.env.REACT_APP_ERROR_MESSAGE);\r\n      }\r\n\r\n      if (error?.response?.data?.code === 401) {\r\n        const formData = JSON.stringify({\r\n          refreshToken: localStorage.getItem(\"refreshToken\"),\r\n        });\r\n        setCookie(\"user\", null, { path: \"/\" });\r\n        userLogout(formData).finally(() => {\r\n          history.push(\"/user-pages/login-1\");\r\n        });\r\n      }\r\n    } finally {\r\n      setShowPerfomer(false);\r\n    }\r\n  }\r\n\r\n  const list = async () => {\r\n    setIsLoading(true)\r\n    try {\r\n      const items = await (await getIBOs(itemsPerPage, +itemOffset + 1, searchTerm, selectedBranch)).data;\r\n      setitemlist(items?.results);\r\n      setPageCount(items?.totalPages);\r\n    } catch (error) {\r\n      if (error?.response?.data?.message) {\r\n        toast.error(error.response.data.message);\r\n      } else {\r\n        toast.error(process.env.REACT_APP_ERROR_MESSAGE);\r\n      }\r\n\r\n      if (error?.response?.data?.code === 401) {\r\n        const formData = JSON.stringify({\r\n          refreshToken: localStorage.getItem(\"refreshToken\"),\r\n        });\r\n        setCookie(\"user\", null, { path: \"/\" });\r\n        userLogout(formData).finally(() => {\r\n          history.push(\"/user-pages/login-1\");\r\n        });\r\n      }\r\n    }\r\n    setIsLoading(false)\r\n  };\r\n\r\n  // excel export\r\n  const fileType =\r\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\r\n  const fileExtension = \".xlsx\";\r\n\r\n\r\n  // csv export\r\n  const exportToCSV = (fileName) => {\r\n    const ws = XLSX.utils.json_to_sheet(itemlist);\r\n    const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\r\n    const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\r\n    const data = new Blob([excelBuffer], { type: fileType });\r\n    FileSaver.saveAs(data, fileName + fileExtension);\r\n  };\r\n\r\n  const headers = [\r\n    { label: \"Name\", key: \"name\", },\r\n    { label: \"Contact no\", key: \"contactno\", },\r\n    { label: \"Branch\", key: \"branch\", },\r\n    { label: \"IBO\", key: \"IBO.name\", },\r\n    { label: \"Email\", key: \"email\", },\r\n    { label: \"Branch\", key: \"branch\", },\r\n    { label: \"DOB\", key: \"dob\", },\r\n    { label: \"Role\", key: \"role\", },\r\n    { label: \"Status\", key: \"status\", },\r\n    { label: \"Bank Account No\", key: \"bankAccNo\", },\r\n    { label: \"Bank IFSC Code\", key: \"bankIfscCode\", },\r\n    { label: \"Bank AadharCard No\", key: \"b_aadhar_card_no\", },\r\n    { label: \"Address\", key: \"address\", },\r\n    \r\n  ]\r\n\r\n  const csvreport = {\r\n    data: itemlist,\r\n    headers: headers,\r\n    filename: 'Clue_Mediator_Report.csv'\r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        show={showPerfomer}\r\n        onHide={handleClose}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Make Top Perfomer</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div className=\"row auth\">\r\n            <div className=\"col-12 grid-margin\">\r\n              <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                  <form\r\n                    className=\"form-sample\"\r\n                  >\r\n                    <p className=\"card-description\"> Make Top Perfomer </p>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-md-12\">\r\n                        <Form.Group className=\"row\">\r\n                          <label className=\"col-sm-4 col-form-label\">\r\n                            Perfomance Rank\r\n                          </label>\r\n                          <div className=\"col-sm-8\">\r\n                            <select\r\n                              className=\"form-control form-control-sm\"\r\n                              id=\"exampleFormControlSelect3\"\r\n                              name=\"perfomence\"\r\n                              onChange={onChangePerfomence}\r\n                            >\r\n                              <option value='1' selected={valueToEdit?.perfomance === 1}>1</option>\r\n                              <option value='2' selected={valueToEdit?.perfomance === 2}>2</option>\r\n                              <option value='3' selected={valueToEdit?.perfomance === 3}>3</option>\r\n                            </select>\r\n                          </div>\r\n                        </Form.Group>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"mt-3\">\r\n                      <button\r\n                        className=\"btn  btn-primary btn-lg font-weight-medium auth-form-btn\"\r\n                        type=\"button\"\r\n                        onClick={onPerformanceSubmit}\r\n                      >\r\n                        Submit Perfomance\r\n                      </button>\r\n                    </div>\r\n                  </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Modal.Body>\r\n      </Modal>\r\n      <Modal\r\n        show={show}\r\n        onHide={handleClose}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Update Ibo</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div className=\"row auth\">\r\n            <div className=\"col-12 grid-margin\">\r\n              <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                  <form\r\n                    className=\"form-sample\"\r\n                    onSubmit={handleSubmit(onSubmit)}\r\n                  >\r\n                    <p className=\"card-description\"> Update Ibo </p>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-md-12\">\r\n                        <Form.Group className=\"row\">\r\n                          <label className=\"col-sm-3 col-form-label\">\r\n                            Name\r\n                          </label>\r\n                          <div className=\"col-sm-9\">\r\n                            <Form.Control\r\n                              type=\"text\"\r\n                              name=\"name\"\r\n                              defaultValue={valueToEdit.name}\r\n                              {...register(\"name\", { required: true })}\r\n                            />\r\n                            {errors && errors.name && (\r\n                              <p>name is required field</p>\r\n                            )}\r\n                          </div>\r\n                        </Form.Group>\r\n                      </div>\r\n                    </div>\r\n\r\n\r\n                    <div className=\"row\">\r\n                      <div className=\"col-md-12\">\r\n                        <Form.Group className=\"row\">\r\n                          <label className=\"col-sm-2 col-form-label\">\r\n                            Address{\" \"}\r\n                          </label>\r\n                          <div className=\"col-sm-10\">\r\n                            <Form.Control\r\n                              type=\"text\"\r\n                              name=\"address\"\r\n                              {...register(\"address\", { required: true })}\r\n                            />\r\n                            {errors && errors.address && (\r\n                              <p>address is required field</p>\r\n                            )}\r\n                          </div>\r\n                        </Form.Group>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"row\">\r\n                      <div className=\"col-md-12\">\r\n                        <Form.Group className=\"row\">\r\n                          <label className=\"col-sm-3 col-form-label\">\r\n                            Contact No\r\n                          </label>\r\n                          <div className=\"col-sm-9 contact_no\">\r\n                            <Form.Control\r\n                              type=\"text\"\r\n                              name=\"contactno\"\r\n                              defaultValue={valueToEdit.contactno}\r\n                              {...register(\"contactno\", {\r\n                                required: true,\r\n                                pattern: strongRegexMo,\r\n                              })}\r\n                            />\r\n                            {errors &&\r\n                              errors.contactno &&\r\n                              errors.contactno.type === \"required\" && (\r\n                                <p>contact number is required field</p>\r\n                              )}\r\n                            {errors &&\r\n                              errors.contactno &&\r\n                              errors.contactno.type === \"pattern\" && (\r\n                                <p>\r\n                                  invalid phone number please use valid formate\r\n                                </p>\r\n                              )}\r\n                          </div>\r\n                        </Form.Group>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-md-12\">\r\n                        <Form.Group className=\"row\">\r\n                          <label className=\"col-sm-3 col-form-label\">\r\n                            Search Branch\r\n                          </label>\r\n                          <div className=\"col-sm-9\">\r\n                            <select\r\n                              className=\"form-control form-control-sm\"\r\n                              id=\"exampleFormControlSelect2\"\r\n                              name=\"branch\"\r\n                              onChange={onChangeBranchUpdate}\r\n                            >\r\n                              {branchList?.map((i) => {\r\n                                return (\r\n                                  <>\r\n                                    <option\r\n                                      selected={i.name === branchUpdate}\r\n                                      value={i.name}\r\n                                    >\r\n                                      {i.name}\r\n                                    </option>\r\n                                  </>\r\n                                );\r\n                              })}\r\n                            </select>\r\n                          </div>\r\n                        </Form.Group>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-md-12\">\r\n                        <Form.Group className=\"row\">\r\n                          <label className=\"col-sm-3 col-form-label\">\r\n                            Email\r\n                          </label>\r\n                          <div className=\"col-sm-9\">\r\n                            <Form.Control\r\n                              type=\"text\"\r\n                              name=\"email\"\r\n                              defaultValue={valueToEdit.email}\r\n                              {...register(\"email\", {\r\n                                required: true,\r\n                                pattern: /^\\S+@\\S+$/i,\r\n                              })}\r\n                            />\r\n                            {errors &&\r\n                              errors.email &&\r\n                              errors.email.type === \"required\" && (\r\n                                <p>email is required field</p>\r\n                              )}\r\n                            {errors &&\r\n                              errors.email &&\r\n                              errors.email.type === \"pattern\" && (\r\n                                <p>invalid email formate</p>\r\n                              )}\r\n                          </div>\r\n                        </Form.Group>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"row\">\r\n                      <div className=\"col-md-12\">\r\n                        <Form.Group className=\"row\">\r\n                          <label className=\"col-sm-3 col-form-label\">\r\n                            status\r\n                          </label>\r\n                          <div className=\"col-sm-9\">\r\n                            <select\r\n                              className=\"form-control form-control-sm\"\r\n                              id=\"exampleFormControlSelect3\"\r\n                              name=\"status\"\r\n                              onChange={onChangeStatusForm}\r\n                            >\r\n                              {statusOption?.map((i) => {\r\n                                return (\r\n                                  <option\r\n                                    value={i?.value}\r\n                                    selected={+updateStatus === +i?.value}\r\n                                  >\r\n                                    {i?.label}\r\n                                  </option>\r\n                                );\r\n                              })}\r\n                            </select>\r\n                          </div>\r\n                        </Form.Group>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"row\">\r\n                      <div className=\"col-md-12\">\r\n                        <Form.Group className=\"row\">\r\n                          <label className=\"col-sm-3 col-form-label\">\r\n                            Role\r\n                          </label>\r\n                          <div className=\"col-sm-9\">\r\n                            <Form.Control\r\n                              type=\"text\"\r\n                              defaultValue={valueToEdit.role}\r\n                              name=\"role\"\r\n                              {...register(\"role\", { required: true })}\r\n                            />\r\n                            {errors && errors.branch && (\r\n                              <p>role is required field</p>\r\n                            )}\r\n                          </div>\r\n                        </Form.Group>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"row\">\r\n                      <div className=\"col-md-12\">\r\n                        <Form.Group className=\"row\">\r\n                          <label className=\"col-sm-4 col-form-label\">\r\n                            Password\r\n                          </label>\r\n                          <div className=\"col-sm-8\">\r\n                            <Form.Control\r\n                              type=\"password\"\r\n                              name=\"password\"\r\n                              {...register(\"password\")}\r\n                            />\r\n                          </div>\r\n                        </Form.Group>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"mt-3\">\r\n                      <button\r\n                        className=\"btn  btn-primary btn-lg font-weight-medium auth-form-btn\"\r\n                        type=\"submit\"\r\n                      >\r\n                        UPDATE\r\n                      </button>\r\n                    </div>\r\n                  </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Modal.Body>\r\n      </Modal>\r\n      <div className=\"page-header\">\r\n        <h3 className=\"page-title\">ibos / Show Ibos </h3>\r\n        <nav aria-label=\"breadcrumb\">\r\n          <ol className=\"breadcrumb\">\r\n            <li className=\"breadcrumb-item\">\r\n              <a href=\"!#\" onClick={(event) => event.preventDefault()}>\r\n                {cookies?.user?.role} Dashboard\r\n              </a>\r\n            </li>\r\n            <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n              Show Ibos\r\n            </li>\r\n          </ol>\r\n        </nav>\r\n      </div>\r\n      <div className=\"col-lg-12 grid-margin stretch-card p0\">\r\n        <div className=\"card\">\r\n          <div className=\"card-body\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-6\">\r\n                <Form.Group className=\"row\">\r\n                  <label className=\"col-sm-4 col-form-label\">\r\n                    Search Branch\r\n                  </label>\r\n                  <div className=\"col-sm-8\">\r\n                    <select\r\n                      className=\"form-control form-control-sm\"\r\n                      id=\"exampleFormControlSelect2\"\r\n                      name=\"branch\"\r\n                      onChange={onChangeHandlerBranch}\r\n                    >\r\n                      <option selected={\"\" === selectedBranch} value={\"\"}>\r\n                        Not Selected\r\n                      </option>\r\n                      {branchList?.map((i) => {\r\n                        return (\r\n                          <>\r\n                            <option\r\n                              selected={i.name === selectedBranch}\r\n                              value={i.name}\r\n                            >\r\n                              {i.name}\r\n                            </option>\r\n                          </>\r\n                        );\r\n                      })}\r\n                    </select>\r\n                  </div>\r\n                </Form.Group>\r\n              </div>\r\n\r\n              <div className=\"col-md-6\">\r\n                <div className=\"search-field d-none d-md-block\">\r\n                  <form className=\"d-flex align-items-center h-100\" action=\"#\">\r\n                    <div className=\"input-group\">\r\n                      <div className=\"input-group-prepend outline-gray bg-transparent\">\r\n                        <i className=\"input-group-text border-0 mdi mdi-magnify\"></i>\r\n                      </div>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control outline-gray bg-transparent border-0\"\r\n                        placeholder=\"Search IBO\"\r\n                        value={searchTerm}\r\n                        onChange={(e) => {\r\n                          setSearchTerm(e?.target?.value);\r\n                          setItemOffset(0);\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <h4 className=\"card-title\">Ibo list</h4>\r\n            <div className=\"row\">\r\n              <div className=\"col-md-4\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-gradient-primary btn-sm \"\r\n                >\r\n                  <CSVLink {...csvreport} className=\"text-white\">Export to CSV</CSVLink>\r\n                </button>\r\n              </div>\r\n\r\n              <div className=\"col-md-4\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-gradient-primary btn-sm \"\r\n                  onClick={() => exportToCSV('IBO')}\r\n                >\r\n                  Download Excel\r\n                </button>\r\n              </div>\r\n            </div>\r\n            <div className=\"table-responsive\">\r\n              <table className=\"table table-striped\">\r\n                <thead>\r\n                  <tr>\r\n                    <th> Name </th>\r\n                    <th> Contact no. </th>\r\n                    <th> Branch </th>\r\n                    <th> Email </th>\r\n                    <th> Role </th>\r\n                    <th> Status </th>\r\n                    <th> Generate Password </th>\r\n                    <th> View </th>\r\n                    <th> Edit </th>\r\n                    <th> Delete </th>\r\n                    {[\"admin\"].includes(cookies?.user?.role) && (\r\n                      <th></th>\r\n                    )}\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {\r\n                    isLoading ?\r\n                      <Spinner />\r\n                      : itemlist?.map((item) => {\r\n                        return (\r\n                          <tr>\r\n                            <td>{item?.name}</td>\r\n                            <td>{item?.contactno}</td>\r\n                            <td>{item?.branch}</td>\r\n                            <td>{item?.email}</td>\r\n                            <td>{item?.role}</td>\r\n                            <td>{formateStatus(item?.status)}</td>\r\n                            {/* <td>\r\n                          <label className=\"badge badge-gradient-success\">\r\n                            Active\r\n                          </label>\r\n                          <label className=\"badge badge-gradient-danger\">\r\n                            Inactive\r\n                          </label>\r\n                        </td> */}\r\n                            <td>\r\n                              <button\r\n                                type=\"button\"\r\n                                className=\"btn btn-gradient-primary btn-sm \"\r\n                                onClick={() => generatePassword(item?.id)}\r\n                              >\r\n                                Generate\r\n                              </button>\r\n                            </td>\r\n                            <td>\r\n                              <button\r\n                                type=\"button\"\r\n                                className=\"btn btn-gradient-primary btn-sm \"\r\n                                onClick={() => { viewUser(item?.id) }}\r\n                              >\r\n                                View\r\n                              </button>\r\n                            </td>\r\n                            <td>\r\n                              <i\r\n                                onClick={() => handleShow(item)}\r\n                                className=\"mdi mdi-lead-pencil\"\r\n                              ></i>\r\n                            </td>\r\n                            <td>\r\n                              <i\r\n                                onClick={() => deleteBranch(item?.id)}\r\n                                className=\"mdi mdi-delete\"\r\n                              ></i>\r\n                            </td>\r\n                            {[\"admin\"].includes(cookies?.user?.role) && (\r\n                            <td>\r\n                              <button\r\n                                type=\"button\"\r\n                                className=\"btn btn-gradient-primary btn-sm \"\r\n                                onClick={() => handlePerfomanceShow(item)}\r\n                              >\r\n                                Make Top Perfomer\r\n                              </button>\r\n                            </td>\r\n                          )}\r\n                          </tr>\r\n                        );\r\n                      })}\r\n                </tbody>\r\n              </table>\r\n              <ReactPaginate\r\n                breakLabel=\"...\"\r\n                nextLabel=\"next >\"\r\n                className=\"client-list\"\r\n                onPageChange={handlePageClick}\r\n                pageRangeDisplayed={5}\r\n                pageCount={pageCount}\r\n                previousLabel=\"< previous\"\r\n                renderOnZeroPageCount={null}\r\n                forcePage={itemOffset}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default IboList;\r\n"],"sourceRoot":""}