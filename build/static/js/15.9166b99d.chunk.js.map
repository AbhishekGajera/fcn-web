{"version":3,"sources":["utils/Functions/useDebounce.js","app/Admin-components/Product/ProductFetch.js"],"names":["useDebounce","value","delay","useState","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","ProductList","searchTerm","setSearchTerm","debouncedSearchTerm","selectedProductType","selectedProductCategory","pageCount","setPageCount","itemOffset","setItemOffset","itemsPerPage","useCookies","cookies","itemlist","setitemlist","list","getProductsList","data","items","results","totalPages","className","aria-label","href","onClick","event","preventDefault","user","role","aria-current","action","type","placeholder","onChange","e","target","map","item","name","category","description","uid","id","Swal","fire","title","text","icon","showCancelButton","cancelButtonColor","confirmButtonColor","confirmButtonText","cancelButtonText","then","result","deleteProductById","finally","dismiss","DismissReason","cancel","imageURL","image","window","open","breakLabel","nextLabel","onPageChange","selected","pageRangeDisplayed","previousLabel","renderOnZeroPageCount","forcePage"],"mappings":"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","file":"static/js/15.9166b99d.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\n\n// Hook\nexport const useDebounce = (value, delay) => {\n    // State and setters for debounced value\n    const [debouncedValue, setDebouncedValue] = useState(value);\n    useEffect(\n      () => {\n        // Update debounced value after delay\n        const handler = setTimeout(() => {\n          setDebouncedValue(value);\n        }, delay);\n        // Cancel the timeout if value changes (also on delay change or unmount)\n        // This is how we prevent debounced value from updating if value is changed ...\n        // .. within the delay period. Timeout gets cleared and restarted.\n        return () => {\n          clearTimeout(handler);\n        };\n      },\n      [value, delay] // Only re-call effect if value or delay changes\n    );\n    return debouncedValue;\n  }","import React, { useEffect, useState } from \"react\";\nimport { useCookies } from \"react-cookie\";\nimport ReactPaginate from \"react-paginate\";\nimport { deleteProductById, getProductsList } from \"../../../utils/APIs\";\nimport Swal from \"sweetalert2\";\nimport { useDebounce } from \"../../../utils/Functions/useDebounce\";\n\nconst ProductList = () => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const debouncedSearchTerm = useDebounce(searchTerm, 500);\n  \n  const [selectedProductType, setselectedProductType] = useState(\"\");\n  const [selectedProductCategory, setselectedProductCategory] = useState(\"\");\n\n  // We start with an empty list of items.\n  const [pageCount, setPageCount] = useState(0);\n  // Here we use item offsets; we could also use page offsets\n  // following the API or data you're working with.\n  const [itemOffset, setItemOffset] = useState(0);\n  const [itemsPerPage] = useState(10);\n  const [cookies] = useCookies([\"user\"]);\n  const [itemlist, setitemlist] = useState([]);\n\n  useEffect(() => {\n    list();\n  }, [itemOffset, itemsPerPage, selectedProductType, selectedProductCategory,debouncedSearchTerm]);\n\n  // Invoke when user click to request another page.\n  const handlePageClick = (event) => {\n    setItemOffset(event.selected);\n  };\n\n  const deleteProduct = (uid) => {\n    Swal.fire({\n      title: \"Are you sure?\",\n      text: \"You will not be able to recover this imaginary file!\",\n      icon: \"warning\",\n      showCancelButton: true,\n      cancelButtonColor: \"#DD6B55\",\n      confirmButtonColor: \"#DD6B55\",\n      confirmButtonText: \"Yes, delete it!\",\n      cancelButtonText: \"No, keep it\",\n    }).then((result) => {\n      if (result.value) {\n        return (\n          deleteProductById(uid).finally(() => list()),\n          Swal.fire(\n            \"Deleted!\",\n            \"Your imaginary file has been deleted.\",\n            \"success\"\n          )\n        );\n      } else if (result.dismiss === Swal.DismissReason.cancel) {\n        Swal.fire(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\n      }\n    });\n  };\n\n  const onClickDownload = (imageURL) => {\n    window.open(imageURL, '_blank');\n  }\n\n  const list = async () => {\n    const items = await (\n      await getProductsList(\n        itemsPerPage,\n        +itemOffset + 0,\n        searchTerm,\n      )\n    ).data;\n    setitemlist(items?.results);\n    setPageCount(items?.totalPages);\n  };\n\n  return (\n    <div>\n      <div className=\"page-header\">\n        <h3 className=\"page-title\">costs / Fetch Costs </h3>\n        <nav aria-label=\"breadcrumb\">\n          <ol className=\"breadcrumb\">\n            <li className=\"breadcrumb-item\">\n              <a href=\"!#\" onClick={(event) => event.preventDefault()}>\n                {cookies?.user?.role} Dashboard\n              </a>\n            </li>\n            <li className=\"breadcrumb-item active\" aria-current=\"page\">\n              Fetch Costs\n            </li>\n          </ol>\n        </nav>\n      </div>\n      <div className=\"col-lg-12 grid-margin stretch-card p0\">\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <div className=\"row\">\n            <div className=\"col-md-6\">\n            </div>\n\n              <div className=\"col-md-6\">\n                <div className=\"search-field d-none d-md-block\">\n                  <form className=\"d-flex align-items-center h-100\" action=\"#\">\n                    <div className=\"input-group\">\n                      <div className=\"input-group-prepend outline-gray bg-transparent\">\n                        <i className=\"input-group-text border-0 mdi mdi-magnify\"></i>\n                      </div>\n                      <input\n                        type=\"text\"\n                        className=\"form-control outline-gray bg-transparent border-0\"\n                        placeholder=\"Search Products\"\n                        value={searchTerm}\n                        onChange={(e) => {\n                          setSearchTerm(e?.target?.value);\n                          setItemOffset(0);\n                        }}\n                      />\n                    </div>\n                  </form>\n                </div>\n              </div>\n\n            </div>\n            <h4 className=\"card-title\">Product list</h4>\n\n            <div className=\"table-responsive\">\n              <table className=\"table table-striped\">\n                <thead>\n                  <tr>\n                    <th> Name </th>\n                    <th> Category </th>\n                    <th> Description </th>\n                    <th> Delete </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {itemlist?.map((item) => {\n                    return (\n                      <tr>\n                        <td>{item?.name}</td>\n                        <td>{item?.category}</td>\n                        <td>{item?.description}</td>\n                        <td>\n                          <i\n                            onClick={() => deleteProduct(item?.id)}\n                            className=\"mdi mdi-delete\"\n                          ></i>\n                        </td>\n                        <td>\n                          <button\n                            type=\"button\"\n                            className=\"btn btn-gradient-primary btn-sm \"\n                            onClick={() => onClickDownload(item?.image)}\n                          >\n                            Download Product Image\n                          </button>\n                        </td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n              <ReactPaginate\n                breakLabel=\"...\"\n                nextLabel=\"next >\"\n                className=\"client-list\"\n                onPageChange={handlePageClick}\n                pageRangeDisplayed={5}\n                pageCount={pageCount}\n                previousLabel=\"< previous\"\n                renderOnZeroPageCount={null}\n                forcePage={itemOffset}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProductList;\n"],"sourceRoot":""}