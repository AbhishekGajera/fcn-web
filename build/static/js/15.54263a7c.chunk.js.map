{"version":3,"sources":["utils/Functions/useDebounce.js","utils/Functions/commonOptions.js","utils/Functions/passwordGenerator.js","app/Admin-components/BranchesList/index.js"],"names":["useDebounce","value","delay","useState","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","statusOption","label","roleOption","roleOptionForAmin","timeOption","Date","setDate","getDate","optionForExpenceType","optionForCostCategory","formateStatus","status","formateStatusForTargets","password_generator","len","length","string","password","character","entity1","Math","ceil","random","entity2","hold","charAt","toUpperCase","split","sort","join","substr","BranchList","searchTerm","setSearchTerm","selectedIBO","setselectedIBO","React","showPerfomer","setShowPerfomer","pageCount","setPageCount","itemOffset","setItemOffset","itemsPerPage","show","setShow","valueToEdit","setvalueToEdit","updatePerfomence","setupdatePerfomence","updateStatus","setupdateStatus","roleUpdate","setroleUpdate","debouncedSearchTerm","useCookies","cookies","setCookie","itemlist","setitemlist","IBOList","setIBOList","history","useHistory","isLoading","setIsLoading","useForm","mode","register","handleSubmit","reset","formState","errors","strongRegexMo","isDirty","isValid","RegExp","getIBOList","getIBOs","data","items","results","handleClose","generatePassword","id","randomPassword","newPassword","JSON","stringify","updateProfile","toast","success","autoClose","error","onPerformanceSubmit","updatedData","perfomance","list","response","message","process","code","formData","refreshToken","localStorage","getItem","path","userLogout","finally","push","onSubmit","role","getBranches","console","log","totalPages","onHide","backdrop","keyboard","Header","closeButton","Title","Body","className","Group","name","onChange","e","target","selected","type","onClick","Control","defaultValue","required","address","contactno","pattern","email","map","i","b_head_name","b_head_contact_no","aria-label","href","event","preventDefault","user","aria-current","action","placeholder","includes","item","ibo","Id","uid","Swal","fire","title","text","icon","showCancelButton","cancelButtonColor","confirmButtonColor","confirmButtonText","cancelButtonText","then","result","deleteUsr","dismiss","DismissReason","cancel","breakLabel","nextLabel","onPageChange","window","scrollTo","pageRangeDisplayed","previousLabel","renderOnZeroPageCount","forcePage"],"mappings":"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","file":"static/js/15.54263a7c.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\n// Hook\r\nexport const useDebounce = (value, delay) => {\r\n    // State and setters for debounced value\r\n    const [debouncedValue, setDebouncedValue] = useState(value);\r\n    useEffect(\r\n      () => {\r\n        // Update debounced value after delay\r\n        const handler = setTimeout(() => {\r\n          setDebouncedValue(value);\r\n        }, delay);\r\n        // Cancel the timeout if value changes (also on delay change or unmount)\r\n        // This is how we prevent debounced value from updating if value is changed ...\r\n        // .. within the delay period. Timeout gets cleared and restarted.\r\n        return () => {\r\n          clearTimeout(handler);\r\n        };\r\n      },\r\n      [value, delay] // Only re-call effect if value or delay changes\r\n    );\r\n    return debouncedValue;\r\n  }","export const statusOption = [\r\n    { value : 0, label : 'Active' },\r\n    { value : 1, label : 'In Active' },\r\n    { value : 2, label : 'Terminated' }\r\n]\r\n\r\nexport const roleOption = [\r\n    { value : 'user', label : 'User' },\r\n    { value : 'admin', label : 'Admin' },\r\n    { value : 'IBO', label : 'IBO' },\r\n    { value : 'branch', label : 'Branch' }\r\n]\r\n\r\nexport const roleOptionForAmin = [\r\n    { value : 'IBO', label : 'IBO' },\r\n    { value : 'branch', label : 'Branch' }\r\n]\r\n\r\nexport const timeOption = [\r\n    { value : new Date().setDate(new Date().getDate() - 7), label : '1 week' },\r\n    { value : new Date().setDate(new Date().getDate() - 30), label : '1 month' },\r\n    { value : new Date().setDate(new Date().getDate() - 90), label : '3 month' },\r\n    { value : new Date().setDate(new Date().getDate() - 180), label : '6 month' },\r\n    { value : new Date().setDate(new Date().getDate() - 365), label : '1 Year' }\r\n]\r\n\r\nexport const optionForExpenceType = [\r\n    { value : 'Office expence', label : 'Office expence' },\r\n    { value : 'Employee expence', label : 'Employee expence' },\r\n    { value : 'Misleniuneous expence', label : 'Misleniuneous expence' },\r\n    { value : 'Other expence', label : 'Other expence' }\r\n]\r\n\r\nexport const optionForCostCategory = [\r\n    { value : 'Petrol', label : 'Petrol' },\r\n    { value : 'Food', label : 'Food' },\r\n    { value : 'Rent', label : 'Rent' },\r\n    { value : 'Tea', label : 'Tea' },\r\n    { value : 'Transport', label : 'Transport' },\r\n    { value : 'Gift', label : 'Gift' },\r\n    { value : 'Printing', label : 'Printing' },\r\n    { value : 'Advertising', label : 'Advertising' },\r\n    { value : 'Electricity Bill', label : 'Electricity Bill' },\r\n    { value : 'Cleaning', label : 'Cleaning' },\r\n    { value : 'Salary', label : 'Salary' },\r\n    { value : 'Medical Expences', label : 'Medical Expences' },\r\n    { value : 'Insurance', label : 'Insurance' },\r\n    { value : 'Legal & Professionals Fees', label : 'Legal & Professionals Fees' },\r\n    { value : 'Phone Bill', label : 'Phone Bill' },\r\n    { value : 'Internet Bill', label : 'Internet Bill' },\r\n    { value : 'Stationaries Bill', label : 'Stationaries Bill' },\r\n    { value : 'Depreciation', label : 'Depreciation' },\r\n    { value : 'Row materials', label : 'Row materials' },\r\n    { value : 'Books and magazine subscriptions', label : 'Books and magazine subscriptions' }\r\n]\r\n\r\nexport const formateStatus = (status) => {\r\n    switch (+status) {\r\n        case (0):\r\n            return 'Active';\r\n        case (1):\r\n            return 'In Active';\r\n        case (2):\r\n            return 'Terminated'            \r\n        default:\r\n            return 'Active';\r\n    }\r\n}\r\n\r\nexport const formateStatusForTargets = (status) => {\r\n    switch (+status) {\r\n        case (1):\r\n            return 'Running';\r\n        case (2):\r\n            return 'Finished';\r\n        case (3):\r\n            return 'Cancelled';\r\n        case (4):\r\n            return 'Archieved';         \r\n        default:\r\n            return 'Cancelled';\r\n    }\r\n}","export const password_generator = ( len ) => {\r\n    let length = (len)?(len):(10);\r\n    let string = \"abcdefghijklmnopqrstuvwxyz\"; //to upper \r\n    let numeric = '0123456789';\r\n    let password = \"\";\r\n    let character = \"\";\r\n    let crunch = true;\r\n    while( password.length<length ) {\r\n       let entity1 = Math.ceil(string.length * Math.random()*Math.random());\r\n       let entity2 = Math.ceil(numeric.length * Math.random()*Math.random());\r\n       let hold = string.charAt( entity1 );\r\n        hold = (password.length%2==0)?(hold.toUpperCase()):(hold);\r\n        character += hold;\r\n        character += numeric.charAt( entity2 );\r\n        password = character;\r\n    }\r\n    password=password.split('').sort(function(){return 0.5-Math.random()}).join('');\r\n    return password.substr(0,len);\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useCookies } from \"react-cookie\";\r\nimport ReactPaginate from \"react-paginate\";\r\nimport {\r\n  userLogout,\r\n  deleteUsr,\r\n  updateProfile,\r\n  getBranches,\r\n  getIBOs\r\n} from \"../../../utils/APIs\";\r\nimport Swal from \"sweetalert2\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Form } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { useHistory } from 'react-router-dom'\r\nimport { statusOption, formateStatus, roleOption } from \"../../../utils/Functions/commonOptions\";\r\nimport { password_generator } from \"../../../utils/Functions/passwordGenerator\";\r\nimport { useDebounce } from \"../../../utils/Functions/useDebounce\";\r\nimport Spinner from \"../../shared/Spinner\";\r\n\r\n\r\nconst BranchList = () => {\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [selectedIBO, setselectedIBO] = useState(\"\");\r\n  const [showPerfomer, setShowPerfomer] = React.useState(false);\r\n\r\n  // We start with an empty list of items.\r\n  const [pageCount, setPageCount] = useState(0);\r\n  // Here we use item offsets; we could also use page offsets\r\n  // following the API or data you're working with.\r\n  const [itemOffset, setItemOffset] = useState(0);\r\n  const [itemsPerPage] = useState(20);\r\n  const [show, setShow] = React.useState(false);\r\n  const [valueToEdit, setvalueToEdit] = useState({});\r\n  const [updatePerfomence, setupdatePerfomence] = useState(1);\r\n  const [updateStatus, setupdateStatus] = useState(0);\r\n  const [roleUpdate, setroleUpdate] = useState('')\r\n  const debouncedSearchTerm = useDebounce(searchTerm, 500);\r\n\r\n\r\n  const onChangeRolepdate = (e) => {\r\n    setroleUpdate(e?.target?.value)\r\n  }\r\n  const [cookies, setCookie] = useCookies([\"user\"]);\r\n  const [itemlist, setitemlist] = useState([]);\r\n  const [IBOList, setIBOList] = useState([]);\r\n\r\n  const history = useHistory()\r\n  const [isLoading, setIsLoading] = useState(true)\r\n\r\n  const { register, handleSubmit, reset, formState: { errors, isDirty, isValid } } = useForm({\r\n    mode: \"onChange\"\r\n  });\r\n  var strongRegexMo = new RegExp(\r\n    \"^\\\\s*(?:\\\\+?(\\\\d{1,3}))?[-. (]*(\\\\d{3})[-. )]*(\\\\d{3})[-. ]*(\\\\d{4})(?: *x(\\\\d+))?\\\\s*$\"\r\n  );\r\n  const getIBOList = async () => {\r\n    const items = await (await getIBOs(5000, 1, \"\")).data;\r\n    setIBOList(items?.results);\r\n    // console.log(\"rs\",items?.results)\r\n  };\r\n\r\n  const onChangePerfomence = (e) => {\r\n    setupdatePerfomence(+e?.target?.value || 0);\r\n  };\r\n\r\n  const onChangeHandlerIBO = (e) => {\r\n    setItemOffset(0);\r\n    setselectedIBO(e.target.value);\r\n  };\r\n  const handleClose = () => {\r\n    setShow(false)\r\n    setvalueToEdit({})\r\n    setupdateStatus(0)\r\n    reset()\r\n\r\n  };\r\n\r\n  const handlePerfomanceShow = (value) => {\r\n    reset()\r\n    setvalueToEdit(value);\r\n    setShowPerfomer(true);\r\n  };\r\n\r\n  const onChangeStatusForm = (e) => {\r\n    setupdateStatus(+e?.target?.value || 0)\r\n  }\r\n\r\n  const handleShow = (value) => {\r\n    reset()\r\n    setvalueToEdit(value)\r\n    setupdateStatus(value?.status || 0)\r\n    setroleUpdate(value?.role)\r\n    setShow(true);\r\n  }\r\n  const generatePassword = async (id) => {\r\n    const randomPassword = password_generator();\r\n    const newPassword = JSON.stringify({\r\n      password: randomPassword\r\n    })\r\n\r\n    try {\r\n      await updateProfile(newPassword, id)\r\n      toast.success('Password generated and sended to user via Email successfully', { autoClose: 3000 })\r\n    } catch (error) {\r\n      toast.error('Password generation failed, please try again later')\r\n    }\r\n\r\n  };\r\n\r\n  const onPerformanceSubmit = async () => {\r\n    try {\r\n      const updatedData = JSON.stringify({ perfomance: updatePerfomence })\r\n      await updateProfile(updatedData, valueToEdit?.id);\r\n      toast.success(\"Add Perfomance Successfully\", {\r\n        autoClose: 3000,\r\n      });\r\n      list();\r\n    } catch (error) {\r\n      if (error?.response?.data?.message) {\r\n        toast.error(error.response.data.message);\r\n      } else {\r\n        toast.error(process.env.REACT_APP_ERROR_MESSAGE);\r\n      }\r\n\r\n      if (error?.response?.data?.code === 401) {\r\n        const formData = JSON.stringify({\r\n          refreshToken: localStorage.getItem(\"refreshToken\"),\r\n        });\r\n        setCookie(\"user\", null, { path: \"/\" });\r\n        userLogout(formData).finally(() => {\r\n          history.push(\"/user-pages/login-1\");\r\n        });\r\n      }\r\n    } finally {\r\n      setShowPerfomer(false);\r\n    }\r\n  }\r\n\r\n  const onSubmit = async (data) => {\r\n    data.status = updateStatus;\r\n    data.role = roleUpdate;\r\n    if (data.password === \"\") {\r\n      delete data.password;\r\n    }\r\n    try {\r\n      const updatedData = JSON.stringify(data)\r\n      await updateProfile(updatedData, valueToEdit?.id)\r\n      toast.success('User updated Successfully', {\r\n        autoClose: 3000\r\n      })\r\n      list()\r\n    } catch (error) {\r\n      if (error?.response?.data?.message) {\r\n        toast.error(error.response.data.message);\r\n      } else {\r\n        toast.error(process.env.REACT_APP_ERROR_MESSAGE);\r\n      }\r\n\r\n      if (error?.response?.data?.code === 401) {\r\n        const formData = JSON.stringify({\r\n          refreshToken: localStorage.getItem(\"refreshToken\"),\r\n        });\r\n        setCookie(\"user\", null, { path: \"/\" });\r\n        userLogout(formData).finally(() => {\r\n          history.push(\"/user-pages/login-1\");\r\n        });\r\n      }\r\n    } finally {\r\n      setShow(false)\r\n    }\r\n  };\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    list()\r\n  }, [itemOffset, itemsPerPage, selectedIBO]);\r\n\r\n  useEffect(() => {\r\n    list()\r\n  }, [debouncedSearchTerm]);\r\n\r\n  useEffect(() => {\r\n    getIBOList();\r\n  }, []);\r\n\r\n  // Invoke when user click to request another page.\r\n  const handlePageClick = (event) => {\r\n    window.scrollTo(0, 0);\r\n    setItemOffset(event.selected);\r\n  };\r\n\r\n  const deleteBranch = (uid) => {\r\n    Swal.fire({\r\n      title: \"Are you sure?\",\r\n      text: \"You will not be able to recover this imaginary file!\",\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      cancelButtonColor: \"#DD6B55\",\r\n      confirmButtonColor: \"#DD6B55\",\r\n      confirmButtonText: \"Yes, delete it!\",\r\n      cancelButtonText: \"No, keep it\",\r\n    }).then((result) => {\r\n      if (result.value) {\r\n        return (\r\n          deleteUsr(uid).finally(() => list()),\r\n          Swal.fire(\r\n            \"Deleted!\",\r\n            \"Your imaginary file has been deleted.\",\r\n            \"success\",\r\n          )\r\n        );\r\n      } else if (result.dismiss === Swal.DismissReason.cancel) {\r\n        Swal.fire(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\r\n      }\r\n    });\r\n  }\r\n\r\n  const viewUser = (Id) => {\r\n    history.push(`/viewUser/${Id}`);\r\n  }\r\n\r\n  const list = async () => {\r\n    setIsLoading(true)\r\n    const items = await (await getBranches(itemsPerPage, (+itemOffset + 1), searchTerm)).data;\r\n    setitemlist(items?.results);\r\n    console.log(\"lst\", items?.results)\r\n    setPageCount(items?.totalPages);\r\n    setIsLoading(false)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        show={showPerfomer}\r\n        onHide={handleClose}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Make Top Perfomer</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div className=\"row auth\">\r\n            <div className=\"col-12 grid-margin\">\r\n              <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                  <form\r\n                    className=\"form-sample\"\r\n                  >\r\n                    <p className=\"card-description\"> Make Top Perfomer </p>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-md-12\">\r\n                        <Form.Group className=\"row\">\r\n                          <label className=\"col-sm-4 col-form-label\">\r\n                            Perfomance Rank\r\n                          </label>\r\n                          <div className=\"col-sm-8\">\r\n                            <select\r\n                              className=\"form-control form-control-sm\"\r\n                              id=\"exampleFormControlSelect3\"\r\n                              name=\"perfomence\"\r\n                              onChange={onChangePerfomence}\r\n                            >\r\n                              <option value='1' selected={valueToEdit?.perfomance === 1}>1</option>\r\n                              <option value='2' selected={valueToEdit?.perfomance === 2}>2</option>\r\n                              <option value='3' selected={valueToEdit?.perfomance === 3}>3</option>\r\n                            </select>\r\n                          </div>\r\n                        </Form.Group>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"mt-3\">\r\n                      <button\r\n                        className=\"btn  btn-primary btn-lg font-weight-medium auth-form-btn\"\r\n                        type=\"button\"\r\n                        onClick={onPerformanceSubmit}\r\n                      >\r\n                        Submit Perfomance\r\n                      </button>\r\n                    </div>\r\n                  </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Modal.Body>\r\n      </Modal>\r\n      <Modal\r\n        show={show}\r\n        onHide={handleClose}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Update Branch</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div className=\"row auth\">\r\n            <div className=\"col-12 grid-margin\">\r\n              <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                  <form className=\"form-sample\" onSubmit={handleSubmit(onSubmit)}>\r\n                    <p className=\"card-description\"> Update Branch </p>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-md-12\">\r\n                        <Form.Group className=\"row\">\r\n                          <label className=\"col-sm-3 col-form-label\">Name</label>\r\n                          <div className=\"col-sm-9\">\r\n                            <Form.Control\r\n                              type=\"text\"\r\n                              name=\"name\"\r\n                              defaultValue={valueToEdit.name}\r\n                              {...register(\"name\", { required: true })}\r\n\r\n                            />\r\n                            {errors && errors.name && <p>name is required field</p>}\r\n                          </div>\r\n                        </Form.Group>\r\n                        <Form.Group className=\"row\">\r\n                          <label className=\"col-sm-3 col-form-label\">\r\n                            Address{\" \"}\r\n                          </label>\r\n                          <div className=\"col-sm-8\">\r\n                            <Form.Control\r\n                              type=\"text\"\r\n                              name=\"address\"\r\n                              defaultValue={valueToEdit.address}\r\n                              {...register(\"address\", { required: true })}\r\n                            />\r\n                            {errors && errors.address && (\r\n                              <p>address is required field</p>\r\n                            )}\r\n                          </div>\r\n                        </Form.Group>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"row\">\r\n                      <div className=\"col-md-12\">\r\n                        <Form.Group className=\"row\">\r\n                          <label className=\"col-sm-3 col-form-label\">\r\n                            Contact No\r\n                          </label>\r\n                          <div className=\"col-sm-9 contact_no\">\r\n                            <Form.Control\r\n                              type=\"text\"\r\n                              name=\"contactno\"\r\n                              defaultValue={valueToEdit.contactno}\r\n                              {...register(\"contactno\", {\r\n                                required: true,\r\n                                pattern: strongRegexMo,\r\n                              })}\r\n                            />\r\n                            {errors &&\r\n                              errors.contactno &&\r\n                              errors.contactno.type === \"required\" && (\r\n                                <p>contact number is required field</p>\r\n                              )}\r\n                            {errors &&\r\n                              errors.contactno &&\r\n                              errors.contactno.type === \"pattern\" && (\r\n                                <p>invalid phone number please use valid formate</p>\r\n                              )}\r\n                          </div>\r\n                        </Form.Group>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"row\">\r\n                      <div className=\"col-md-12\">\r\n                        <Form.Group className=\"row\">\r\n                          <label className=\"col-sm-3 col-form-label\">Email</label>\r\n                          <div className=\"col-sm-9\">\r\n                            <Form.Control\r\n                              type=\"text\"\r\n                              name=\"email\"\r\n                              defaultValue={valueToEdit.email}\r\n\r\n                              {...register(\"email\", {\r\n                                required: true,\r\n                                pattern: /^\\S+@\\S+$/i,\r\n                              })}\r\n                            />\r\n                            {errors &&\r\n                              errors.email &&\r\n                              errors.email.type === \"required\" && (\r\n                                <p>email is required field</p>\r\n                              )}\r\n                            {errors &&\r\n                              errors.email &&\r\n                              errors.email.type === \"pattern\" && (\r\n                                <p>invalid email formate</p>\r\n                              )}\r\n                          </div>\r\n                        </Form.Group>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"row\">\r\n                      <div className=\"col-md-12\">\r\n                        <Form.Group className=\"row\">\r\n                          <label className=\"col-sm-3 col-form-label\">\r\n                            status\r\n                          </label>\r\n                          <div className=\"col-sm-9\">\r\n                            <select\r\n                              className=\"form-control form-control-sm\"\r\n                              id=\"exampleFormControlSelect3\"\r\n                              name=\"status\"\r\n                              onChange={onChangeStatusForm}\r\n                            >\r\n                              {statusOption?.map((i) => {\r\n                                return (\r\n                                  <option\r\n                                    value={i?.value}\r\n                                    selected={+updateStatus === +i?.value}\r\n                                  >\r\n                                    {i?.label}\r\n                                  </option>\r\n                                );\r\n                              })}\r\n                            </select>\r\n                          </div>\r\n                        </Form.Group>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"row\">\r\n                      <div className=\"col-md-12\">\r\n                        <Form.Group className=\"row\">\r\n                          <label className=\"col-sm-3 col-form-label\">\r\n                            Select Role\r\n                          </label>\r\n                          <div className=\"col-sm-9\">\r\n                            <select\r\n                              className=\"form-control form-control-sm\"\r\n                              id=\"exampleFormControlSelect2\"\r\n                              name=\"branch\"\r\n                              onChange={onChangeRolepdate}\r\n                            >\r\n                              {roleOption?.map((i) => {\r\n                                return (\r\n                                  <>\r\n                                    <option\r\n                                      selected={i.value === roleUpdate}\r\n                                      value={i.value}\r\n                                    >\r\n                                      {i.label}\r\n                                    </option>\r\n                                  </>\r\n                                );\r\n                              })}\r\n                            </select>\r\n                          </div>\r\n                        </Form.Group>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"row\">\r\n                      <div className=\"col-md-12\">\r\n                        <Form.Group className=\"row\">\r\n                          <label className=\"col-sm-3 col-form-label\">\r\n                            Password\r\n                          </label>\r\n                          <div className=\"col-sm-9\">\r\n                            <Form.Control\r\n                              type=\"password\"\r\n                              name=\"password\"\r\n                              {...register(\"password\")}\r\n                            />\r\n                          </div>\r\n                        </Form.Group>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"row\">\r\n                      <div className=\"col-md-12\">\r\n                        <Form.Group className=\"row\">\r\n                          <label className=\"col-sm-5 col-form-label\">Branch Head Name</label>\r\n                          <div className=\"col-sm-7\">\r\n                            <Form.Control\r\n                              type=\"text\"\r\n                              name=\"b_head_name\"\r\n                              defaultValue={valueToEdit.b_head_name}\r\n                              {...register(\"b_head_name\", { required: true })}\r\n                            />\r\n                            {errors && errors.b_head_name && <p>branch head name is required field</p>}\r\n                          </div>\r\n                        </Form.Group>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"row\">\r\n                      <div className=\"col-md-12\">\r\n                        <Form.Group className=\"row\">\r\n                          <label className=\"col-sm-5 col-form-label\">Branch Head Contact</label>\r\n                          <div className=\"col-sm-7\">\r\n                            <Form.Control\r\n                              type=\"text\"\r\n                              name=\"b_head_contact_no\"\r\n                              defaultValue={valueToEdit.b_head_contact_no}\r\n                              {...register(\"b_head_contact_no\", { required: true })}\r\n                            />\r\n                            {errors && errors.b_head_contact_no && (\r\n                              <p>branch head number is required field</p>\r\n                            )}\r\n                          </div>\r\n                        </Form.Group>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"mt-3\">\r\n                      <button\r\n                        className=\"btn  btn-primary btn-lg font-weight-medium auth-form-btn\"\r\n                        type=\"submit\"\r\n                      >\r\n                        UPDATE\r\n                      </button>\r\n                    </div>\r\n                  </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Modal.Body>\r\n\r\n\r\n      </Modal>\r\n      <div className=\"page-header\">\r\n        <h3 className=\"page-title\">Branches / Show Branch </h3>\r\n        <nav aria-label=\"breadcrumb\">\r\n          <ol className=\"breadcrumb\">\r\n            <li className=\"breadcrumb-item\">\r\n              <a href=\"!#\" onClick={(event) => event.preventDefault()}>\r\n                {cookies?.user?.role} Dashboard\r\n              </a>\r\n            </li>\r\n            <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n              Show branches\r\n            </li>\r\n          </ol>\r\n        </nav>\r\n      </div>\r\n      <div className=\"col-lg-12 grid-margin stretch-card p0\">\r\n        <div className=\"card\">\r\n          <div className=\"card-body\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-6\">\r\n                <Form.Group className=\"row\">\r\n                  <label className=\"col-sm-5 col-form-label\">Search IBO</label>\r\n                  <div className=\"col-sm-7\">\r\n                    <select\r\n                      className=\"form-control form-control-sm\"\r\n                      id=\"exampleFormControlSelect2\"\r\n                      name=\"branch\"\r\n                      onChange={onChangeHandlerIBO}\r\n                    >\r\n                      <option selected={\"\" === selectedIBO} value={\"\"}>\r\n                        Not Selected\r\n                      </option>\r\n                      {IBOList?.map((i) => {\r\n                        return (\r\n                          <>\r\n                            <option\r\n                              selected={i.name === selectedIBO}\r\n                              value={i.name}\r\n                            >\r\n                              {i.name}\r\n                            </option>\r\n                          </>\r\n                        );\r\n                      })}\r\n                    </select>\r\n                  </div>\r\n                </Form.Group>\r\n              </div>\r\n\r\n\r\n              <div className=\"col-md-6\">\r\n                <div className=\"search-field d-none d-md-block\">\r\n                  <form className=\"d-flex align-items-center h-100\" action=\"#\">\r\n                    <div className=\"input-group\">\r\n                      <div className=\"input-group-prepend outline-gray bg-transparent\">\r\n                        <i className=\"input-group-text border-0 mdi mdi-magnify\"></i>\r\n                      </div>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control outline-gray bg-transparent border-0\"\r\n                        placeholder=\"Search Branches\"\r\n                        value={searchTerm}\r\n                        onChange={(e) => {\r\n                          setSearchTerm(e?.target?.value);\r\n                          setItemOffset(0);\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <h4 className=\"card-title\">Branch list</h4>\r\n\r\n            <div className=\"table-responsive\">\r\n              <table className=\"table table-striped\">\r\n                <thead>\r\n                  <tr>\r\n                    <th> Name </th>\r\n                    <th> Contact no. </th>\r\n                    <th> Email </th>\r\n                    <th> IBO </th>\r\n                    <th> Role </th>\r\n                    <th> Status </th>\r\n                    <th> Head Name </th>\r\n                    <th> Head Contact no. </th>\r\n                    <th> Generate Password </th>\r\n                    <th> view </th>\r\n                    <th> Edit </th>\r\n                    <th> Delete </th>\r\n                    {[\"admin\"].includes(cookies?.user?.role) && (\r\n                      <th></th>\r\n                    )}\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n\r\n                  {isLoading ?\r\n                    <Spinner />\r\n                    :\r\n                    itemlist?.map((item) => {\r\n                      return (\r\n                        <tr>\r\n                          <td>{item?.name}</td>\r\n                          <td>{item?.contactno}</td>\r\n                          <td>{item?.email}</td>\r\n                          <td>{item?.ibo}</td>\r\n                          <td>{item?.role}</td>\r\n                          <td>{formateStatus(item?.status)}</td>\r\n                          <td>{item?.b_head_name}</td>\r\n                          <td>{item?.b_head_contact_no}</td>\r\n                          {/* <td>\r\n                          <label className=\"badge badge-gradient-success\">\r\n                            Active\r\n                          </label>\r\n                          <label className=\"badge badge-gradient-danger\">\r\n                            Inactive\r\n                          </label>\r\n                        </td> */}\r\n                          <td>\r\n                            <button\r\n                              type=\"button\"\r\n                              className=\"btn btn-gradient-primary btn-sm \"\r\n                              onClick={() => generatePassword(item?.id)}\r\n                            >\r\n                              Generate\r\n                            </button>\r\n                          </td>\r\n                          <td>\r\n                            <button\r\n                              type=\"button\"\r\n                              className=\"btn btn-gradient-primary btn-sm \"\r\n                              onClick={() => { viewUser(item?.id) }}\r\n                            >\r\n                              View\r\n                            </button>\r\n                          </td>\r\n                          <td>\r\n                            <i onClick={() => handleShow(item)} className=\"mdi mdi-lead-pencil\"></i>\r\n                          </td>\r\n                          <td>\r\n                            <i onClick={() => deleteBranch(item?.id)} className=\"mdi mdi-delete\"></i>\r\n                          </td>\r\n                          {[\"admin\"].includes(cookies?.user?.role) && (\r\n                            <td>\r\n                              <button\r\n                                type=\"button\"\r\n                                className=\"btn btn-gradient-primary btn-sm \"\r\n                                onClick={() => handlePerfomanceShow(item)}\r\n                              >\r\n                                Make Top Perfomer\r\n                              </button>\r\n                            </td>\r\n                          )}\r\n                        </tr>\r\n                      );\r\n                    })}\r\n                </tbody>\r\n              </table>\r\n              <ReactPaginate\r\n                breakLabel=\"...\"\r\n                nextLabel=\"next >\"\r\n                className=\"client-list\"\r\n                onPageChange={handlePageClick}\r\n                pageRangeDisplayed={5}\r\n                pageCount={pageCount}\r\n                previousLabel=\"< previous\"\r\n                renderOnZeroPageCount={null}\r\n                forcePage={itemOffset}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BranchList;\r\n"],"sourceRoot":""}