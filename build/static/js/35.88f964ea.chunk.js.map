{"version":3,"sources":["utils/Functions/useUrl.js","utils/Functions/useDebounce.js","app/Admin-components/Product/ProductFetch.js"],"names":["useUrl","param","history","useHistory","useLocation","search","pathname","url","URLSearchParams","urlParam","get","useState","value","setValue","val","set","replace","toString","useDebounce","delay","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","ProductList","searchTerm","setSearchTerm","debouncedSearchTerm","isChecked","pageCount","setPageCount","itemOffset","setItemOffset","itemsPerPage","useCookies","cookies","setCookie","React","show","setShow","valueToEdit","setvalueToEdit","itemlist","setitemlist","isLoading","setIsLoading","list","useForm","mode","register","handleSubmit","reset","formState","errors","onSubmit","isDirty","isValid","data","formData","FormData","append","id","user","category","description","name","commision","status","UpdateProducts","toast","success","autoClose","response","message","error","process","getProductsList","items","results","totalPages","code","JSON","stringify","refreshToken","localStorage","getItem","path","userLogout","finally","push","onHide","backdrop","keyboard","Header","closeButton","Title","Body","className","Group","Control","type","defaultValue","required","placeholder","address","as","desc","selected","step","aria-label","href","onClick","event","preventDefault","role","aria-current","action","onChange","e","target","Fragment","map","item","index","key","formdata","statusChanged","uid","Swal","fire","title","text","icon","showCancelButton","cancelButtonColor","confirmButtonColor","confirmButtonText","cancelButtonText","then","result","deleteProductById","itemList","Object","keys","Promise","all","dismiss","DismissReason","cancel","imageURL","image","window","open","breakLabel","nextLabel","onPageChange","pageRangeDisplayed","previousLabel","renderOnZeroPageCount","forcePage"],"mappings":"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","file":"static/js/35.88f964ea.chunk.js","sourcesContent":["import { useState } from 'react'\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nexport const useUrl = (param) => {\n\n    const history = useHistory()\n    const { search, pathname } = useLocation()\n    const url = new URLSearchParams(search)\n\n    const urlParam = url.get(param)\n    const [value, setValue] = useState(urlParam !== null ? urlParam : '')\n\n    function _setValue(val){\n        url.set(param, val)\n        history.replace({ pathname, search: url.toString() }); \n        setValue(val)\n    }\n\n    return [value, _setValue]\n}","import { useEffect, useState } from \"react\";\n\n// Hook\nexport const useDebounce = (value, delay) => {\n    // State and setters for debounced value\n    const [debouncedValue, setDebouncedValue] = useState(value);\n    useEffect(\n      () => {\n        // Update debounced value after delay\n        const handler = setTimeout(() => {\n          setDebouncedValue(value);\n        }, delay);\n        // Cancel the timeout if value changes (also on delay change or unmount)\n        // This is how we prevent debounced value from updating if value is changed ...\n        // .. within the delay period. Timeout gets cleared and restarted.\n        return () => {\n          clearTimeout(handler);\n        };\n      },\n      [value, delay] // Only re-call effect if value or delay changes\n    );\n    return debouncedValue;\n  }","import React, { useEffect, useState } from \"react\";\nimport { useCookies } from \"react-cookie\";\nimport ReactPaginate from \"react-paginate\";\nimport { deleteProductById, getProductsList, userLogout, UpdateProducts } from \"../../../utils/APIs\";\nimport Swal from \"sweetalert2\";\nimport { useDebounce } from \"../../../utils/Functions/useDebounce\";\nimport Spinner from \"../../shared/Spinner\";\nimport { useUrl } from \"../../../utils/Functions/useUrl\";\nimport { toast } from \"react-toastify\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { useForm } from \"react-hook-form\";\nimport { Form } from 'react-bootstrap';\nimport { useHistory } from \"react-router-dom\";\n\n\nconst ProductList = () => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const debouncedSearchTerm = useDebounce(searchTerm, 500);\n\n  const [selectedProductType, setselectedProductType] = useState(\"\");\n  const [selectedProductCategory, setselectedProductCategory] = useState(\"\");\n  const [isChecked, setIsChecked] = useState(\"\");\n\n  // We start with an empty list of items.\n  const [pageCount, setPageCount] = useState(0);\n  // Here we use item offsets; we could also use page offsets\n  // following the API or data you're working with.\n  const [itemOffset, setItemOffset] = useUrl(\"page\");\n  const [itemsPerPage] = useState(10);\n  const [cookies, setCookie] = useCookies([\"user\"]);\n  const [show, setShow] = React.useState(false);\n  const [valueToEdit, setvalueToEdit] = useState({});\n  const [itemlist, setitemlist] = useState([]);\n  const [isLoading, setIsLoading] = useState(true)\n  const history = useHistory()\n\n  useEffect(() => {\n    list();\n  }, [itemOffset, itemsPerPage, debouncedSearchTerm]);\n\n  // Invoke when user click to request another page. \n  const handlePageClick = (event) => {\n    setItemOffset(event.selected);\n  };\n\n  const handleClose = () => {\n    setShow(false)\n    setvalueToEdit({})\n    reset()\n  };\n\n  const handleShow = (value) => {\n    reset()\n    setvalueToEdit(value)\n    setShow(true);\n  }\n\n  const { register, handleSubmit, reset, formState: { errors, isDirty, isValid } } = useForm({\n    mode: \"onChange\"\n  });\n\n  const deleteProduct = (uid) => {\n    Swal.fire({\n      title: \"Are you sure?\",\n      text: \"You will not be able to recover this imaginary file!\",\n      icon: \"warning\",\n      showCancelButton: true,\n      cancelButtonColor: \"#DD6B55\",\n      confirmButtonColor: \"#DD6B55\",\n      confirmButtonText: \"Yes, delete it!\",\n      cancelButtonText: \"No, keep it\",\n    }).then((result) => {\n      if (result.value) {\n        if (isChecked == '') {\n          return (\n            deleteProductById(uid).finally(() => list()),\n            Swal.fire(\n              \"Deleted!\",\n              \"Your imaginary file has been deleted.\",\n              \"success\"\n            )\n          );\n        } else {\n          const itemList = Object.keys(isChecked).map((id) => {\n            if (isChecked[id] === true) {\n              deleteProductById(id)\n            }\n            Swal.fire(\n              \"Deleted!\",\n              \"Your imaginary file has been deleted.\",\n              \"success\"\n            )\n          })\n          Promise.all(itemList).then(() => {\n            list();\n          });\n        }\n      } else if (result.dismiss === Swal.DismissReason.cancel) {\n        Swal.fire(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\n      }\n    });\n  };\n\n  const onSubmit = async (data) => {\n    try {\n      const formData = new FormData()\n      formData.append(\"productId\", valueToEdit?.id);\n      formData.append(\"user\", cookies?.user?.id)\n      formData.append(\"category\", data?.category)\n      formData.append(\"description\", data?.description)\n      formData.append(\"name\", data?.name)\n      formData.append(\"commision\", data?.commision)\n      formData.append(\"status\", data?.status)\n      await UpdateProducts(formData)\n      toast.success('Product updated Successfully', {\n        autoClose: 3000\n      })\n      list()\n    } catch (error) {\n      if (\n        error &&\n        error.response &&\n        error.response.data &&\n        error.response.data.message\n      ) {\n        toast.error(error.response.data.message);\n      } else {\n        toast.error(process.env.REACT_APP_ERROR_MESSAGE);\n      }\n    } finally {\n      setShow(false)\n    }\n  };\n\n  const onClickDownload = (imageURL) => {\n    window.open(imageURL, '_blank');\n  }\n\n  const list = async () => {\n    setIsLoading(true)\n    try {\n      const items = await (\n        await getProductsList(\n          itemsPerPage,\n          +itemOffset + 1,\n          searchTerm,\n        )\n      ).data;\n      setitemlist(items?.results);\n      setPageCount(items?.totalPages);\n      setIsLoading(false)\n    } catch (error) {\n      if (error?.response?.data?.message) {\n        toast.error(error.response.data.message);\n      } else {\n        toast.error(process.env.REACT_APP_ERROR_MESSAGE);\n      }\n\n      if (error?.response?.data?.code === 401) {\n        const formData = JSON.stringify({\n          refreshToken: localStorage.getItem(\"refreshToken\"),\n        });\n        setCookie(\"user\", null, { path: \"/\" });\n        userLogout(formData).finally(() => {\n          history.push(\"/user-pages/login-1\");\n        });\n      }\n    }\n  }\n  const statusChanged = (id, e) => {\n\n    const formdata = new FormData();\n    formdata.append(\"productId\", id);\n    formdata.append(\"status\", e.target.value);\n\n    UpdateProducts(formdata)\n    toast.success('Status updated successfully', {\n      autoClose: true\n    })\n  }\n\n  const handleMultiChange = (e) => {\n    setIsChecked({ ...isChecked, [e.target.id]: e.target.checked });\n  }\n\n\n\n\n  return (\n    <div>\n      <Modal\n        show={show}\n        onHide={handleClose}\n        backdrop=\"static\"\n        keyboard={false}\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>Update Product</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <div className=\"row auth\">\n            <div className=\"col-12 grid-margin\">\n              <div className=\"card\">\n                <div className=\"card-body\">\n                  <form className=\"form-sample\" onSubmit={handleSubmit(onSubmit)}>\n                    <p className=\"card-description\"> Update Product </p>\n                    <div className=\"row\">\n                      <div className=\"col-md-12\">\n                        <Form.Group className=\"row\">\n                          <label className=\"col-sm-3 col-form-label\">\n                            Name\n                          </label>\n                          <div className=\"col-sm-9\">\n                            <Form.Control\n                              type=\"text\"\n                              name=\"name\"\n                              defaultValue={valueToEdit.name}\n                              {...register(\"name\", { required: true })}\n                              placeholder=\"name\"\n                            />\n                            {errors && errors.name && <p>name is required field</p>}\n                          </div>\n                        </Form.Group>\n                      </div>\n                    </div>\n                    <div className=\"row\">\n                      <div className=\"col-md-12\">\n                        <Form.Group className=\"row\">\n                          <label className=\"col-sm-3 col-form-label\">\n                            Category{\" \"}\n                          </label>\n                          <div className=\"col-sm-9\">\n                            <Form.Control\n                              type=\"text\"\n                              name=\"category\"\n                              defaultValue={valueToEdit.category}\n                              {...register(\"category\", { required: true })}\n                              placeholder=\"category\"\n                            />\n                            {errors && errors.address && (\n                              <p>Category is required field</p>\n                            )}\n                          </div>\n                        </Form.Group>\n                      </div>\n                    </div>\n                    <div className=\"row\">\n                      <div className=\"col-md-12\">\n                        <Form.Group className=\"row\">\n                          <label className=\"col-sm-3 col-form-label\">\n                            Description{\" \"}\n                          </label>\n                          <div className=\"col-sm-9\">\n                            <Form.Control\n                              as=\"textarea\"\n                              name=\"description\"\n                              defaultValue={valueToEdit.description}\n                              {...register(\"description\", { required: true })}\n                              placeholder=\"description\"\n                            />\n                            {errors && errors.desc && (\n                              <p>Description is required field</p>\n                            )}\n                          </div>\n                        </Form.Group>\n                      </div>\n                    </div>\n                    <div className=\"row\" >\n                      <div className=\"col-md-12\">\n                        <Form.Group className=\"row\">\n                          <label className=\"col-sm-3 col-form-label\">Status</label>\n                          <div className=\"col-sm-9\">\n                            <select\n                              className=\"form-control form-control-lg\"\n                              id=\"exampleFormControlSelect2\"\n                              name=\"status\"\n                              {...register(\"status\", {\n                                required: true,\n                              })}>\n                              <option value=''>--Select Status--</option>\n                              <option value='1' selected={valueToEdit.status === '1'}>Active</option>\n                              <option value='0' selected={valueToEdit.status === '0'}>Inactive</option>\n                            </select>\n                            {errors && errors.status && (\n                              <p>status is required field</p>\n                            )}\n                          </div>\n                        </Form.Group>\n                      </div>\n                    </div>\n                    <div className=\"row\">\n                      <div className=\"col-md-12\">\n                        <Form.Group className=\"row\">\n                          <label className=\"col-sm-3 col-form-label\">\n                            Commision{\" \"}\n                          </label>\n                          <div className=\"col-sm-9\">\n                            <Form.Control\n                              type=\"number\"\n                              step=\"0.00001\"\n                              name=\"commision\"\n                              defaultValue={valueToEdit.commision}\n                              {...register(\"commision\", { required: true })}\n                              placeholder=\"commision\"\n                            />\n                            {errors && errors.commision && (\n                              <p>Commision is required field</p>\n                            )}\n                          </div>\n                        </Form.Group>\n                      </div>\n                    </div>\n                    <div className=\"mt-3\">\n                      <button\n                        className=\"btn  btn-primary btn-lg font-weight-medium auth-form-btn\"\n                        type=\"submit\"\n                      >\n                        UPDATE\n                      </button>\n                    </div>\n                  </form>\n                </div>\n              </div>\n            </div>\n          </div >\n        </Modal.Body >\n      </Modal >\n      <div className=\"page-header\">\n        <h3 className=\"page-title\">Products / Show Products </h3>\n        <nav aria-label=\"breadcrumb\">\n          <ol className=\"breadcrumb\">\n            <li className=\"breadcrumb-item\">\n              <a href=\"!#\" onClick={(event) => event.preventDefault()}>\n                {cookies?.user?.role} Dashboard\n              </a>\n            </li>\n            <li className=\"breadcrumb-item active\" aria-current=\"page\">\n              Show Products\n            </li>\n          </ol>\n        </nav>\n      </div>\n      <div className=\"col-lg-12 grid-margin stretch-card p0\">\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <div className=\"row\">\n              <div className=\"col-md-6\">\n              </div>\n\n              <div className=\"col-md-6\">\n                <div className=\"search-field d-none d-md-block\">\n                  <form className=\"d-flex align-items-center h-100\" action=\"#\">\n                    <div className=\"input-group\">\n                      <div className=\"input-group-prepend outline-gray bg-transparent\">\n                        <i className=\"input-group-text border-0 mdi mdi-magnify\"></i>\n                      </div>\n                      <input\n                        type=\"text\"\n                        className=\"form-control outline-gray bg-transparent border-0\"\n                        placeholder=\"Search Products\"\n                        value={searchTerm}\n                        onChange={(e) => {\n                          setSearchTerm(e?.target?.value);\n                          setItemOffset(0);\n                        }}\n                      />\n                    </div>\n                  </form>\n                </div>\n              </div>\n\n            </div>\n            <h4 className=\"card-title\">Product list</h4>\n\n            <div className=\"table-responsive\">\n              <table className=\"table table-striped\">\n                <thead>\n                  <tr>\n                    <th> Name </th>\n                    <th> Category </th>\n                    <th> Description </th>\n                    <th> Commision</th>\n                    <th> Status </th>\n                    <th> Edit </th>\n                    <th> Delete </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {\n                    isLoading ? <React.Fragment><Spinner /></React.Fragment>\n                      :\n                      itemlist?.map((item, index) => {\n                        return (\n                          <tr key={index}>\n                            <td>{item?.name}</td>\n                            <td>{item?.category}</td>\n                            <td>{item?.description}</td>\n                            <td>{item?.commision}</td>\n                            <td>\n                              <select\n                                id={item.id}\n                                onChange={(e) => statusChanged(item.id, e)}\n                              >\n                                <option\n                                  value=\"0\"\n                                  selected={item.status == 0 ? \"selected\" : false}\n                                >\n                                  InActive\n                                </option>\n                                <option\n                                  value=\"1\"\n                                  selected={item.status == 1 ? \"selected\" : false}\n                                >\n                                  Active\n                                </option>\n                              </select>\n                            </td>\n                            <td><i onClick={() => handleShow(item)} className=\"mdi mdi-lead-pencil\"></i></td>\n                            <td>\n                              <i\n                                onClick={() => deleteProduct(item?.id)}\n                                className=\"mdi mdi-delete\"\n                              ></i>\n                            </td>\n                            <td>\n                              <button\n                                type=\"button\"\n                                className=\"btn btn-gradient-primary btn-sm \"\n                                onClick={() => onClickDownload(item?.image)}\n                              >\n                                Download Product Image\n                              </button>\n                            </td>\n                          </tr>\n                        );\n                      })}\n                </tbody>\n              </table>\n              <ReactPaginate\n                breakLabel=\"...\"\n                nextLabel=\"next >\"\n                className=\"client-list\"\n                onPageChange={handlePageClick}\n                pageRangeDisplayed={5}\n                pageCount={pageCount}\n                previousLabel=\"< previous\"\n                renderOnZeroPageCount={null}\n                forcePage={itemOffset}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div >\n  );\n};\n\nexport default ProductList;\n"],"sourceRoot":""}