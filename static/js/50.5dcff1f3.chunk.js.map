{"version":3,"sources":["app/Admin-components/Appointment/FetchAppoinments.js"],"names":["FetchAppoinments","history","useHistory","useCookies","cookies","setCookie","useState","itemlist","setitemlist","pageCount","setPageCount","itemOffset","setItemOffset","itemsPerPage","React","useForm","mode","register","handleSubmit","reset","formState","errors","isDirty","isValid","useEffect","getData","getAppoinmentsList","data","result","results","console","log","totalPages","response","message","toast","error","process","code","formData","JSON","stringify","refreshToken","localStorage","getItem","path","userLogout","finally","push","className","aria-label","href","onClick","event","preventDefault","user","role","aria-current","map","item","name","Date","fromDate","toLocaleDateString","day","month","year","toDate","desc","id","onChange","e","target","value","UpdateAppoinments","success","autoClose","statusChanged","selected","status","breakLabel","nextLabel","onPageChange","newOffset","forcePage","pageRangeDisplayed","previousLabel","renderOnZeroPageCount"],"mappings":"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","file":"static/js/50.5dcff1f3.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useCookies } from \"react-cookie\";\nimport ReactPaginate from \"react-paginate\";\nimport { getAppoinmentsList, userLogout, UpdateAppoinments } from \"../../../utils/APIs\";\nimport { toast } from \"react-toastify\";\nimport { useHistory } from \"react-router-dom\";\nimport Swal from \"sweetalert2\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { useForm } from \"react-hook-form\";\nimport { Form } from 'react-bootstrap';\n\n\nconst FetchAppoinments = () => {\n  const history = useHistory()\n  const [cookies, setCookie] = useCookies([\"user\"]);\n  const [itemlist, setitemlist] = useState([]);\n  const [employeeList, setemployeeList] = useState([])\n  // We start with an empty list of items.\n  const [pageCount, setPageCount] = useState(0);\n  // Here we use item offsets; we could also use page offsets\n  // following the API or data you're working with.\n  const [itemOffset, setItemOffset] = useState(0);\n  const [itemsPerPage] = useState(10);\n  const [show, setShow] = React.useState(false);\n  const [valueToEdit, setvalueToEdit] = useState({});\n\n  const { register, handleSubmit, reset, formState: { errors, isDirty, isValid } } = useForm({\n    mode: \"onChange\"\n  });\n\n  const [modelMode, setmodelMode] = useState('create')\n  const statusChanged = (id, e) => {\n    console.log(e.target.value, id);\n    UpdateAppoinments({\n      \"appoinments_id\": id,\n      \"status\": e.target.value\n    })\n    toast.success('Status updated successfully',{\n      autoClose : true\n    })\n  }\n\n  const onSubmit = async (data) => {\n    const date1 = new Date(data?.date_from);\n    const date2 = new Date(data?.date_to);\n    const diffTime = Math.abs(date2 - date1);\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    //   if(modelMode === 'edit'){\n    //   try {\n    //     const formData = JSON.stringify({\n    //       leave_id: valueToEdit?.id,\n    //       user: data.user,\n    //       reason: data?.reason,\n    //       leave_status: data?.leave_status,\n    //       total_leave : diffDays,\n    //       date_from : new Date(data?.date_from).toISOString(),\n    //       date_to : new Date(data?.date_to).toISOString(),\n    //     });\n    //     await updateEmployeeLeave(formData)\n        // toast.success('Leave updated successfully',{\n        //   autoClose : true\n        // })\n    //   } catch (error) {\n    //     if (\n    //       error &&\n    //       error.response &&\n    //       error.response.data &&\n    //       error.response.data.message\n    //     ) {\n    //       toast.error(error.response.data.message);\n    //     } else {\n    //       toast.error(process.env.REACT_APP_ERROR_MESSAGE);\n    //     }\n    //   }\n    //   finally {\n    //     handleClose()\n    //     getData()\n    //   }\n    // }\n\n\n  };\n\n  const handleClose = () => {\n    setShow(false)\n    setvalueToEdit({})\n    reset()\n  };\n\n\n  const handleShow = (value, mode) => {\n    reset()\n\n    if (mode === 'edit') {\n      setvalueToEdit(value)\n      setmodelMode('edit')\n    }\n\n    if (mode === 'create') {\n      setvalueToEdit(value)\n      setmodelMode('create')\n    }\n    setShow(true);\n  }\n\n  useEffect(() => {\n    getData()\n  }, [itemOffset, itemsPerPage]);\n\n  // useEffect(() => {\n  //   getEmployeeData()\n  // }, []);\n\n  // const getEmployeeData = async () => {\n  //     try {\n  //       const result = await getAllEmployee()\n  //       setemployeeList(result.data.results)\n  //     } catch (error) {\n  //       getEmployeeData()\n  //     }\n  // }\n\n  const getData = async () => {\n    try {\n      const result = await (await getAppoinmentsList(itemsPerPage, itemOffset)).data;\n      setitemlist(result?.results);\n      console.log(\"res\", result?.results)\n      // Fetch items from another resources.\n      setPageCount(result?.totalPages);\n    } catch (error) {\n      if (\n        error?.response?.data?.message\n      ) {\n        toast.error(error.response.data.message);\n      } else {\n        toast.error(process.env.REACT_APP_ERROR_MESSAGE);\n      }\n\n      if (error?.response?.data?.code === 401) {\n        const formData = JSON.stringify({\n          refreshToken: localStorage.getItem('refreshToken'),\n        });\n        setCookie('user', null, { path: '/' });\n        userLogout(formData).finally(() => {\n          history.push('/user-pages/login-1')\n        })\n      }\n    }\n\n  }\n\n  // Invoke when user click to request another page.\n  const handlePageClick = (event) => {\n    const newOffset = (event.selected + 1);\n    setItemOffset(newOffset);\n  };\n\n\n\n\n  return (\n    <div>\n\n      <div className=\"page-header\">\n        <h3 className=\"page-title\">Appoinments / Book Appoinment </h3>\n        <nav aria-label=\"breadcrumb\">\n          <ol className=\"breadcrumb\">\n            <li className=\"breadcrumb-item\">\n              <a href=\"!#\" onClick={(event) => event.preventDefault()}>\n                {cookies?.user?.role} Dashboard\n              </a>\n            </li>\n            <li className=\"breadcrumb-item active\" aria-current=\"page\">\n              Show Appoinment\n            </li>\n          </ol>\n        </nav>\n      </div>\n      <div className=\"col-lg-12 grid-margin stretch-card p0\">\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <h4 className=\"card-title\">Show Appoinment</h4>\n\n            <div className=\"table-responsive\">\n              <table className=\"table table-striped\">\n                <thead>\n                  <tr>\n                    <th> User </th>\n                    <th> Date From </th>\n                    <th> Date To </th>\n                    <th> Description </th>\n                    <th > Status </th>\n\n                  </tr>\n                </thead>\n                <tbody>\n                  {itemlist?.map((item) => {\n                    return (\n                      <tr>\n                        <td>{item?.user?.name}</td>\n\n                        <td>{new Date(item?.fromDate)?.toLocaleDateString('en-GB', { day: 'numeric', month: 'short', year: 'numeric' })}</td>\n                        <td>{new Date(item?.toDate)?.toLocaleDateString('en-GB', { day: 'numeric', month: 'short', year: 'numeric' })}</td>\n                        <td>{item?.desc}</td>\n                        <td>\n                          <select\n\n                            id={item.id}\n\n                            onChange={(e) => statusChanged(item.id, e)}\n                          >\n                            <option\n                              value=\"1\"\n                              selected={item.status == 1 ? \"selected\" : false}\n                            >\n                              Processing\n                            </option>\n                            <option\n                              value=\"2\"\n                              selected={item.status == 2 ? \"selected\" : false}\n                            >\n                              Approved\n                            </option>\n                            <option\n                              value=\"3\"\n                              selected={item.status == 3 ? \"selected\" : false}\n                            >\n                              Rejected\n                            </option>\n                            <option\n                              value=\"4\"\n                              selected={item.status == 4 ? \"selected\" : false}\n                            >\n                              Successfull\n                            </option>\n                            <option\n                              value=\"5\"\n                              selected={item.status == 5 ? \"selected\" : false}\n                            >\n                              Terminated\n                            </option>\n                          </select>\n                        </td>\n\n\n\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n              <ReactPaginate\n                breakLabel=\"...\"\n                nextLabel=\"next >\"\n                className=\"client-list\"\n                onPageChange={handlePageClick}\n                forcePage={0}\n                pageRangeDisplayed={5}\n                pageCount={pageCount}\n                previousLabel=\"< previous\"\n                renderOnZeroPageCount={null}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FetchAppoinments;\n"],"sourceRoot":""}