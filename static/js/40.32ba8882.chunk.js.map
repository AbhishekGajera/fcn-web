{"version":3,"sources":["utils/Functions/useUrl.js","utils/Functions/useDebounce.js","app/Admin-components/ContactedClients/ClientList/index.js"],"names":["useUrl","param","history","useHistory","useLocation","search","pathname","url","URLSearchParams","urlParam","get","useState","value","setValue","val","set","replace","toString","useDebounce","delay","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","ClientList","useCookies","cookies","setCookie","itemlist","setitemlist","searchTerm","setSearchTerm","debouncedSearchTerm","useForm","mode","formState","errors","isDirty","isValid","pageCount","setPageCount","itemOffset","setItemOffset","itemsPerPage","isLoading","setIsLoading","list","user","role","getConnectByBranch","name","data","items","getConnect","results","totalPages","response","message","toast","error","process","code","formData","JSON","stringify","refreshToken","localStorage","getItem","path","userLogout","finally","push","csvreport","headers","label","key","filename","className","aria-label","href","onClick","event","preventDefault","aria-current","type","fileName","wb","Sheets","XLSX","json_to_sheet","SheetNames","excelBuffer","bookType","Blob","FileSaver","exportToCSV","action","placeholder","onChange","e","target","map","item","contactno","branch","moment","fromDate","format","Id","id","breakLabel","nextLabel","onPageChange","window","scrollTo","selected","pageRangeDisplayed","previousLabel","renderOnZeroPageCount","forcePage"],"mappings":"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","file":"static/js/40.32ba8882.chunk.js","sourcesContent":["import { useState } from 'react'\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\n\r\nexport const useUrl = (param) => {\r\n\r\n    const history = useHistory()\r\n    const { search, pathname } = useLocation()\r\n    const url = new URLSearchParams(search)\r\n\r\n    const urlParam = url.get(param)\r\n    const [value, setValue] = useState(urlParam !== null ? urlParam : '')\r\n\r\n    function _setValue(val){\r\n        url.set(param, val)\r\n        history.replace({ pathname, search: url.toString() }); \r\n        setValue(val)\r\n    }\r\n\r\n    return [value, _setValue]\r\n}","import { useEffect, useState } from \"react\";\r\n\r\n// Hook\r\nexport const useDebounce = (value, delay) => {\r\n    // State and setters for debounced value\r\n    const [debouncedValue, setDebouncedValue] = useState(value);\r\n    useEffect(\r\n      () => {\r\n        // Update debounced value after delay\r\n        const handler = setTimeout(() => {\r\n          setDebouncedValue(value);\r\n        }, delay);\r\n        // Cancel the timeout if value changes (also on delay change or unmount)\r\n        // This is how we prevent debounced value from updating if value is changed ...\r\n        // .. within the delay period. Timeout gets cleared and restarted.\r\n        return () => {\r\n          clearTimeout(handler);\r\n        };\r\n      },\r\n      [value, delay] // Only re-call effect if value or delay changes\r\n    );\r\n    return debouncedValue;\r\n  }","import React, { useEffect, useState } from \"react\";\r\nimport { useCookies } from \"react-cookie\";\r\nimport ReactPaginate from \"react-paginate\";\r\nimport { userLogout, getConnect, getConnectByBranch } from \"../../../../utils/APIs\";\r\nimport { CSVLink } from \"react-csv\";\r\nimport * as FileSaver from \"file-saver\";\r\nimport * as XLSX from \"xlsx\";\r\n\r\nimport { toast } from \"react-toastify\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useUrl } from \"../../../../utils/Functions/useUrl\";\r\nimport { useDebounce } from \"../../../../utils/Functions/useDebounce\";\r\nimport Spinner from \"../../../shared/Spinner\";\r\nimport moment from 'moment';\r\n\r\nconst ClientList = () => {\r\n  const history = useHistory();\r\n  const [cookies, setCookie] = useCookies([\"user\"]);\r\n  const [itemlist, setitemlist] = useState([]);\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const debouncedSearchTerm = useDebounce(searchTerm, 500);\r\n  const {\r\n    formState: { errors, isDirty, isValid },\r\n  } = useForm({\r\n    mode: \"onChange\",\r\n  });\r\n\r\n  // We start with an empty list of items.\r\n  const [pageCount, setPageCount] = useState(0);\r\n  // Here we use item offsets; we could also use page offsets\r\n  // following the API or data you're working with.\r\n  const [itemOffset, setItemOffset] = useUrl(\"page\");\r\n  const [itemsPerPage] = useState(20);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    list();\r\n  }, [itemOffset, itemsPerPage, debouncedSearchTerm]);\r\n\r\n  const list = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      let items \r\n      if(cookies?.user?.role === 'branch'){\r\n        items = await (\r\n          await getConnectByBranch(itemsPerPage, +itemOffset + 1, searchTerm, cookies?.user?.name)\r\n        ).data;\r\n      }\r\n\r\n      if(cookies?.user?.role === 'admin'){\r\n        items = await (\r\n          await getConnect(itemsPerPage, +itemOffset + 1, searchTerm)\r\n        ).data;\r\n      }\r\n      setitemlist(items?.results);\r\n      setPageCount(items?.totalPages);\r\n    } catch (error) {\r\n      if (error?.response?.data?.message) {\r\n        toast.error(error.response.data.message);\r\n      } else {\r\n        toast.error(process.env.REACT_APP_ERROR_MESSAGE);\r\n      }\r\n\r\n      if (error?.response?.data?.code === 401) {\r\n        const formData = JSON.stringify({\r\n          refreshToken: localStorage.getItem(\"refreshToken\"),\r\n        });\r\n        setCookie(\"user\", null, { path: \"/\" });\r\n        userLogout(formData).finally(() => {\r\n          history.push(\"/user-pages/login-1\");\r\n        });\r\n      }\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  // Invoke when user click to request another page.\r\n  const handlePageClick = (event) => {\r\n    window.scrollTo(0, 0);\r\n    setItemOffset(event.selected);\r\n  };\r\n\r\n  const convertClient = (Id) =>{   \r\n    history.push({\r\n      pathname: '/clients/createclient',\r\n      search: \"?\" + new URLSearchParams({ id: Id }).toString()\r\n    })\r\n  }\r\n\r\n\r\n  // excel export\r\n  const fileType =\r\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\r\n  const fileExtension = \".xlsx\";\r\n\r\n\r\n  // csv export\r\n  const exportToCSV = (fileName) => {\r\n    const ws = XLSX.utils.json_to_sheet(itemlist);\r\n    const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\r\n    const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\r\n    const data = new Blob([excelBuffer], { type: fileType });\r\n    FileSaver.saveAs(data, fileName + fileExtension);\r\n  };\r\n\r\n  const headers = [\r\n    { label: \"Name\", key: \"name\", },\r\n    { label: \"Contact no\", key: \"contactno\", },\r\n    { label: \"Branch\", key: \"branch\", },\r\n    { label: \"Date\", key: \"date\", },\r\n    { label: \"Type\", key: \"type\", },\r\n  ]\r\n\r\n  const csvreport = {\r\n    data: itemlist,\r\n    headers: headers,\r\n    filename: 'Clue_Mediator_Report.csv'\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"page-header\">\r\n        <h3 className=\"page-title\">Contacted clients / Fetch Clients </h3>\r\n        <nav aria-label=\"breadcrumb\">\r\n          <ol className=\"breadcrumb\">\r\n            <li className=\"breadcrumb-item\">\r\n              <a href=\"!#\" onClick={(event) => event.preventDefault()}>\r\n                {cookies?.user?.role} Dashboard\r\n              </a>\r\n            </li>\r\n            <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n              fetch clients\r\n            </li>\r\n          </ol>\r\n        </nav>\r\n      </div>\r\n      <div className=\"col-lg-12 grid-margin stretch-card p0\">\r\n        <div className=\"card\">\r\n          <div className=\"card-body\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-4\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-gradient-primary btn-sm \"\r\n                >\r\n                  <CSVLink {...csvreport} className=\"text-white\">Export to CSV</CSVLink>\r\n                </button>\r\n              </div>\r\n\r\n              <div className=\"col-md-4\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-gradient-primary btn-sm \"\r\n                  onClick={() => exportToCSV('test')}\r\n                >\r\n                  Download Excel\r\n                </button>\r\n              </div>\r\n\r\n              <div className=\"col-md-4\">\r\n                <div className=\"search-field d-none d-md-block\">\r\n                  <form className=\"d-flex align-items-center h-100\" action=\"#\">\r\n                    <div className=\"input-group\">\r\n                      <div className=\"input-group-prepend outline-gray bg-transparent\">\r\n                        <i className=\"input-group-text border-0 mdi mdi-magnify\"></i>\r\n                      </div>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control outline-gray bg-transparent border-0\"\r\n                        placeholder=\"Search Clients\"\r\n                        value={searchTerm}\r\n                        onChange={(e) => {\r\n                          setSearchTerm(e?.target?.value);\r\n                          setItemOffset(0);\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"table-responsive\">\r\n              <table className=\"table table-striped\">\r\n                <thead>\r\n                  <tr>\r\n                    <th> Name </th>\r\n                    <th> Contact no. </th>\r\n                    <th> Branch </th>\r\n                    <th> Date </th>\r\n                    <th> Type </th>\r\n                    <th> Convert </th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {isLoading ? (\r\n                    <Spinner />\r\n                  ) : (\r\n                    itemlist?.map((item) => {\r\n                      return (\r\n                        <tr>\r\n                          <td>{item?.name}</td>\r\n                          <td>{item?.contactno}</td>\r\n                          <td>{item?.branch}</td>\r\n                          <td>{moment(item?.fromDate).format('DD-MM-YYYY')}</td>\r\n                          <td>{item?.type === 1 ? \"Free\" : \"Paid\"}</td>\r\n                          <td><button\r\n                            type=\"button\"\r\n                            className=\"btn btn-gradient-primary btn-sm \"\r\n                            onClick={() => {convertClient(item?.id)}}\r\n                          >\r\n                            Convert\r\n                          </button></td>\r\n                        </tr>\r\n                      );\r\n                    })\r\n                  )}\r\n                </tbody>\r\n              </table>\r\n              <ReactPaginate\r\n                breakLabel=\"...\"\r\n                nextLabel=\"next >\"\r\n                className=\"client-list\"\r\n                onPageChange={handlePageClick}\r\n                pageRangeDisplayed={5}\r\n                pageCount={pageCount}\r\n                previousLabel=\"< previous\"\r\n                renderOnZeroPageCount={null}\r\n                forcePage={itemOffset}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ClientList;\r\n"],"sourceRoot":""}