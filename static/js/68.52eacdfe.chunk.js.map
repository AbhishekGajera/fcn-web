{"version":3,"sources":["app/Admin-components/Product-Assign/AssignProduct.js"],"names":["AssignProduct","useState","productlist","setproductlist","userlist","setuserlist","useCookies","setCookie","history","useHistory","productList","getProductsListClient","data","items","results","response","code","formData","JSON","stringify","refreshToken","localStorage","getItem","path","userLogout","finally","push","userList","getUsersList","useForm","mode","register","handleSubmit","reset","formState","errors","onSubmit","isDirty","isValid","getValues","CreateAssignProduct","toast","success","message","error","process","useEffect","className","style","display","justifyContent","Group","id","name","required","map","item","index","key","value","label","Control","type","placeholder","maxAmount","minAmount"],"mappings":"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","file":"static/js/68.52eacdfe.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Form } from 'react-bootstrap';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useCookies } from \"react-cookie\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { CreateAssignProduct, getUsersList, userLogout, getProductsListClient } from \"../../../utils/APIs\";\r\n\r\n\r\nconst AssignProduct = () => {\r\n    const [productlist, setproductlist] = useState([]);\r\n    const [userlist, setuserlist] = useState([]);\r\n    const [cookies, setCookie] = useCookies([\"user\"]);\r\n\r\n    const history = useHistory()\r\n\r\n\r\n    const productList = async () => {\r\n        try {\r\n            const items = await (await getProductsListClient()).data;\r\n            // console.log(\"itm\", items)\r\n            setproductlist(items?.results);\r\n            // setPageCount(items?.totalPages);\r\n        } catch (error) {\r\n\r\n\r\n            if (error?.response?.data?.code === 401) {\r\n                const formData = JSON.stringify({\r\n                    refreshToken: localStorage.getItem(\"refreshToken\"),\r\n                });\r\n                setCookie(\"user\", null, { path: \"/\" });\r\n                userLogout(formData).finally(() => {\r\n                    history.push(\"/user-pages/login-1\");\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    const userList = async () => {\r\n        try {\r\n            const items = await (await getUsersList()).data;\r\n            // console.log(\"itm\", items)\r\n            setuserlist(items?.results);\r\n            // setPageCount(items?.totalPages);\r\n        } catch (error) {\r\n            if (error?.response?.data?.code === 401) {\r\n                const formData = JSON.stringify({\r\n                    refreshToken: localStorage.getItem(\"refreshToken\"),\r\n                });\r\n                setCookie(\"user\", null, { path: \"/\" });\r\n                userLogout(formData).finally(() => {\r\n                    history.push(\"/user-pages/login-1\");\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n\r\n    // form validation\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        reset,\r\n        formState: { errors, isDirty, isValid },\r\n        getValues\r\n    } = useForm({\r\n        mode: \"onChange\",\r\n    });\r\n\r\n    const values = getValues();\r\n\r\n\r\n    const onSubmit = async (data) => {\r\n        // console.log(\"data\",data);\r\n        try {\r\n            await CreateAssignProduct(data)\r\n            toast.success(\"Assign Product created successfully\");\r\n            reset()\r\n            history.push('/product-assign/product')\r\n        } catch (error) {\r\n            if (\r\n                error &&\r\n                error.response &&\r\n                error.response.data &&\r\n                error.response.data.message\r\n            ) {\r\n                toast.error(error.response.data.message);\r\n            } else {\r\n                toast.error(process.env.REACT_APP_ERROR_MESSAGE);\r\n            }\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        productList();\r\n        userList();\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <div className='page-header'>\r\n                <h3 className='page-title'>Assign Product</h3>\r\n            </div>\r\n            <div className=\"row auth\" style={{ display: 'flex', justifyContent: 'center' }}>\r\n                <div className=\"col-6 grid-margin\" >\r\n                    <div className=\"card\">\r\n                        <div className=\"card-body\">\r\n                            <form className=\"form-sample\" onSubmit={handleSubmit(onSubmit)}>\r\n                                <p className=\"card-description\"> Assign Product </p>\r\n                                <div className=\"row\" >\r\n                                    <div className=\"col-md-12\">\r\n                                        <Form.Group className=\"row\">\r\n                                            <label className=\"col-sm-4 col-form-label\">User List</label>\r\n                                            <div className=\"col-sm-8\">\r\n                                                <select\r\n                                                    className=\"form-control form-control-lg\"\r\n                                                    id=\"exampleFormControlSelect2\"\r\n                                                    name=\"userId\"\r\n                                                    {...register(\"userId\", {\r\n                                                        required: true,\r\n                                                    })}>\r\n                                                    {userlist.map((item, index) => (\r\n\r\n                                                        <option key={index} value={item?.id} label={item?.name}></option>\r\n                                                    ))}\r\n                                                </select>\r\n                                            </div>\r\n                                        </Form.Group>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"row\" >\r\n                                    <div className=\"col-md-12\">\r\n                                        <Form.Group className=\"row\">\r\n                                            <label className=\"col-sm-4 col-form-label\">Product List</label>\r\n                                            <div className=\"col-sm-8\">\r\n                                                <select\r\n                                                    className=\"form-control form-control-lg\"\r\n                                                    id=\"exampleFormControlSelect2\"\r\n                                                    name=\"product\"\r\n                                                    {...register(\"product\", {\r\n                                                        required: true,\r\n                                                    })}>\r\n\r\n                                                    <option value=''>--Select product--</option>\r\n                                                    {productlist.map((item, index) => (\r\n\r\n                                                        <option key={index} value={item?.id} label={item?.name}></option>\r\n                                                    ))}\r\n\r\n                                                </select>\r\n                                            </div>\r\n                                        </Form.Group>\r\n                                    </div>\r\n                                </div>\r\n\r\n\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-md-12\">\r\n                                        <Form.Group className=\"row\">\r\n                                            <label className=\"col-sm-4 col-form-label\">\r\n                                                Max Amount{\" \"}</label>\r\n\r\n                                            <div className=\"col-sm-8\">\r\n                                                <Form.Control\r\n                                                    id=\"maxamount\"\r\n                                                    className=\"form-control\"\r\n                                                    type=\"number\"\r\n                                                    name=\"maxAmount\"\r\n                                                    placeholder=\"maxamount\"\r\n                                                    {...register(\"maxAmount\", { required: true })}\r\n                                                />\r\n                                                {errors && errors.maxAmount && (\r\n                                                    <p>Product maxamount is required field</p>\r\n                                                )}\r\n                                            </div>\r\n                                        </Form.Group>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-md-12\">\r\n                                        <Form.Group className=\"row\">\r\n                                            <label className=\"col-sm-4 col-form-label\">\r\n                                                Min Amount{\" \"}</label>\r\n\r\n                                            <div className=\"col-sm-8\">\r\n                                                <Form.Control\r\n                                                    id=\"minAmount\"\r\n                                                    className=\"form-control\"\r\n                                                    type=\"number\"\r\n                                                    name=\"minAmount\"\r\n                                                    placeholder=\"minamount\"\r\n                                                    {...register(\"minAmount\", { required: true })}\r\n                                                />\r\n                                                {errors && errors.minAmount && (\r\n                                                    <p>Product minAmount is required field</p>\r\n                                                )}\r\n                                            </div>\r\n                                        </Form.Group>\r\n                                    </div>\r\n                                </div>\r\n\r\n                               \r\n\r\n\r\n                                <div className=\"mt-3\" style={{ display: 'flex', justifyContent: 'center' }}>\r\n                                    <button\r\n                                        className=\"btn  btn-primary btn-lg font-weight-medium auth-form-btn\"\r\n                                        type=\"submit\"\r\n                                    >\r\n                                        Submit\r\n                                    </button>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AssignProduct"],"sourceRoot":""}