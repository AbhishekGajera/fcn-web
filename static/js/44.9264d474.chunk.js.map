{"version":3,"sources":["app/Admin-components/Appointment/FetchAppoinments.js"],"names":["FetchAppoinments","history","useHistory","useCookies","cookies","setCookie","useState","itemlist","setitemlist","pageCount","setPageCount","itemOffset","setItemOffset","itemsPerPage","React","useForm","mode","register","handleSubmit","reset","formState","errors","isDirty","isValid","useEffect","getData","user","role","getAppoinmentsList","data","result","results","totalPages","getAppoinmentsListByUser","id","response","message","toast","error","process","code","formData","JSON","stringify","refreshToken","localStorage","getItem","path","userLogout","finally","push","className","aria-label","href","onClick","event","preventDefault","aria-current","map","item","name","Date","fromDate","toLocaleDateString","day","month","year","toDate","desc","onChange","e","UpdateAppoinments","target","value","success","autoClose","statusChanged","selected","status","showStatus","breakLabel","nextLabel","onPageChange","newOffset","forcePage","pageRangeDisplayed","previousLabel","renderOnZeroPageCount"],"mappings":"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","file":"static/js/44.9264d474.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useCookies } from \"react-cookie\";\r\nimport ReactPaginate from \"react-paginate\";\r\nimport { getAppoinmentsList, getAppoinmentsListByUser, userLogout, UpdateAppoinments } from \"../../../utils/APIs\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Form } from 'react-bootstrap';\r\n\r\n\r\nconst FetchAppoinments = () => {\r\n  const history = useHistory()\r\n  const [cookies, setCookie] = useCookies([\"user\"]);\r\n  const [itemlist, setitemlist] = useState([]);\r\n  // We start with an empty list of items.\r\n  const [pageCount, setPageCount] = useState(0);\r\n  // Here we use item offsets; we could also use page offsets\r\n  // following the API or data you're working with.\r\n  const [itemOffset, setItemOffset] = useState(0);\r\n  const [itemsPerPage] = useState(20);\r\n  const [ setShow] = React.useState(false);\r\n  const [ setvalueToEdit] = useState({});\r\n\r\n  const { register, handleSubmit, reset, formState: { errors, isDirty, isValid } } = useForm({\r\n    mode: \"onChange\"\r\n  });\r\n\r\n  const [modelMode, setmodelMode] = useState('create')\r\n  const statusChanged = (id, e) => {\r\n    UpdateAppoinments({\r\n      \"appoinments_id\": id,\r\n      \"status\": e.target.value\r\n    })\r\n    toast.success('Status updated successfully', {\r\n      autoClose: true\r\n    })\r\n  }\r\n\r\n\r\n  const onSubmit = async (data) => {\r\n    const date1 = new Date(data?.date_from);\r\n    const date2 = new Date(data?.date_to);\r\n    const diffTime = Math.abs(date2 - date1);\r\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n    //   if(modelMode === 'edit'){\r\n    //   try {\r\n    //     const formData = JSON.stringify({\r\n    //       leave_id: valueToEdit?.id,\r\n    //       user: data.user,\r\n    //       reason: data?.reason,\r\n    //       leave_status: data?.leave_status,\r\n    //       total_leave : diffDays,\r\n    //       date_from : new Date(data?.date_from).toISOString(),\r\n    //       date_to : new Date(data?.date_to).toISOString(),\r\n    //     });\r\n    //     await updateEmployeeLeave(formData)\r\n    // toast.success('Leave updated successfully',{\r\n    //   autoClose : true\r\n    // })\r\n    //   } catch (error) {\r\n    //     if (\r\n    //       error &&\r\n    //       error.response &&\r\n    //       error.response.data &&\r\n    //       error.response.data.message\r\n    //     ) {\r\n    //       toast.error(error.response.data.message);\r\n    //     } else {\r\n    //       toast.error(process.env.REACT_APP_ERROR_MESSAGE);\r\n    //     }\r\n    //   }\r\n    //   finally {\r\n    //     handleClose()\r\n    //     getData()\r\n    //   }\r\n    // }\r\n\r\n\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setShow(false)\r\n    setvalueToEdit({})\r\n    reset()\r\n  };\r\n\r\n\r\n  const handleShow = (value, mode) => {\r\n    reset()\r\n\r\n    if (mode === 'edit') {\r\n      setvalueToEdit(value)\r\n      setmodelMode('edit')\r\n    }\r\n\r\n    if (mode === 'create') {\r\n      setvalueToEdit(value)\r\n      setmodelMode('create')\r\n    }\r\n    setShow(true);\r\n  }\r\n\r\n  useEffect(() => {\r\n    getData()\r\n  }, [itemOffset, itemsPerPage]);\r\n\r\n  // useEffect(() => {\r\n  //   getEmployeeData()\r\n  // }, []);\r\n\r\n  // const getEmployeeData = async () => {\r\n  //     try {\r\n  //       const result = await getAllEmployee()\r\n  //       setemployeeList(result.data.results)\r\n  //     } catch (error) {\r\n  //       getEmployeeData()\r\n  //     }\r\n  // }\r\n\r\n  const getData = async () => {\r\n    try {\r\n      if(cookies?.user?.role === 'admin'){\r\n        const result = await (await getAppoinmentsList(itemsPerPage, itemOffset)).data;\r\n        setitemlist(result?.results);\r\n        setPageCount(result?.totalPages);\r\n      }else{\r\n        const result = await (await getAppoinmentsListByUser(itemsPerPage, itemOffset,cookies?.user?.id)).data;\r\n        setitemlist(result?.results);\r\n        setPageCount(result?.totalPages);\r\n      }      \r\n      // console.log(\"res\", result?.results)\r\n      // Fetch items from another resources.\r\n      \r\n    } catch (error) {\r\n      if (\r\n        error?.response?.data?.message\r\n      ) {\r\n        toast.error(error.response.data.message);\r\n      } else {\r\n        toast.error(process.env.REACT_APP_ERROR_MESSAGE);\r\n      }\r\n\r\n      if (error?.response?.data?.code === 401) {\r\n        const formData = JSON.stringify({\r\n          refreshToken: localStorage.getItem('refreshToken'),\r\n        });\r\n        setCookie('user', null, { path: '/' });\r\n        userLogout(formData).finally(() => {\r\n          history.push('/user-pages/login-1')\r\n        })\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  // Invoke when user click to request another page.\r\n  const handlePageClick = (event) => {\r\n    const newOffset = (event.selected + 1);\r\n    setItemOffset(newOffset);\r\n  };\r\n\r\n  const showStatus = (status) => {\r\n    switch (+status) {\r\n      case (1):\r\n        return 'Processing';\r\n      case (2):\r\n        return 'Approved';\r\n      case (3):\r\n        return 'Rejected';\r\n      case (4):\r\n        return 'Successfull';\r\n      case (5):\r\n        return 'Terminated'\r\n      default:\r\n        return 'Processing';\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"page-header\">\r\n        <h3 className=\"page-title\">Appoinments / Book Appoinment </h3>\r\n        <nav aria-label=\"breadcrumb\">\r\n          <ol className=\"breadcrumb\">\r\n            <li className=\"breadcrumb-item\">\r\n              <a href=\"!#\" onClick={(event) => event.preventDefault()}>\r\n                {cookies?.user?.role} Dashboard\r\n              </a>\r\n            </li>\r\n            <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n              Show Appoinment\r\n            </li>\r\n          </ol>\r\n        </nav>\r\n      </div>\r\n      <div className=\"col-lg-12 grid-margin stretch-card p0\">\r\n        <div className=\"card\">\r\n          <div className=\"card-body\">\r\n            <h4 className=\"card-title\">Show Appoinment</h4>\r\n\r\n            <div className=\"table-responsive\">\r\n              <table className=\"table table-striped\">\r\n                <thead>\r\n                  <tr>\r\n                    <th> User </th>\r\n                    <th> Date From </th>\r\n                    <th> Date To </th>\r\n                    <th> Description </th>\r\n                    <th> Status </th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {itemlist?.map((item) => {\r\n                    return (\r\n                      <tr>\r\n                        <td>{item?.user?.name}</td>\r\n                        <td>{new Date(item?.fromDate)?.toLocaleDateString('en-GB', { day: 'numeric', month: 'short', year: 'numeric' })}</td>\r\n                        <td>{new Date(item?.toDate)?.toLocaleDateString('en-GB', { day: 'numeric', month: 'short', year: 'numeric' })}</td>\r\n                        <td>{item?.desc}</td>\r\n                        <td>{cookies?.user?.role === 'admin' ? (\r\n                          <select\r\n\r\n                            id={item.id}\r\n\r\n                            onChange={(e) => statusChanged(item.id, e)}\r\n                          >\r\n                            <option\r\n                              value=\"1\"\r\n                              selected={item.status == 1 ? \"selected\" : false}\r\n                            >\r\n                              Processing\r\n                            </option>\r\n                            <option\r\n                              value=\"2\"\r\n                              selected={item.status == 2 ? \"selected\" : false}\r\n                            >\r\n                              Approved\r\n                            </option>\r\n                            <option\r\n                              value=\"3\"\r\n                              selected={item.status == 3 ? \"selected\" : false}\r\n                            >\r\n                              Rejected\r\n                            </option>\r\n                            <option\r\n                              value=\"4\"\r\n                              selected={item.status == 4 ? \"selected\" : false}\r\n                            >\r\n                              Successfull\r\n                            </option>\r\n                            <option\r\n                              value=\"5\"\r\n                              selected={item.status == 5 ? \"selected\" : false}\r\n                            >\r\n                              Terminated\r\n                            </option>\r\n                          </select>\r\n                        ) : (\r\n                          showStatus(item.status)\r\n                        )}\r\n                        </td>\r\n\r\n\r\n\r\n                      </tr>\r\n                    );\r\n                  })}\r\n                </tbody>\r\n              </table>\r\n              <ReactPaginate\r\n                breakLabel=\"...\"\r\n                nextLabel=\"next >\"\r\n                className=\"client-list\"\r\n                onPageChange={handlePageClick}\r\n                forcePage={0}\r\n                pageRangeDisplayed={5}\r\n                pageCount={pageCount}\r\n                previousLabel=\"< previous\"\r\n                renderOnZeroPageCount={null}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FetchAppoinments;\r\n"],"sourceRoot":""}