{"version":3,"sources":["app/BranchComponents/EmployeeList/index.js"],"names":["EmployeeList","history","useHistory","React","useState","show","setShow","useCookies","cookies","setCookie","itemlist","setitemlist","pageCount","setPageCount","useUrl","itemOffset","setItemOffset","itemsPerPage","valueToEdit","setvalueToEdit","branchUpdate","setbranchUpdate","branchList","setbranchList","setselectedBranch","strongRegexMo","RegExp","useForm","mode","register","handleSubmit","reset","formState","errors","onSubmit","isDirty","isValid","data","branch","updatedData","JSON","stringify","UpdateEmployee","id","toast","success","autoClose","list","response","message","error","process","code","formData","refreshToken","localStorage","getItem","path","userLogout","finally","push","useEffect","getBranchList","getBranches","items","results","user","role","getEmployeeByBranch","getEmployeeList","totalPages","console","info","onHide","backdrop","keyboard","Header","closeButton","Title","Body","className","Group","Control","type","name","defaultValue","first_name","required","last_name","email","pattern","onChange","e","target","value","map","i","selected","contactno","address","bankAccNo","bankIfscCode","dob","aria-label","href","onClick","event","preventDefault","aria-current","item","handleShow","uid","Swal","fire","title","text","icon","showCancelButton","cancelButtonColor","confirmButtonColor","confirmButtonText","cancelButtonText","then","result","deleteEmployee","dismiss","DismissReason","cancel","breakLabel","nextLabel","onPageChange","pageRangeDisplayed","previousLabel","renderOnZeroPageCount","forcePage"],"mappings":"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","file":"static/js/80.85f2a388.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useCookies } from \"react-cookie\";\r\nimport ReactPaginate from \"react-paginate\";\r\nimport { getEmployeeList, getEmployeeByBranch, userLogout, deleteEmployee, getBranches, UpdateEmployee } from \"../../../utils/APIs\";\r\nimport { useUrl } from \"../../../utils/Functions/useUrl\";\r\nimport { toast } from \"react-toastify\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport Swal from \"sweetalert2\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst EmployeeList = () => {\r\n  const history = useHistory();\r\n  const [show, setShow] = React.useState(false);\r\n  const [cookies, setCookie] = useCookies([\"user\"]);\r\n  const [itemlist, setitemlist] = useState([]);\r\n\r\n  const [pageCount, setPageCount] = useState(0);\r\n  // Here we use item offsets; we could also use page offsets\r\n  // following the API or data you're working with.\r\n  const [itemOffset, setItemOffset] = useUrl(\"page\");\r\n  const [itemsPerPage] = useState(20);\r\n  const [valueToEdit, setvalueToEdit] = useState({});\r\n  const [branchUpdate, setbranchUpdate] = useState('')\r\n  const [branchList, setbranchList] = useState([]);\r\n  const [selectedBranch, setselectedBranch] = useState(\"\");\r\n\r\n  const onChangeHandlerBranch = (e) => {\r\n    setItemOffset(0);\r\n    setselectedBranch(e.target.value);\r\n  };\r\n\r\n  var strongRegexMo = new RegExp(\r\n    \"^\\\\s*(?:\\\\+?(\\\\d{1,3}))?[-. (]*(\\\\d{3})[-. )]*(\\\\d{3})[-. ]*(\\\\d{4})(?: *x(\\\\d+))?\\\\s*$\"\r\n  );\r\n  var strongRegex = new RegExp(\"^(?=.*[A-Za-z])(?=.*[0-9])(?=.{8,})\");\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors, isDirty, isValid },\r\n  } = useForm({\r\n    mode: \"onChange\",\r\n  });\r\n\r\n  const handleClose = () => {\r\n    setShow(false);\r\n    setvalueToEdit({});\r\n    setbranchUpdate('');\r\n    reset()\r\n  };\r\n\r\n  const handleShow = (value) => {\r\n    reset()\r\n    setvalueToEdit(value);\r\n    setbranchUpdate(value?.branch?.id)\r\n    setShow(true);\r\n  };\r\n\r\n  const onSubmit = async (data) => {\r\n    data.branch = branchUpdate;\r\n    try {\r\n      const updatedData = JSON.stringify(data);\r\n      await UpdateEmployee(valueToEdit?.id, updatedData);\r\n      toast.success(\"Employee updated Successfully\", {\r\n        autoClose: 3000,\r\n      });\r\n      list();\r\n    } catch (error) {\r\n      if (error?.response?.data?.message) {\r\n        toast.error(error.response.data.message);\r\n      } else {\r\n        toast.error(process.env.REACT_APP_ERROR_MESSAGE);\r\n      }\r\n\r\n      if (error?.response?.data?.code === 401) {\r\n        const formData = JSON.stringify({\r\n          refreshToken: localStorage.getItem(\"refreshToken\"),\r\n        });\r\n        setCookie(\"user\", null, { path: \"/\" });\r\n        userLogout(formData).finally(() => {\r\n          history.push(\"/user-pages/login-1\");\r\n        });\r\n      }\r\n    } finally {\r\n      setShow(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBranchList();\r\n    list();\r\n  }, []);\r\n\r\n  const getBranchList = async () => {\r\n    const items = await (await getBranches(5000, 1, \"\", \"branch\")).data;\r\n\r\n    setbranchList(items?.results);\r\n  };\r\n\r\n  const list = async () => {\r\n    try {\r\n      let items\r\n      if (cookies?.user?.role === \"branch\") {\r\n        items = await (await getEmployeeByBranch(cookies?.user?.id, itemsPerPage, +itemOffset + 1)).data;\r\n      } else {\r\n        items = await (await getEmployeeList(itemsPerPage, +itemOffset + 1)).data;\r\n      }\r\n      setitemlist(items?.results);\r\n      setPageCount(items?.totalPages);\r\n    } catch (error) {\r\n      console.info(\"error \", error);\r\n      if (error?.response?.data?.message) {\r\n        toast.error(error.response.data.message);\r\n      } else {\r\n        toast.error(process.env.REACT_APP_ERROR_MESSAGE);\r\n      }\r\n\r\n      if (error?.response?.data?.code === 401) {\r\n        const formData = JSON.stringify({\r\n          refreshToken: localStorage.getItem(\"refreshToken\"),\r\n        });\r\n        setCookie(\"user\", null, { path: \"/\" });\r\n        userLogout(formData).finally(() => {\r\n          history.push(\"/user-pages/login-1\");\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    list()\r\n  }, [itemOffset, itemsPerPage]);\r\n\r\n  const deleteData = (uid) => {\r\n    Swal.fire({\r\n      title: \"Are you sure?\",\r\n      text: \"You will not be able to recover this imaginary file!\",\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      cancelButtonColor: \"#DD6B55\",\r\n      confirmButtonColor: \"#DD6B55\",\r\n      confirmButtonText: \"Yes, delete it!\",\r\n      cancelButtonText: \"No, keep it\",\r\n    }).then((result) => {\r\n      if (result.value) {\r\n        return (\r\n          deleteEmployee(uid).finally(() => list()),\r\n          Swal.fire(\r\n            \"Deleted!\",\r\n            \"Your imaginary file has been deleted.\",\r\n            \"success\"\r\n          )\r\n        );\r\n      } else if (result.dismiss === Swal.DismissReason.cancel) {\r\n        Swal.fire(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\r\n      }\r\n    });\r\n  };\r\n\r\n  // Invoke when user click to request another page.\r\n  const handlePageClick = (event) => {\r\n    setItemOffset(event.selected);\r\n  };\r\n  return (\r\n    <div>\r\n      <Modal\r\n        show={show}\r\n        onHide={handleClose}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Update Employee</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div className=\"row auth\">\r\n            <div className=\"col-12 grid-margin\">\r\n              <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                  <form\r\n                    className=\"form-sample\"\r\n                    onSubmit={handleSubmit(onSubmit)}\r\n                  >\r\n                    <p className=\"card-description\"> Update Employee </p>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-md-12\">\r\n                        <Form.Group className=\"row\">\r\n                          <label className=\"col-sm-4 col-form-label\">\r\n                            First Name\r\n                          </label>\r\n                          <div className=\"col-sm-8\">\r\n                            <Form.Control\r\n                              type=\"text\"\r\n                              name=\"first_name\"\r\n                              defaultValue={valueToEdit.first_name}\r\n                              {...register(\"first_name\", { required: true })}\r\n                            />\r\n                            {errors && errors.name && (\r\n                              <p>First Name is required field</p>\r\n                            )}\r\n                          </div>\r\n                        </Form.Group>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-md-12\">\r\n                        <Form.Group className=\"row\">\r\n                          <label className=\"col-sm-4 col-form-label\">\r\n                            Last Name\r\n                          </label>\r\n                          <div className=\"col-sm-8\">\r\n                            <Form.Control\r\n                              type=\"text\"\r\n                              name=\"last_name\"\r\n                              defaultValue={valueToEdit.last_name}\r\n                              {...register(\"last_name\", { required: true })}\r\n                            />\r\n                            {errors && errors.name && (\r\n                              <p>Last Name is required field</p>\r\n                            )}\r\n                          </div>\r\n                        </Form.Group>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-md-12\">\r\n                        <Form.Group className=\"row\">\r\n                          <label className=\"col-sm-4 col-form-label\">\r\n                            Email\r\n                          </label>\r\n                          <div className=\"col-sm-8\">\r\n                            <Form.Control\r\n                              type=\"text\"\r\n                              name=\"email\"\r\n                              defaultValue={valueToEdit.email}\r\n                              {...register(\"email\", {\r\n                                required: true,\r\n                                pattern: /^\\S+@\\S+$/i,\r\n                              })}\r\n                            />\r\n                            {errors &&\r\n                              errors.email &&\r\n                              errors.email.type === \"required\" && (\r\n                                <p>email is required field</p>\r\n                              )}\r\n                            {errors &&\r\n                              errors.email &&\r\n                              errors.email.type === \"pattern\" && (\r\n                                <p>invalid email formate</p>\r\n                              )}\r\n                          </div>\r\n                        </Form.Group>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"row\">\r\n                      <div className=\"col-md-12\">\r\n                        <Form.Group className=\"row\">\r\n                          <label className=\"col-sm-4 col-form-label\">\r\n                            Select Branch\r\n                          </label>\r\n                          <div className=\"col-sm-8\">\r\n                            <select\r\n                              className=\"form-control form-control-sm\"\r\n                              id=\"exampleFormControlSelect2\"\r\n                              name=\"branch\"\r\n                              onChange={onChangeHandlerBranch}\r\n                            >\r\n                              {branchList?.map((i) => {\r\n                                return (\r\n                                  <>\r\n                                    <option\r\n                                      selected={i.id === branchUpdate}\r\n                                      value={i.id}\r\n                                    >\r\n                                      {i.name}\r\n                                    </option>\r\n                                  </>\r\n                                );\r\n                              })}\r\n                            </select>\r\n                          </div>\r\n                        </Form.Group>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"row\">\r\n                      <div className=\"col-md-12\">\r\n                        <Form.Group className=\"row\">\r\n                          <label className=\"col-sm-4 col-form-label\">\r\n                            Contact No\r\n                          </label>\r\n                          <div className=\"col-sm-8\">\r\n                            <Form.Control\r\n                              type=\"text\"\r\n                              name=\"contactno\"\r\n                              defaultValue={valueToEdit.contactno}\r\n                              {...register(\"contactno\", {\r\n                                required: true,\r\n                                pattern: strongRegexMo,\r\n                              })}\r\n                            />\r\n                            {errors &&\r\n                              errors.contactno &&\r\n                              errors.contactno.type === \"required\" && (\r\n                                <p>contact number is required field</p>\r\n                              )}\r\n                            {errors &&\r\n                              errors.contactno &&\r\n                              errors.contactno.type === \"pattern\" && (\r\n                                <p>invalid phone number please use valid formate</p>\r\n                              )}\r\n                          </div>\r\n                        </Form.Group>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"row\">\r\n                      <div className=\"col-md-12\">\r\n                        <Form.Group className=\"row\">\r\n                          <label className=\"col-sm-4 col-form-label\">\r\n                            Address{\" \"}\r\n                          </label>\r\n                          <div className=\"col-sm-8\">\r\n                            <Form.Control\r\n                              type=\"text\"\r\n                              name=\"address\"\r\n                              defaultValue={valueToEdit.address}\r\n                              {...register(\"address\", { required: true })}\r\n                            />\r\n                            {errors && errors.address && (\r\n                              <p>address is required field</p>\r\n                            )}\r\n                          </div>\r\n                        </Form.Group>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"row\">\r\n                      <div className=\"col-md-12\">\r\n                        <Form.Group className=\"row\">\r\n                          <label className=\"col-sm-3 col-form-label\">\r\n                            Bank Account no\r\n                          </label>\r\n                          <div className=\"col-sm-9\">\r\n                            <Form.Control\r\n                              type=\"text\"\r\n                              name=\"bankAccNo\"\r\n                              defaultValue={valueToEdit.bankAccNo}\r\n                              {...register(\"bankAccNo\", { required: true })}\r\n                            />\r\n                            {errors && errors.bankAccNo && (\r\n                              <p>Bank Account number is required field</p>\r\n                            )}\r\n                          </div>\r\n                        </Form.Group>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-md-12\">\r\n                        <Form.Group className=\"row\">\r\n                          <label className=\"col-sm-4 col-form-label\">\r\n                            IFSC code\r\n                          </label>\r\n                          <div className=\"col-sm-8\">\r\n                            <Form.Control\r\n                              type=\"text\"\r\n                              name=\"bankIfscCode\"\r\n                              defaultValue={valueToEdit.bankIfscCode}\r\n                              {...register(\"bankIfscCode\", { required: true })}\r\n                            />\r\n                            {errors && errors.bankIfscCode && (\r\n                              <p>Bank IFSC number is required field</p>\r\n                            )}\r\n                          </div>\r\n                        </Form.Group>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-md-12\">\r\n                        <Form.Group className=\"row\">\r\n                          <label className=\"col-sm-3 col-form-label\">DOB</label>\r\n                          <div className=\"col-sm-9\">\r\n                            <Form.Control\r\n                              type=\"date\"\r\n                              name=\"dob\"\r\n                              defaultValue={valueToEdit.dob}\r\n                              {...register(\"dob\", { required: true })}\r\n                            />\r\n                            {errors && errors.dob && <p>DOB is required field</p>}\r\n                          </div>\r\n                        </Form.Group>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"mt-3\">\r\n                      <button\r\n                        className=\"btn  btn-primary btn-lg font-weight-medium auth-form-btn\"\r\n                        type=\"submit\"\r\n                      >\r\n                        UPDATE\r\n                      </button>\r\n                    </div>\r\n                  </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Modal.Body>\r\n      </Modal>\r\n      <div className=\"page-header\">\r\n        <h3 className=\"page-title\">Employee / Fetch Employee </h3>\r\n        <nav aria-label=\"breadcrumb\">\r\n          <ol className=\"breadcrumb\">\r\n            <li className=\"breadcrumb-item\">\r\n              <a href=\"!#\" onClick={(event) => event.preventDefault()}>\r\n                {cookies?.user?.role} Dashboard\r\n              </a>\r\n            </li>\r\n            <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n              Fetch Employee\r\n            </li>\r\n          </ol>\r\n        </nav>\r\n      </div>\r\n      <div className=\"col-lg-12 grid-margin stretch-card p0\">\r\n        <div className=\"card\">\r\n          <div className=\"card-body\">\r\n            <h4 className=\"card-title\">Employee list</h4>\r\n\r\n            <div className=\"table-responsive\">\r\n              <table className=\"table table-striped\">\r\n                <thead>\r\n                  <tr>\r\n                    <th> Name </th>\r\n                    <th> Branch </th>\r\n                    <th> Email </th>\r\n                    <th> Contact no. </th>\r\n                    <th> Edit </th>\r\n                    <th> Delete </th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {itemlist?.map((item) => {\r\n                    return (\r\n                      <tr>\r\n                        <td>{item?.name}</td>\r\n                        <td>{item?.branch?.name}</td>\r\n                        <td>{item?.email}</td>\r\n                        <td>{item?.contactno}</td>\r\n                        <td>\r\n                          <i className=\"mdi mdi-lead-pencil\" onClick={() => handleShow(item)}></i>\r\n                        </td>\r\n                        <td>\r\n                          <i className=\"mdi mdi-delete\" onClick={() => deleteData(item?.id)}></i>\r\n                        </td>\r\n                      </tr>\r\n                    );\r\n                  })}\r\n                </tbody>\r\n              </table>\r\n              <ReactPaginate\r\n                breakLabel=\"...\"\r\n                nextLabel=\"next >\"\r\n                className=\"client-list\"\r\n                onPageChange={handlePageClick}\r\n                pageRangeDisplayed={5}\r\n                pageCount={pageCount}\r\n                previousLabel=\"< previous\"\r\n                renderOnZeroPageCount={null}\r\n                forcePage={itemOffset}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmployeeList;\r\n"],"sourceRoot":""}