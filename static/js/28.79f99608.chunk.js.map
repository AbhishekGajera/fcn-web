{"version":3,"sources":["utils/Functions/useDebounce.js","app/Admin-components/Leads/index.js"],"names":["useDebounce","value","delay","useState","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","Leads","searchTerm","setSearchTerm","debouncedSearchTerm","pageCount","setPageCount","useUrl","itemOffset","setItemOffset","itemsPerPage","useCookies","cookies","setCookie","React","show","setShow","itemlist","setitemlist","branchlist","setbranchlist","isLoading","setIsLoading","history","useHistory","list","useForm","mode","register","handleSubmit","reset","formState","errors","isDirty","isValid","getBranchesClient","data","branch","results","getLeads","items","totalPages","response","message","toast","error","process","code","formData","JSON","stringify","refreshToken","localStorage","getItem","path","userLogout","finally","push","onSubmit","CreateLead","success","autoClose","onHide","backdrop","keyboard","Header","closeButton","Title","Body","className","Group","Control","type","name","placeholder","autoFocus","required","Name","email","id","map","item","index","key","label","contactno","aria-label","href","onClick","event","preventDefault","user","role","aria-current","action","onChange","e","target","style","textAlign","Fragment","title","console","log","updateLead","statusChanged","selected","status","uid","Swal","fire","text","icon","showCancelButton","cancelButtonColor","confirmButtonColor","confirmButtonText","cancelButtonText","then","result","deleteLead","dismiss","DismissReason","cancel","breakLabel","nextLabel","onPageChange","pageRangeDisplayed","previousLabel","renderOnZeroPageCount","forcePage"],"mappings":";oLAGaA,EAAc,SAACC,EAAOC,GAE/B,MAA4CC,mBAASF,GAArD,mBAAOG,EAAP,KAAuBC,EAAvB,KAgBA,OAfAC,qBACE,WAEE,IAAMC,EAAUC,YAAW,WACzBH,EAAkBJ,KACjBC,GAIH,OAAO,WACLO,aAAaF,MAGjB,CAACN,EAAOC,IAEHE,I,0+MCwZIM,UA9ZD,WAAO,IAAD,EAChB,EAAoCP,mBAAS,IAA7C,mBAAOQ,EAAP,KAAmBC,EAAnB,KACMC,EAAsBb,YAAYW,EAAY,KAGpD,EAAkCR,mBAAS,GAA3C,mBAAOW,EAAP,KAAkBC,EAAlB,KAGA,EAAoCC,YAAO,QAA3C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAuBf,mBAAS,IAAzBgB,EAAP,oBAEA,EAA6BC,YAAW,CAAC,SAAzC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAwBC,IAAMpB,UAAS,GAAvC,mBAAOqB,EAAP,KAAaC,EAAb,KACA,EAAgCtB,mBAAS,IAAzC,mBAAOuB,EAAP,KAAiBC,EAAjB,KACA,EAAoCxB,mBAAS,IAA7C,mBAAOyB,EAAP,KAAmBC,EAAnB,KACA,EAAkC1B,oBAAS,GAA3C,mBAAO2B,EAAP,KAAkBC,EAAlB,KACMC,EAAUC,cAEhB3B,qBAAU,WACN4B,OACD,CAACjB,EAAYE,EAAcN,IAG9B,IA+BA,GAAmFsB,YAAQ,CACvFC,KAAM,aADFC,GAAR,GAAQA,SAAUC,GAAlB,GAAkBA,aAAcC,GAAhC,GAAgCA,MAAhC,MAAuCC,UAAaC,GAApD,GAAoDA,OAI9CP,IAJN,GAA4DQ,QAA5D,GAAqEC,QAI3D,uCAAG,uGACTZ,GAAa,GADJ,kBAGuBa,cAHvB,8BAG4CC,KAH5C,cAGCC,EAHD,OAILjB,EAAa,OAACiB,QAAD,IAACA,OAAD,EAACA,EAAQC,SAJjB,UAMKC,aACF7B,GACCF,EAAa,EACdN,GATH,gCAWHkC,KAXG,QAKCI,EALD,OAYLtB,EAAW,OAACsB,QAAD,IAACA,OAAD,EAACA,EAAOF,SACnBhC,EAAY,OAACkC,QAAD,IAACA,OAAD,EAACA,EAAOC,YACpBnB,GAAa,GAdR,mDAgBL,sCAAI,KAAOoB,gBAAX,iBAAI,EAAiBN,YAArB,aAAI,EAAuBO,SACvBC,IAAMC,MAAM,KAAMH,SAASN,KAAKO,SAEhCC,IAAMC,MAAMC,wFAGoB,OAAhC,2CAAOJ,gBAAP,mBAAiBN,YAAjB,eAAuBW,QACjBC,EAAWC,KAAKC,UAAU,CAC5BC,aAAcC,aAAaC,QAAQ,kBAEvCxC,EAAU,OAAQ,KAAM,CAAEyC,KAAM,MAChCC,aAAWP,GAAUQ,SAAQ,WACzBjC,EAAQkC,KAAK,2BA5BhB,0DAAH,sDAmDJC,GAAQ,uCAAG,WAAOtB,GAAP,iFACPuB,YAAWvB,GADJ,OAEbpB,GAAQ,GACR4B,IAAMgB,QAAQ,0BAA2B,CACrCC,WAAW,IAJF,2CAAH,sDAad,OACI,6BACI,kBAAC,IAAD,CACI9C,KAAMA,EACN+C,OAtBQ,WAChB9C,GAAQ,GACRc,MAqBQiC,SAAS,SACTC,UAAU,GAEV,kBAAC,IAAMC,OAAP,CAAcC,aAAW,GACrB,kBAAC,IAAMC,MAAP,qBAEJ,kBAAC,IAAMC,KAAP,KACI,yBAAKC,UAAU,YACX,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,aACX,0BAAMA,UAAU,cAAcX,SAAU7B,GAAa6B,KAEjD,yBAAKW,UAAU,OACX,yBAAKA,UAAU,aACX,kBAAC,IAAKC,MAAN,CAAYD,UAAU,OAClB,2BAAOA,UAAU,2BAAjB,QAGA,yBAAKA,UAAU,YACX,kBAAC,IAAKE,QAAN,eACIC,KAAK,OACLC,KAAK,OACLC,YAAY,OACZC,WAAS,GACL/C,GAAS,OAAQ,CACjBgD,UAAU,MAGjB5C,IACGA,GAAO6C,MACc,aAArB7C,GAAO6C,KAAKL,MACR,yDAMxB,yBAAKH,UAAU,OACX,yBAAKA,UAAU,aACX,kBAAC,IAAKC,MAAN,CAAYD,UAAU,OAClB,2BAAOA,UAAU,2BAAjB,SAGA,yBAAKA,UAAU,YACX,kBAAC,IAAKE,QAAN,eACIC,KAAK,OACLC,KAAK,QACLC,YAAY,QACZC,WAAS,GACL/C,GAAS,QAAS,CAClBgD,UAAU,MAGjB5C,IACGA,GAAOmC,OACe,aAAtBnC,GAAOmC,MAAMK,MACT,0DAMxB,yBAAKH,UAAU,OACX,yBAAKA,UAAU,aACX,kBAAC,IAAKC,MAAN,CAAYD,UAAU,OAClB,2BAAOA,UAAU,2BAAjB,SAGA,yBAAKA,UAAU,YACX,kBAAC,IAAKE,QAAN,eACIC,KAAK,OACLC,KAAK,QACLC,YAAY,QACZC,WAAS,GACL/C,GAAS,QAAS,CAClBgD,UAAU,MAGjB5C,IACGA,GAAO8C,OACe,aAAtB9C,GAAO8C,MAAMN,MACT,0DAMxB,yBAAKH,UAAU,OACX,yBAAKA,UAAU,aACX,kBAAC,IAAKC,MAAN,CAAYD,UAAU,OAClB,2BAAOA,UAAU,2BAAjB,UAGA,yBAAKA,UAAU,YACX,0CACIA,UAAU,+BACVU,GAAG,4BACHN,KAAK,UACD7C,GAAS,SAAU,CACnBgD,UAAU,KAGd,4BAAQpF,MAAM,IAAd,qBACC2B,EAAW6D,KAAI,SAACC,EAAMC,GAAP,OACZ,4BAAQC,IAAKD,EAAO1F,MAAK,OAAEyF,QAAF,IAAEA,OAAF,EAAEA,EAAMR,KAAMW,MAAK,OAAEH,QAAF,IAAEA,OAAF,EAAEA,EAAMR,WAG3DzC,IAAUA,GAAOK,QAAU,kEAM5C,yBAAKgC,UAAU,OACX,yBAAKA,UAAU,aACX,kBAAC,IAAKC,MAAN,CAAYD,UAAU,OAClB,2BAAOA,UAAU,2BAAjB,cACA,yBAAKA,UAAU,YACX,kBAAC,IAAKE,QAAN,eACIC,KAAK,OACLC,KAAK,YACLC,YAAY,iBACZC,WAAS,GACL/C,GAAS,YAAa,CACtBgD,UAAU,MAGjB5C,IACGA,GAAOqD,WACmB,aAA1BrD,GAAOqD,UAAUb,MACb,mEAQxB,yBAAKH,UAAU,QACX,4BACIA,UAAU,2DACVG,KAAK,UAFT,kBAchC,yBAAKH,UAAU,eACX,wBAAIA,UAAU,cAAd,uBACA,yBAAKiB,aAAW,cACZ,wBAAIjB,UAAU,cACV,wBAAIA,UAAU,mBACV,uBAAGkB,KAAK,KAAKC,QAAS,SAACC,GAAD,OAAWA,EAAMC,mBAAvC,OACK9E,QADL,IACKA,GADL,UACKA,EAAS+E,YADd,aACK,EAAeC,KADpB,eAIJ,wBAAIvB,UAAU,yBAAyBwB,eAAa,QAApD,iBAMZ,yBAAKxB,UAAU,yCACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,YACX,wBAAIA,UAAU,cAAd,cAEJ,yBAAKA,UAAU,YACX,yBAAKA,UAAU,kCACX,0BAAMA,UAAU,kCAAkCyB,OAAO,KACrD,yBAAKzB,UAAU,eACX,yBAAKA,UAAU,mDACX,uBAAGA,UAAU,+CAEjB,2BACIG,KAAK,OACLH,UAAU,oDACVK,YAAY,cACZlF,MAAOU,EACP6F,SAAU,SAACC,GAAO,IAAD,EACb7F,EAAa,OAAC6F,QAAD,IAACA,GAAD,UAACA,EAAGC,cAAJ,aAAC,EAAWzG,OACzBiB,EAAc,UAOtC,yBAAK4D,UAAU,WAAW6B,MAAO,CAAEC,UAAW,QAC1C,4BACI3B,KAAK,SACLH,UAAU,kCACVmB,QAAS,kBAlNrC1D,UACAd,GAAQ,KA8MgB,cASR,yBAAKqD,UAAU,oBACX,2BAAOA,UAAU,uBACb,+BACI,4BACI,sCACA,uCACA,6CACA,uCACA,uCACA,wCACA,0CAGR,+BAEQhD,EAAY,kBAAC,IAAM+E,SAAP,KAAgB,kBAAC,IAAD,OAAnB,OAELnF,QAFK,IAELA,OAFK,EAELA,EAAU+D,KAAI,SAACC,EAAMC,GACjB,OACI,wBAAIC,IAAKD,GACL,mCAAKD,QAAL,IAAKA,OAAL,EAAKA,EAAMR,MACX,mCAAKQ,QAAL,IAAKA,OAAL,EAAKA,EAAMoB,OACX,mCAAKpB,QAAL,IAAKA,OAAL,EAAKA,EAAM5C,QACX,mCAAK4C,QAAL,IAAKA,OAAL,EAAKA,EAAMH,OACX,mCAAKG,QAAL,IAAKA,OAAL,EAAKA,EAAMI,WACX,4BACI,4BAEIN,GAAIE,EAAKF,GAETgB,SAAU,SAACC,GAAD,OA/QhD,SAACjB,EAAIiB,GACvBM,QAAQC,IAAIP,EAAEC,OAAOzG,MAAOuF,GAC5ByB,aAAW,CACP,QAAWzB,EACX,OAAUiB,EAAEC,OAAOzG,QAEvBoD,IAAMgB,QAAQ,8BAA+B,CACzCC,WAAW,IAwQ0D4C,CAAcxB,EAAKF,GAAIiB,KAExC,4BACIxG,MAAM,IACNkH,SAAyB,GAAfzB,EAAK0B,QAAc,YAFjC,OAMA,4BACInH,MAAM,IACNkH,SAAyB,GAAfzB,EAAK0B,QAAc,YAFjC,aASR,4BACI,uBACInB,QAAS,kBApWhDoB,EAoWiE,OAAC3B,QAAD,IAACA,OAAD,EAACA,EAAMF,QAlWzF8B,IAAKC,KAAK,CACNT,MAAO,gBACPU,KAAM,uDACNC,KAAM,UACNC,kBAAkB,EAClBC,kBAAmB,UACnBC,mBAAoB,UACpBC,kBAAmB,kBACnBC,iBAAkB,gBACnBC,MAAK,SAACC,GACL,GAAIA,EAAO/H,MACP,OACIgI,YAAWZ,GAAKpD,SAAQ,kBAAM/B,QAC9BoF,IAAKC,KACD,WACA,8BACA,WAGDS,EAAOE,UAAYZ,IAAKa,cAAcC,QAC7Cd,IAAKC,KAAK,YAAa,uBAAwB,YAtBvC,IAACF,GAqWuCvC,UAAU,oBAGlB,mCAQ5B,kBAAC,IAAD,CACIuD,WAAW,MACXC,UAAU,SACVxD,UAAU,cACVyD,aAxXJ,SAACrC,GACrBhF,EAAcgF,EAAMiB,WAwXIqB,mBAAoB,EACpB1H,UAAWA,EACX2H,cAAc,aACdC,sBAAuB,KACvBC,UAAW1H","file":"static/js/28.79f99608.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\n// Hook\r\nexport const useDebounce = (value, delay) => {\r\n    // State and setters for debounced value\r\n    const [debouncedValue, setDebouncedValue] = useState(value);\r\n    useEffect(\r\n      () => {\r\n        // Update debounced value after delay\r\n        const handler = setTimeout(() => {\r\n          setDebouncedValue(value);\r\n        }, delay);\r\n        // Cancel the timeout if value changes (also on delay change or unmount)\r\n        // This is how we prevent debounced value from updating if value is changed ...\r\n        // .. within the delay period. Timeout gets cleared and restarted.\r\n        return () => {\r\n          clearTimeout(handler);\r\n        };\r\n      },\r\n      [value, delay] // Only re-call effect if value or delay changes\r\n    );\r\n    return debouncedValue;\r\n  }","import React, { useEffect, useState } from \"react\";\r\nimport { useCookies } from \"react-cookie\";\r\nimport ReactPaginate from \"react-paginate\";\r\nimport { CreateLead, getLeads, getBranchesClient, updateLead, deleteLead, userLogout } from \"../../../utils/APIs\";\r\nimport Swal from \"sweetalert2\";\r\nimport { useDebounce } from \"../../../utils/Functions/useDebounce\";\r\nimport Spinner from \"../../shared/Spinner\";\r\nimport { useUrl } from \"../../../utils/Functions/useUrl\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Form } from 'react-bootstrap';\r\n\r\n\r\nconst Leads = () => {\r\n    const [searchTerm, setSearchTerm] = useState(\"\");\r\n    const debouncedSearchTerm = useDebounce(searchTerm, 500);\r\n\r\n    // We start with an empty list of items.\r\n    const [pageCount, setPageCount] = useState(0);\r\n    // Here we use item offsets; we could also use page offsets\r\n    // following the API or data you're working with.\r\n    const [itemOffset, setItemOffset] = useUrl(\"page\");\r\n    const [itemsPerPage] = useState(20);\r\n\r\n    const [cookies, setCookie] = useCookies([\"user\"]);\r\n    const [show, setShow] = React.useState(false);\r\n    const [itemlist, setitemlist] = useState([]);\r\n    const [branchlist, setbranchlist] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        list();\r\n    }, [itemOffset, itemsPerPage, debouncedSearchTerm]);\r\n\r\n    // Invoke when user click to request another page. \r\n    const handlePageClick = (event) => {\r\n        setItemOffset(event.selected);\r\n    };\r\n\r\n    const deleteLeads = (uid) => {\r\n        // console.log(\"uid\", uid)\r\n        Swal.fire({\r\n            title: \"Are you sure?\",\r\n            text: \"You will not be able to recover this imaginary file!\",\r\n            icon: \"warning\",\r\n            showCancelButton: true,\r\n            cancelButtonColor: \"#DD6B55\",\r\n            confirmButtonColor: \"#DD6B55\",\r\n            confirmButtonText: \"Yes, delete it!\",\r\n            cancelButtonText: \"No, keep it\",\r\n        }).then((result) => {\r\n            if (result.value) {\r\n                return (\r\n                    deleteLead(uid).finally(() => list()),\r\n                    Swal.fire(\r\n                        \"Deleted!\",\r\n                        \"Your Lead has been deleted.\",\r\n                        \"success\"\r\n                    )\r\n                );\r\n            } else if (result.dismiss === Swal.DismissReason.cancel) {\r\n                Swal.fire(\"Cancelled\", \"Your Lead is safe :)\", \"error\");\r\n            }\r\n        });\r\n    };\r\n\r\n    const { register, handleSubmit, reset, formState: { errors, isDirty, isValid } } = useForm({\r\n        mode: \"onChange\"\r\n    });\r\n\r\n    const list = async () => {\r\n        setIsLoading(true)\r\n        try {\r\n            const branch = await (await getBranchesClient()).data;\r\n            setbranchlist(branch?.results);\r\n            const items = await (\r\n                await getLeads(\r\n                    itemsPerPage,\r\n                    +itemOffset + 1,\r\n                    searchTerm\r\n                )\r\n            ).data;\r\n            setitemlist(items?.results);\r\n            setPageCount(items?.totalPages);\r\n            setIsLoading(false)\r\n        } catch (error) {\r\n            if (error?.response?.data?.message) {\r\n                toast.error(error.response.data.message);\r\n            } else {\r\n                toast.error(process.env.REACT_APP_ERROR_MESSAGE);\r\n            }\r\n\r\n            if (error?.response?.data?.code === 401) {\r\n                const formData = JSON.stringify({\r\n                    refreshToken: localStorage.getItem(\"refreshToken\"),\r\n                });\r\n                setCookie(\"user\", null, { path: \"/\" });\r\n                userLogout(formData).finally(() => {\r\n                    history.push(\"/user-pages/login-1\");\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    const statusChanged = (id, e) => {\r\n        console.log(e.target.value, id);\r\n        updateLead({\r\n            \"lead_id\": id,\r\n            \"status\": e.target.value\r\n        })\r\n        toast.success('Status updated successfully', {\r\n            autoClose: true\r\n        })\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setShow(false)\r\n        reset()\r\n    };\r\n\r\n    const onSubmit = async (data) => {\r\n        await CreateLead(data)\r\n        setShow(false);\r\n        toast.success('Lead added successfully', {\r\n            autoClose: true\r\n        })\r\n    }\r\n\r\n    const handleShow = () => {\r\n        reset()\r\n        setShow(true);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Modal\r\n                show={show}\r\n                onHide={handleClose}\r\n                backdrop=\"static\"\r\n                keyboard={false}\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Create Lead</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <div className=\"row auth\">\r\n                        <div className=\"col-12 grid-margin\">\r\n                            <div className=\"card\">\r\n                                <div className=\"card-body\">\r\n                                    <form className=\"form-sample\" onSubmit={handleSubmit(onSubmit)}>\r\n\r\n                                        <div className=\"row\">\r\n                                            <div className=\"col-md-12\">\r\n                                                <Form.Group className=\"row\">\r\n                                                    <label className=\"col-sm-3 col-form-label\">\r\n                                                        Name\r\n                                                    </label>\r\n                                                    <div className=\"col-sm-9\">\r\n                                                        <Form.Control\r\n                                                            type=\"text\"\r\n                                                            name=\"name\"\r\n                                                            placeholder=\"Name\"\r\n                                                            autoFocus\r\n                                                            {...register(\"name\", {\r\n                                                                required: true,\r\n                                                            })}\r\n                                                        />\r\n                                                        {errors &&\r\n                                                            errors.Name &&\r\n                                                            errors.Name.type === \"required\" && (\r\n                                                                <p>Name is required field</p>\r\n                                                            )}\r\n                                                    </div>\r\n                                                </Form.Group>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"row\">\r\n                                            <div className=\"col-md-12\">\r\n                                                <Form.Group className=\"row\">\r\n                                                    <label className=\"col-sm-3 col-form-label\">\r\n                                                        Title\r\n                                                    </label>\r\n                                                    <div className=\"col-sm-9\">\r\n                                                        <Form.Control\r\n                                                            type=\"text\"\r\n                                                            name=\"title\"\r\n                                                            placeholder=\"Title\"\r\n                                                            autoFocus\r\n                                                            {...register(\"title\", {\r\n                                                                required: true,\r\n                                                            })}\r\n                                                        />\r\n                                                        {errors &&\r\n                                                            errors.Title &&\r\n                                                            errors.Title.type === \"required\" && (\r\n                                                                <p>Title is required field</p>\r\n                                                            )}\r\n                                                    </div>\r\n                                                </Form.Group>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"row\">\r\n                                            <div className=\"col-md-12\">\r\n                                                <Form.Group className=\"row\">\r\n                                                    <label className=\"col-sm-3 col-form-label\">\r\n                                                        Email\r\n                                                    </label>\r\n                                                    <div className=\"col-sm-9\">\r\n                                                        <Form.Control\r\n                                                            type=\"text\"\r\n                                                            name=\"email\"\r\n                                                            placeholder=\"Email\"\r\n                                                            autoFocus\r\n                                                            {...register(\"email\", {\r\n                                                                required: true,\r\n                                                            })}\r\n                                                        />\r\n                                                        {errors &&\r\n                                                            errors.email &&\r\n                                                            errors.email.type === \"required\" && (\r\n                                                                <p>Email is required field</p>\r\n                                                            )}\r\n                                                    </div>\r\n                                                </Form.Group>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"row\">\r\n                                            <div className=\"col-md-12\">\r\n                                                <Form.Group className=\"row\">\r\n                                                    <label className=\"col-sm-3 col-form-label\">\r\n                                                        Branch\r\n                                                    </label>\r\n                                                    <div className=\"col-sm-9\">\r\n                                                        <select\r\n                                                            className=\"form-control form-control-lg\"\r\n                                                            id=\"exampleFormControlSelect2\"\r\n                                                            name=\"branch\"\r\n                                                            {...register(\"branch\", {\r\n                                                                required: true,\r\n                                                            })}\r\n                                                        >\r\n                                                            <option value=''>--Select branch--</option>\r\n                                                            {branchlist.map((item, index) => (\r\n                                                                <option key={index} value={item?.name} label={item?.name}></option>\r\n                                                            ))}\r\n                                                        </select>\r\n                                                        {errors && errors.branch && <p>Select branch is required field</p>}\r\n                                                    </div>\r\n                                                </Form.Group>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div className=\"row\">\r\n                                            <div className=\"col-md-12\">\r\n                                                <Form.Group className=\"row\">\r\n                                                    <label className=\"col-sm-3 col-form-label\">Contact No</label>\r\n                                                    <div className=\"col-sm-9\">\r\n                                                        <Form.Control\r\n                                                            type=\"text\"\r\n                                                            name=\"contactno\"\r\n                                                            placeholder=\"Contact Number\"\r\n                                                            autoFocus\r\n                                                            {...register(\"contactno\", {\r\n                                                                required: true,\r\n                                                            })}\r\n                                                        />\r\n                                                        {errors &&\r\n                                                            errors.contactno &&\r\n                                                            errors.contactno.type === \"required\" && (\r\n                                                                <p>Contact Number is required field</p>\r\n                                                            )}\r\n\r\n                                                    </div>\r\n                                                </Form.Group>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div className=\"mt-3\">\r\n                                            <button\r\n                                                className=\"btn  btn-primary btn-sm font-weight-medium auth-form-btn\"\r\n                                                type=\"submit\"\r\n                                            >\r\n                                                CREATE\r\n                                            </button>\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </Modal.Body>\r\n            </Modal>\r\n            <div className=\"page-header\">\r\n                <h3 className=\"page-title\">Leads / Show Leads </h3>\r\n                <nav aria-label=\"breadcrumb\">\r\n                    <ol className=\"breadcrumb\">\r\n                        <li className=\"breadcrumb-item\">\r\n                            <a href=\"!#\" onClick={(event) => event.preventDefault()}>\r\n                                {cookies?.user?.role} Dashboard\r\n                            </a>\r\n                        </li>\r\n                        <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n                            Show Leads\r\n                        </li>\r\n                    </ol>\r\n                </nav>\r\n            </div>\r\n            <div className=\"col-lg-12 grid-margin stretch-card p0\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                        <div className=\"row mb-3\">\r\n                            <div className=\"col-md-4\">\r\n                                <h4 className=\"card-title\">Lead list</h4>\r\n                            </div>\r\n                            <div className=\"col-md-5\">\r\n                                <div className=\"search-field d-none d-md-block\">\r\n                                    <form className=\"d-flex align-items-center h-100\" action=\"#\">\r\n                                        <div className=\"input-group\">\r\n                                            <div className=\"input-group-prepend outline-gray bg-transparent\">\r\n                                                <i className=\"input-group-text border-0 mdi mdi-magnify\"></i>\r\n                                            </div>\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                className=\"form-control outline-gray bg-transparent border-0\"\r\n                                                placeholder=\"Search Lead\"\r\n                                                value={searchTerm}\r\n                                                onChange={(e) => {\r\n                                                    setSearchTerm(e?.target?.value);\r\n                                                    setItemOffset(0);\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-3\" style={{ textAlign: 'end' }}>\r\n                                <button\r\n                                    type=\"button\"\r\n                                    className=\"btn btn-gradient-primary btn-fw\"\r\n                                    onClick={() => handleShow()}\r\n                                >\r\n                                    Add Lead\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"table-responsive\">\r\n                            <table className=\"table table-striped\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th> Name </th>\r\n                                        <th> Title </th>\r\n                                        <th> Branch Name </th>\r\n                                        <th> Email </th>\r\n                                        <th> Phone </th>\r\n                                        <th> Status </th>\r\n                                        <th> Delete </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {\r\n                                        isLoading ? <React.Fragment><Spinner /></React.Fragment>\r\n                                            :\r\n                                            itemlist?.map((item, index) => {\r\n                                                return (\r\n                                                    <tr key={index}>\r\n                                                        <td>{item?.name}</td>\r\n                                                        <td>{item?.title}</td>\r\n                                                        <td>{item?.branch}</td>\r\n                                                        <td>{item?.email}</td>\r\n                                                        <td>{item?.contactno}</td>\r\n                                                        <td>\r\n                                                            <select\r\n\r\n                                                                id={item.id}\r\n\r\n                                                                onChange={(e) => statusChanged(item.id, e)}\r\n                                                            >\r\n                                                                <option\r\n                                                                    value=\"0\"\r\n                                                                    selected={item.status == 0 ? \"selected\" : true}\r\n                                                                >\r\n                                                                    New\r\n                                                                </option>\r\n                                                                <option\r\n                                                                    value=\"1\"\r\n                                                                    selected={item.status == 1 ? \"selected\" : false}\r\n                                                                >\r\n                                                                    Working\r\n                                                                </option>\r\n\r\n                                                            </select>\r\n                                                        </td>\r\n                                                        <td>\r\n                                                            <i\r\n                                                                onClick={() => deleteLeads(item?.id)}\r\n                                                                className=\"mdi mdi-delete\"\r\n                                                            ></i>\r\n                                                        </td>\r\n                                                        <td>\r\n\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                );\r\n                                            })}\r\n                                </tbody>\r\n                            </table>\r\n                            <ReactPaginate\r\n                                breakLabel=\"...\"\r\n                                nextLabel=\"next >\"\r\n                                className=\"client-list\"\r\n                                onPageChange={handlePageClick}\r\n                                pageRangeDisplayed={5}\r\n                                pageCount={pageCount}\r\n                                previousLabel=\"< previous\"\r\n                                renderOnZeroPageCount={null}\r\n                                forcePage={itemOffset}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Leads;\r\n"],"sourceRoot":""}