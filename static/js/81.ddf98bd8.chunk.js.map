{"version":3,"sources":["app/BranchComponents/EmployeeList/index.js"],"names":["EmployeeList","history","useHistory","useCookies","cookies","setCookie","useState","itemlist","setitemlist","setCurrentItems","pageCount","setPageCount","itemOffset","setItemOffset","itemsPerPage","useEffect","endOffset","getUsers","data","items","results","console","log","slice","Math","ceil","length","info","response","message","toast","error","process","code","formData","JSON","stringify","refreshToken","localStorage","getItem","path","userLogout","finally","push","className","aria-label","href","onClick","event","preventDefault","user","role","aria-current","map","item","name","contactno","branch","email","breakLabel","nextLabel","onPageChange","newOffset","selected","pageRangeDisplayed","previousLabel","renderOnZeroPageCount"],"mappings":";qgNAoIeA,UA7HM,WAAO,IAAD,EACnBC,EAAUC,cAChB,EAA6BC,YAAW,CAAC,SAAzC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAGA,EAAwCF,mBAAS,MAAjD,mBAAqBG,GAArB,WACA,EAAkCH,mBAAS,GAA3C,mBAAOI,EAAP,KAAkBC,EAAlB,KAGA,EAAoCL,mBAAS,GAA7C,mBAAOM,EAAP,KAAmBC,EAAnB,KACA,EAAwCP,mBAAS,IAAjD,mBAAOQ,EAAP,UAEAC,qBAAU,WACR,sBAAC,2GACOC,EAAYJ,EAAaE,EADhC,kBAG8BG,YAASH,EAAcF,GAHrD,8BAGkEM,KAHlE,OAGSC,EAHT,OAIGX,EAAW,OAACW,QAAD,IAACA,OAAD,EAACA,EAAOC,SAEnBC,QAAQC,IAAR,6BAAkCV,EAAlC,eAAmDI,IACnDP,EAAe,OAACU,QAAD,IAACA,GAAD,UAACA,EAAOC,eAAR,aAAC,EAAgBG,MAAMX,EAAYI,IAClDL,EAAaa,KAAKC,MAAU,OAALN,QAAK,IAALA,GAAA,UAAAA,EAAOC,eAAP,eAAgBM,QAASZ,IARnD,kDAUGO,QAAQM,KAAK,SAAb,OACA,sCAAI,KAAOC,gBAAX,iBAAI,EAAiBV,YAArB,aAAI,EAAuBW,SACzBC,IAAMC,MAAM,KAAMH,SAASV,KAAKW,SAEhCC,IAAMC,MAAMC,wFAGsB,OAAhC,2CAAOJ,gBAAP,mBAAiBV,YAAjB,eAAuBe,QACnBC,EAAWC,KAAKC,UAAU,CAC9BC,aAAcC,aAAaC,QAAQ,kBAErClC,EAAU,OAAQ,KAAM,CAAEmC,KAAM,MAChCC,YAAWP,GAAUQ,SAAQ,WAC3BzC,EAAQ0C,KAAK,2BAvBpB,yDAAD,KA4BC,CAAC/B,EAAYE,IAUhB,OACE,6BACE,yBAAK8B,UAAU,eACb,wBAAIA,UAAU,cAAd,6BACA,yBAAKC,aAAW,cACd,wBAAID,UAAU,cACZ,wBAAIA,UAAU,mBACZ,uBAAGE,KAAK,KAAKC,QAAS,SAACC,GAAD,OAAWA,EAAMC,mBAAvC,OACG7C,QADH,IACGA,GADH,UACGA,EAAS8C,YADZ,aACG,EAAeC,KADlB,eAIF,wBAAIP,UAAU,yBAAyBQ,eAAa,QAApD,qBAMN,yBAAKR,UAAU,yCACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,cAAd,iBAEA,yBAAKA,UAAU,oBACb,2BAAOA,UAAU,uBACf,+BACE,4BACE,sCACA,6CACA,wCACA,uCACA,sCACA,sCACA,0CAGJ,sCACGrC,QADH,IACGA,OADH,EACGA,EAAU8C,KAAI,SAACC,GACd,OACE,4BACE,mCAAKA,QAAL,IAAKA,OAAL,EAAKA,EAAMC,MACX,mCAAKD,QAAL,IAAKA,OAAL,EAAKA,EAAME,WACX,mCAAKF,QAAL,IAAKA,OAAL,EAAKA,EAAMG,QACX,mCAAKH,QAAL,IAAKA,OAAL,EAAKA,EAAMI,OACX,mCAAKJ,QAAL,IAAKA,OAAL,EAAKA,EAAMH,MACX,4BACE,uBAAGP,UAAU,yBAEf,4BACE,uBAAGA,UAAU,0BAOzB,kBAAC,IAAD,CACEe,WAAW,MACXC,UAAU,SACVhB,UAAU,cACViB,aAlEU,SAACb,GACvB,IAAMc,EAAad,EAAMe,SAAWjD,EAAgBP,EAASmB,OAC7DL,QAAQC,IAAR,qCACgC0B,EAAMe,SADtC,6BACmED,IAEnEjD,EAAciD,IA8DFE,mBAAoB,EACpBtD,UAAWA,EACXuD,cAAc,aACdC,sBAAuB","file":"static/js/81.ddf98bd8.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useCookies } from \"react-cookie\";\nimport ReactPaginate from \"react-paginate\";\nimport { getUsers, userLogout } from \"../../../utils/APIs\";\nimport { toast } from \"react-toastify\";\nimport { useHistory } from \"react-router-dom\";\n\nconst EmployeeList = () => {\n  const history = useHistory();\n  const [cookies, setCookie] = useCookies([\"user\"]);\n  const [itemlist, setitemlist] = useState([]);\n\n  // We start with an empty list of items.\n  const [currentItems, setCurrentItems] = useState(null);\n  const [pageCount, setPageCount] = useState(0);\n  // Here we use item offsets; we could also use page offsets\n  // following the API or data you're working with.\n  const [itemOffset, setItemOffset] = useState(0);\n  const [itemsPerPage, setitemsPerPage] = useState(10);\n\n  useEffect(() => {\n    (async () => {\n      const endOffset = itemOffset + itemsPerPage;\n      try {\n        const items = await (await getUsers(itemsPerPage, itemOffset)).data;\n        setitemlist(items?.results);\n        // Fetch items from another resources.\n        console.log(`Loading items from ${itemOffset} to ${endOffset}`);\n        setCurrentItems(items?.results?.slice(itemOffset, endOffset));\n        setPageCount(Math.ceil(items?.results?.length / itemsPerPage));\n      } catch (error) {\n        console.info(\"error \", error);\n        if (error?.response?.data?.message) {\n          toast.error(error.response.data.message);\n        } else {\n          toast.error(process.env.REACT_APP_ERROR_MESSAGE);\n        }\n\n        if (error?.response?.data?.code === 401) {\n          const formData = JSON.stringify({\n            refreshToken: localStorage.getItem(\"refreshToken\"),\n          });\n          setCookie(\"user\", null, { path: \"/\" });\n          userLogout(formData).finally(() => {\n            history.push(\"/user-pages/login-1\");\n          });\n        }\n      }\n    })();\n  }, [itemOffset, itemsPerPage]);\n\n  // Invoke when user click to request another page.\n  const handlePageClick = (event) => {\n    const newOffset = (event.selected * itemsPerPage) % itemlist.length;\n    console.log(\n      `User requested page number ${event.selected}, which is offset ${newOffset}`\n    );\n    setItemOffset(newOffset);\n  };\n  return (\n    <div>\n      <div className=\"page-header\">\n        <h3 className=\"page-title\">Clients / Fetch Employee </h3>\n        <nav aria-label=\"breadcrumb\">\n          <ol className=\"breadcrumb\">\n            <li className=\"breadcrumb-item\">\n              <a href=\"!#\" onClick={(event) => event.preventDefault()}>\n                {cookies?.user?.role} Dashboard\n              </a>\n            </li>\n            <li className=\"breadcrumb-item active\" aria-current=\"page\">\n              Fetch Employee\n            </li>\n          </ol>\n        </nav>\n      </div>\n      <div className=\"col-lg-12 grid-margin stretch-card p0\">\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <h4 className=\"card-title\">Employee list</h4>\n\n            <div className=\"table-responsive\">\n              <table className=\"table table-striped\">\n                <thead>\n                  <tr>\n                    <th> Name </th>\n                    <th> Contact no. </th>\n                    <th> Branch </th>\n                    <th> Email </th>\n                    <th> Role </th>\n                    <th> Edit </th>\n                    <th> Delete </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {itemlist?.map((item) => {\n                    return (\n                      <tr>\n                        <td>{item?.name}</td>\n                        <td>{item?.contactno}</td>\n                        <td>{item?.branch}</td>\n                        <td>{item?.email}</td>\n                        <td>{item?.role}</td>\n                        <td>\n                          <i className=\"mdi mdi-lead-pencil\"></i>\n                        </td>\n                        <td>\n                          <i className=\"mdi mdi-delete\"></i>\n                        </td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n              <ReactPaginate\n                breakLabel=\"...\"\n                nextLabel=\"next >\"\n                className=\"client-list\"\n                onPageChange={handlePageClick}\n                pageRangeDisplayed={5}\n                pageCount={pageCount}\n                previousLabel=\"< previous\"\n                renderOnZeroPageCount={null}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default EmployeeList;\n"],"sourceRoot":""}