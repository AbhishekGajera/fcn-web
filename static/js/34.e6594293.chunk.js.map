{"version":3,"sources":["utils/Functions/useDebounce.js","app/client-component/investment/PowerOneFetch.js"],"names":["useDebounce","value","delay","useState","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","PowerOneFetch","searchTerm","setSearchTerm","debouncedSearchTerm","pageCount","setPageCount","useUrl","itemOffset","setItemOffset","itemsPerPage","useCookies","cookies","setCookie","React","show","setShow","valueToEdit","setvalueToEdit","itemlist","setitemlist","isLoading","setIsLoading","history","useHistory","list","useForm","mode","register","handleSubmit","reset","formState","errors","onSubmit","isDirty","isValid","data","updatePowerone","id","toast","success","autoClose","response","message","error","process","getpowerone","items","results","totalPages","code","formData","JSON","stringify","refreshToken","localStorage","getItem","path","userLogout","finally","push","onHide","backdrop","keyboard","Header","closeButton","Title","Body","className","Group","Control","type","name","defaultValue","required","placeholder","email","address","as","desc","mobile","style","color","city","state","country","aria-label","href","onClick","event","preventDefault","user","role","aria-current","action","onChange","e","target","Fragment","map","item","index","key","uid","Swal","fire","title","text","icon","showCancelButton","cancelButtonColor","confirmButtonColor","confirmButtonText","cancelButtonText","then","result","deletePowerone","dismiss","DismissReason","cancel","breakLabel","nextLabel","onPageChange","selected","pageRangeDisplayed","previousLabel","renderOnZeroPageCount","forcePage"],"mappings":"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","file":"static/js/34.e6594293.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\n// Hook\r\nexport const useDebounce = (value, delay) => {\r\n    // State and setters for debounced value\r\n    const [debouncedValue, setDebouncedValue] = useState(value);\r\n    useEffect(\r\n      () => {\r\n        // Update debounced value after delay\r\n        const handler = setTimeout(() => {\r\n          setDebouncedValue(value);\r\n        }, delay);\r\n        // Cancel the timeout if value changes (also on delay change or unmount)\r\n        // This is how we prevent debounced value from updating if value is changed ...\r\n        // .. within the delay period. Timeout gets cleared and restarted.\r\n        return () => {\r\n          clearTimeout(handler);\r\n        };\r\n      },\r\n      [value, delay] // Only re-call effect if value or delay changes\r\n    );\r\n    return debouncedValue;\r\n  }","import React, { useEffect, useState } from \"react\";\r\nimport { useCookies } from \"react-cookie\";\r\nimport ReactPaginate from \"react-paginate\";\r\nimport { deletePowerone, getpowerone, userLogout, UpdateProducts, updatePowerone } from \"../../../utils/APIs\";\r\nimport Swal from \"sweetalert2\";\r\nimport { useDebounce } from \"../../../utils/Functions/useDebounce\";\r\nimport Spinner from \"../../shared/Spinner\";\r\nimport { useUrl } from \"../../../utils/Functions/useUrl\";\r\nimport { toast } from \"react-toastify\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Form } from 'react-bootstrap';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\nconst PowerOneFetch = () => {\r\n    const [searchTerm, setSearchTerm] = useState(\"\");\r\n    const debouncedSearchTerm = useDebounce(searchTerm, 500);\r\n\r\n    const [selectedProductType, setselectedProductType] = useState(\"\");\r\n    const [selectedProductCategory, setselectedProductCategory] = useState(\"\");\r\n    const [isChecked, setIsChecked] = useState(\"\");\r\n\r\n    // We start with an empty list of items.\r\n    const [pageCount, setPageCount] = useState(0);\r\n    // Here we use item offsets; we could also use page offsets\r\n    // following the API or data you're working with.\r\n    const [itemOffset, setItemOffset] = useUrl(\"page\");\r\n    const [itemsPerPage] = useState(20);\r\n    const [cookies, setCookie] = useCookies([\"user\"]);\r\n    const [show, setShow] = React.useState(false);\r\n    const [valueToEdit, setvalueToEdit] = useState({});\r\n    const [itemlist, setitemlist] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        list();\r\n    }, [itemOffset, itemsPerPage, debouncedSearchTerm]);\r\n\r\n    // Invoke when user click to request another page. \r\n    const handlePageClick = (event) => {\r\n        setItemOffset(event.selected);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setShow(false)\r\n        setvalueToEdit({})\r\n        reset()\r\n    };\r\n\r\n    const handleShow = (value) => {\r\n        reset()\r\n        setvalueToEdit(value)\r\n        setShow(true);\r\n    }\r\n\r\n    const { register, handleSubmit, reset, formState: { errors, isDirty, isValid } } = useForm({\r\n        mode: \"onChange\"\r\n    });\r\n\r\n    const deletePowerOne = (uid) => {\r\n        Swal.fire({\r\n            title: \"Are you sure?\",\r\n            text: \"You will not be able to recover this imaginary file!\",\r\n            icon: \"warning\",\r\n            showCancelButton: true,\r\n            cancelButtonColor: \"#DD6B55\",\r\n            confirmButtonColor: \"#DD6B55\",\r\n            confirmButtonText: \"Yes, delete it!\",\r\n            cancelButtonText: \"No, keep it\",\r\n        }).then((result) => {\r\n            if (result.value) {\r\n                return (\r\n                    deletePowerone(uid).finally(() => list()),\r\n                    Swal.fire(\r\n                        \"Deleted!\",\r\n                        \"Your imaginary file has been deleted.\",\r\n                        \"success\"\r\n                    )\r\n                );\r\n            } else if (result.dismiss === Swal.DismissReason.cancel) {\r\n                Swal.fire(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\r\n            }\r\n        });\r\n    };\r\n\r\n    const onSubmit = async (data) => {\r\n        try {\r\n            await updatePowerone(valueToEdit?.id, data)\r\n            toast.success('Powerone updated Successfully', {\r\n                autoClose: 3000\r\n            })\r\n            list()\r\n        } catch (error) {\r\n            if (\r\n                error &&\r\n                error.response &&\r\n                error.response.data &&\r\n                error.response.data.message\r\n            ) {\r\n                toast.error(error.response.data.message);\r\n            } else {\r\n                toast.error(process.env.REACT_APP_ERROR_MESSAGE);\r\n            }\r\n        } finally {\r\n            setShow(false)\r\n        }\r\n    };\r\n\r\n\r\n    const list = async () => {\r\n        setIsLoading(true)\r\n        try {\r\n            const items = await (\r\n                await getpowerone(\r\n                    itemsPerPage,\r\n                    +itemOffset + 1,\r\n                    searchTerm,\r\n                )\r\n            ).data;\r\n            setitemlist(items?.results);\r\n            setPageCount(items?.totalPages);\r\n            setIsLoading(false)\r\n        } catch (error) {\r\n            if (error?.response?.data?.message) {\r\n                toast.error(error.response.data.message);\r\n            } else {\r\n                toast.error(process.env.REACT_APP_ERROR_MESSAGE);\r\n            }\r\n\r\n            if (error?.response?.data?.code === 401) {\r\n                const formData = JSON.stringify({\r\n                    refreshToken: localStorage.getItem(\"refreshToken\"),\r\n                });\r\n                setCookie(\"user\", null, { path: \"/\" });\r\n                userLogout(formData).finally(() => {\r\n                    history.push(\"/user-pages/login-1\");\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Modal\r\n                show={show}\r\n                onHide={handleClose}\r\n                backdrop=\"static\"\r\n                keyboard={false}\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Update Powerone</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <div className=\"row auth\">\r\n                        <div className=\"col-12 grid-margin\">\r\n                            <div className=\"card\">\r\n                                <div className=\"card-body\">\r\n                                    <form className=\"form-sample\" onSubmit={handleSubmit(onSubmit)}>\r\n                                        <div className=\"row\">\r\n                                            <div className=\"col-md-12\">\r\n                                                <Form.Group className=\"row\">\r\n                                                    <label className=\"col-sm-3 col-form-label\">\r\n                                                        Name\r\n                                                    </label>\r\n                                                    <div className=\"col-sm-9\">\r\n                                                        <Form.Control\r\n                                                            type=\"text\"\r\n                                                            name=\"name\"\r\n                                                            defaultValue={valueToEdit.name}\r\n                                                            {...register(\"name\", { required: true })}\r\n                                                            placeholder=\"name\"\r\n                                                        />\r\n                                                        {errors && errors.name && <p>name is required field</p>}\r\n                                                    </div>\r\n                                                </Form.Group>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"row\">\r\n                                            <div className=\"col-md-12\">\r\n                                                <Form.Group className=\"row\">\r\n                                                    <label className=\"col-sm-3 col-form-label\">\r\n                                                        Email{\" \"}\r\n                                                    </label>\r\n                                                    <div className=\"col-sm-9\">\r\n                                                        <Form.Control\r\n                                                            type=\"text\"\r\n                                                            name=\"email\"\r\n                                                            defaultValue={valueToEdit.email}\r\n                                                            {...register(\"email\", { required: true })}\r\n                                                            placeholder=\"email\"\r\n                                                        />\r\n                                                        {errors && errors.address && (\r\n                                                            <p>Email is required field</p>\r\n                                                        )}\r\n                                                    </div>\r\n                                                </Form.Group>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"row\">\r\n                                            <div className=\"col-md-12\">\r\n                                                <Form.Group className=\"row\">\r\n                                                    <label className=\"col-sm-3 col-form-label\">\r\n                                                        Address{\" \"}\r\n                                                    </label>\r\n                                                    <div className=\"col-sm-9\">\r\n                                                        <Form.Control\r\n                                                            as=\"textarea\"\r\n                                                            name=\"address\"\r\n                                                            defaultValue={valueToEdit.address}\r\n                                                            {...register(\"address\", { required: true })}\r\n                                                            placeholder=\"address\"\r\n                                                        />\r\n                                                        {errors && errors.desc && (\r\n                                                            <p>Address is required field</p>\r\n                                                        )}\r\n                                                    </div>\r\n                                                </Form.Group>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"row\" >\r\n                                            <div className=\"col-md-12\">\r\n                                                <Form.Group className=\"row\">\r\n                                                    <label className=\"col-sm-3 col-form-label\">Mobile</label>\r\n                                                    <div className=\"col-sm-9\">\r\n                                                        <Form.Control type=\"text\"\r\n                                                            name=\"mobile\"\r\n                                                            defaultValue={valueToEdit?.mobile}\r\n                                                            {...register(\"mobile\", { required: true })} />\r\n                                                        {errors && errors.mobile && <p style={{ color: \"red\" }}>Mobile is required field</p>}\r\n                                                    </div>\r\n                                                </Form.Group>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"row\" >\r\n                                            <div className=\"col-md-12\">\r\n                                                <Form.Group className=\"row\">\r\n                                                    <label className=\"col-sm-3 col-form-label\">City</label>\r\n                                                    <div className=\"col-sm-9\">\r\n                                                        <Form.Control type=\"text\" name=\"city\" placeholder=\"Enter Your city\"\r\n                                                            defaultValue={valueToEdit?.city}\r\n                                                            {...register(\"city\", { required: true })} />\r\n\r\n                                                        {errors && errors.city && <p style={{ color: \"red\" }}>city is required field</p>}\r\n                                                    </div>\r\n                                                </Form.Group>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"row\">\r\n                                            <div className=\"col-md-12\">\r\n                                                <Form.Group className=\"row\">\r\n                                                    <label className=\"col-sm-3 col-form-label\">State</label>\r\n                                                    <div className=\"col-sm-9\">\r\n                                                        <Form.Control type=\"text\" name=\"state\" placeholder=\"Enter Your state\"\r\n                                                            defaultValue={valueToEdit?.state}\r\n                                                            {...register(\"state\", { required: true })} />\r\n                                                        {errors && errors.state && <p style={{ color: \"red\" }}>state is required field</p>}\r\n                                                    </div>\r\n                                                </Form.Group>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"row\">\r\n                                            <div className=\"col-md-12\">\r\n                                                <Form.Group className=\"row\">\r\n                                                    <label className=\"col-sm-3 col-form-label\">Country</label>\r\n                                                    <div className=\"col-sm-9\">\r\n                                                        <Form.Control type=\"text\" name=\"country\" placeholder=\"Enter Your country\"\r\n                                                           defaultValue={valueToEdit?.country}\r\n                                                           {...register(\"country\", { required: true })} />\r\n                                                        {errors && errors.country && <p style={{ color: \"red\" }}>country is required field</p>}\r\n                                                    </div>\r\n                                                </Form.Group>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"mt-3\">\r\n                                            <button\r\n                                                className=\"btn  btn-primary btn-lg font-weight-medium auth-form-btn\"\r\n                                                type=\"submit\"\r\n                                            >\r\n                                                UPDATE\r\n                                            </button>\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div >\r\n                </Modal.Body >\r\n            </Modal >\r\n            <div className=\"page-header\">\r\n                <h3 className=\"page-title\">Powerone / Show Powerone </h3>\r\n                <nav aria-label=\"breadcrumb\">\r\n                    <ol className=\"breadcrumb\">\r\n                        <li className=\"breadcrumb-item\">\r\n                            <a href=\"!#\" onClick={(event) => event.preventDefault()}>\r\n                                {cookies?.user?.role} Dashboard\r\n                            </a>\r\n                        </li>\r\n                        <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n                            Show Powerone\r\n                        </li>\r\n                    </ol>\r\n                </nav>\r\n            </div>\r\n            <div className=\"col-lg-12 grid-margin stretch-card p0\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-6\">\r\n                            </div>\r\n\r\n                            <div className=\"col-md-6\">\r\n                                <div className=\"search-field d-none d-md-block\">\r\n                                    <form className=\"d-flex align-items-center h-100\" action=\"#\">\r\n                                        <div className=\"input-group\">\r\n                                            <div className=\"input-group-prepend outline-gray bg-transparent\">\r\n                                                <i className=\"input-group-text border-0 mdi mdi-magnify\"></i>\r\n                                            </div>\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                className=\"form-control outline-gray bg-transparent border-0\"\r\n                                                placeholder=\"Search Powerone\"\r\n                                                value={searchTerm}\r\n                                                onChange={(e) => {\r\n                                                    setSearchTerm(e?.target?.value);\r\n                                                    setItemOffset(0);\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </div>\r\n                        <h4 className=\"card-title\">Powerone list</h4>\r\n\r\n                        <div className=\"table-responsive\">\r\n                            <table className=\"table table-striped\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th> Name </th>\r\n                                        <th> Email </th>\r\n                                        <th> Mobile </th>\r\n                                        <th> Address</th>\r\n                                        <th> City </th>\r\n                                        <th> Edit </th>\r\n                                        <th> Delete </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {\r\n                                        isLoading ? <React.Fragment><Spinner /></React.Fragment>\r\n                                            :\r\n                                            itemlist?.map((item, index) => {\r\n                                                return (\r\n                                                    <tr key={index}>\r\n                                                        <td>{item?.name}</td>\r\n                                                        <td>{item?.email}</td>\r\n                                                        <td>{item?.mobile}</td>\r\n                                                        <td>{item?.address}</td>\r\n                                                        <td>{item?.city}</td>\r\n                                                        <td><i onClick={() => handleShow(item)} className=\"mdi mdi-lead-pencil\"></i></td>\r\n                                                        <td>\r\n                                                            <i\r\n                                                                onClick={() => deletePowerOne(item?.id)}\r\n                                                                className=\"mdi mdi-delete\"\r\n                                                            ></i>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                );\r\n                                            })}\r\n                                </tbody>\r\n                            </table>\r\n                            <ReactPaginate\r\n                                breakLabel=\"...\"\r\n                                nextLabel=\"next >\"\r\n                                className=\"client-list\"\r\n                                onPageChange={handlePageClick}\r\n                                pageRangeDisplayed={5}\r\n                                pageCount={pageCount}\r\n                                previousLabel=\"< previous\"\r\n                                renderOnZeroPageCount={null}\r\n                                forcePage={itemOffset}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div >\r\n    );\r\n};\r\n\r\nexport default PowerOneFetch;\r\n"],"sourceRoot":""}