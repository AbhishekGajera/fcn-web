{"version":3,"sources":["app/BranchComponents/CreateEmployee/index.js"],"names":["CreateEmployee","useCookies","cookies","useForm","mode","register","handleSubmit","formState","errors","strongRegexMo","isDirty","isValid","RegExp","strongRegex","onSubmit","data","CreateUser","result","console","info","toast","success","response","message","error","process","className","aria-label","href","onClick","event","preventDefault","user","role","aria-current","Group","Control","type","name","required","address","pattern","contactno","branch","email","dob","password","id","selected","bankAccNo","bankIfscCode"],"mappings":"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","file":"static/js/69.e0029311.chunk.js","sourcesContent":["import React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { Form } from \"react-bootstrap\";\nimport { useCookies } from \"react-cookie\";\nimport { toast } from \"react-toastify\";\nimport { CreateUser } from \"../../../utils/APIs\";\n\nconst CreateEmployee = () => {\n  const [cookies] = useCookies([\"user\"]);\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors, isDirty, isValid },\n  } = useForm({\n    mode: \"onChange\",\n  });\n  var strongRegexMo = new RegExp(\n    \"^\\\\s*(?:\\\\+?(\\\\d{1,3}))?[-. (]*(\\\\d{3})[-. )]*(\\\\d{3})[-. ]*(\\\\d{4})(?: *x(\\\\d+))?\\\\s*$\"\n  );\n  var strongRegex = new RegExp(\"^(?=.*[A-Za-z])(?=.*[0-9])(?=.{8,})\");\n\n  const onSubmit = async (data) => {\n      try {\n        const result = await CreateUser(data)\n        console.info(\"result \",result)\n        toast.success(\"user crated successfully\");\n      } catch (error) {\n          console.info(\"error \",error)\n        if (\n          error &&\n          error.response &&\n          error.response.data &&\n          error.response.data.message\n        ) {\n          toast.error(error.response.data.message);\n        } else {\n          toast.error(process.env.REACT_APP_ERROR_MESSAGE);\n        }\n      }\n  };\n\n  return (\n    <div>\n      <div className=\"page-header\">\n        <h3 className=\"page-title\">Clients / Create Employees </h3>\n        <nav aria-label=\"breadcrumb\">\n          <ol className=\"breadcrumb\">\n            <li className=\"breadcrumb-item\">\n              <a href=\"!#\" onClick={(event) => event.preventDefault()}>\n                {cookies?.user?.role} Dashboard\n              </a>\n            </li>\n            <li className=\"breadcrumb-item active\" aria-current=\"page\">\n              Create Employees\n            </li>\n          </ol>\n        </nav>\n      </div>\n      <div className=\"row auth\">\n        <div className=\"col-12 grid-margin\">\n          <div className=\"card\">\n            <div className=\"card-body\">\n              <form className=\"form-sample\" onSubmit={handleSubmit(onSubmit)}>\n                <p className=\"card-description\"> Personal info </p>\n                <div className=\"row\">\n                  <div className=\"col-md-12\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-2 col-form-label\">Name</label>\n                      <div className=\"col-sm-10\">\n                        <Form.Control\n                          type=\"text\"\n                          name=\"name\"\n                          {...register(\"name\", { required: true })}\n                        />\n                        {errors && errors.name && <p>name is required field</p>}\n                      </div>\n                    </Form.Group>\n                  </div>\n                </div>\n\n                <div className=\"row\">\n                  <div className=\"col-md-12\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-2 col-form-label\">\n                        Address{\" \"}\n                      </label>\n                      <div className=\"col-sm-10\">\n                        <Form.Control\n                          type=\"text\"\n                          name=\"address\"\n                          {...register(\"address\", { required: true })}\n                        />\n                        {errors && errors.address && (\n                          <p>address is required field</p>\n                        )}\n                      </div>\n                    </Form.Group>\n                  </div>\n                </div>\n\n                <div className=\"row\">\n                  <div className=\"col-md-6\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-3 col-form-label\">\n                        Contact No\n                      </label>\n                      <div className=\"col-sm-9\">\n                        <Form.Control\n                          type=\"text\"\n                          name=\"contactno\"\n                          {...register(\"contactno\", {\n                            required: true,\n                            pattern: strongRegexMo,\n                          })}\n                        />\n                        {errors &&\n                          errors.contactno &&\n                          errors.contactno.type === \"required\" && (\n                            <p>contact number is required field</p>\n                          )}\n                        {errors &&\n                          errors.contactno &&\n                          errors.contactno.type === \"pattern\" && (\n                            <p>invalid phone number please use valid formate</p>\n                          )}\n                      </div>\n                    </Form.Group>\n                  </div>\n                  <div className=\"col-md-6\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-3 col-form-label\">Branch</label>\n                      <div className=\"col-sm-9\">\n                        <Form.Control\n                          type=\"text\"\n                          name=\"branch\"\n                          {...register(\"branch\", { required: true })}\n                        />\n                        {errors && errors.branch && (\n                          <p>branch is required field</p>\n                        )}\n                      </div>\n                    </Form.Group>\n                  </div>\n                </div>\n                <div className=\"row\">\n                  <div className=\"col-md-6\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-3 col-form-label\">Email</label>\n                      <div className=\"col-sm-9\">\n                        <Form.Control\n                          type=\"text\"\n                          name=\"email\"\n                          {...register(\"email\", {\n                            required: true,\n                            pattern: /^\\S+@\\S+$/i,\n                          })}\n                        />\n                        {errors &&\n                          errors.email &&\n                          errors.email.type === \"required\" && (\n                            <p>email is required field</p>\n                          )}\n                        {errors &&\n                          errors.email &&\n                          errors.email.type === \"pattern\" && (\n                            <p>invalid email formate</p>\n                          )}\n                      </div>\n                    </Form.Group>\n                  </div>\n                  <div className=\"col-md-6\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-3 col-form-label\">DOB</label>\n                      <div className=\"col-sm-9\">\n                        <Form.Control\n                          type=\"date\"\n                          name=\"dob\"\n                          {...register(\"dob\", { required: true })}\n                        />\n                        {errors && errors.dob && <p>DOB is required field</p>}\n                      </div>\n                    </Form.Group>\n                  </div>\n                </div>\n                <div className=\"row\">\n                  <div className=\"col-md-6\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-3 col-form-label\">\n                        Password\n                      </label>\n                      <div className=\"col-sm-9\">\n                        <Form.Control\n                          type=\"text\"\n                          name=\"password\"\n                          {...register(\"password\", {\n                            required: true,\n                            pattern: strongRegex,\n                          })}\n                        />\n                        {errors &&\n                          errors.password &&\n                          errors.password.type === \"required\" && (\n                            <p>password is required field</p>\n                          )}\n                        {errors &&\n                          errors.password &&\n                          errors.password.type === \"pattern\" && (\n                            <p>\n                              password should have at least 8 characters , 1\n                              number and latter\n                            </p>\n                          )}\n                      </div>\n                    </Form.Group>\n                  </div>\n                  <div className=\"col-md-6\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-3 col-form-label\">Select Country</label>\n                      <div className=\"col-sm-9\">\n                        <select\n                          className=\"form-control form-control-lg\"\n                          id=\"exampleFormControlSelect2\"\n                          name=\"country\"\n                          {...register(\"country\", {\n                            required: true,\n                          })}\n                        >\n                          <option>Country</option>\n                          <option>United States of America</option>\n                          <option selected>India</option>\n                          <option>United Kingdom</option>\n                          <option>Germany</option>\n                          <option>Argentina</option>\n                        </select>\n                      </div>\n                    </Form.Group>\n                  </div>\n                </div>\n                <div className=\"row\">\n                  <div className=\"col-md-6\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-3 col-form-label\">\n                        Bank Account no\n                      </label>\n                      <div className=\"col-sm-9\">\n                        <Form.Control\n                          type=\"text\"\n                          name=\"bankAccNo\"\n                          {...register(\"bankAccNo\", { required: true })}\n                        />\n                        {errors && errors.bankAccNo && (\n                          <p>Bank Account number is required field</p>\n                        )}\n                      </div>\n                    </Form.Group>\n                  </div>\n                  <div className=\"col-md-6\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-3 col-form-label\">\n                        IFSC code\n                      </label>\n                      <div className=\"col-sm-9\">\n                        <Form.Control\n                          type=\"text\"\n                          name=\"bankIfscCode\"\n                          {...register(\"bankIfscCode\", { required: true })}\n                        />\n                        {errors && errors.bankIfscCode && (\n                          <p>Bank IFSC number is required field</p>\n                        )}\n                      </div>\n                    </Form.Group>\n                  </div>\n                </div>\n\n                <div className=\"mt-3\">\n                  <button\n                    className=\"btn  btn-primary btn-lg font-weight-medium auth-form-btn\"\n                    type=\"submit\"\n                  >\n                    SUBMIT\n                  </button>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CreateEmployee;\n"],"sourceRoot":""}