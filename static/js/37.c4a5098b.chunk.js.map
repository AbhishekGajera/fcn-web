{"version":3,"sources":["app/Admin-components/Employee-Management/Leave.js"],"names":["Leave","history","useHistory","useCookies","cookies","setCookie","useState","itemlist","setitemlist","employeeList","setemployeeList","pageCount","setPageCount","itemOffset","setItemOffset","itemsPerPage","React","show","setShow","valueToEdit","setvalueToEdit","useForm","mode","register","handleSubmit","reset","formState","errors","isDirty","isValid","modelMode","setmodelMode","onSubmit","data","date1","Date","date_from","date2","date_to","diffTime","Math","abs","diffDays","ceil","formData","JSON","stringify","leave_id","id","user","reason","leave_status","total_leave","toISOString","updateEmployeeLeave","toast","success","autoClose","response","message","error","process","handleClose","getData","approveEmployee","handleShow","value","useEffect","getEmployeeData","getAllEmployee","result","results","getEmployeeLeaves","totalPages","code","refreshToken","localStorage","getItem","path","userLogout","finally","push","onHide","backdrop","keyboard","Header","closeButton","Title","Body","className","Group","name","defaultValue","map","item","selected","Control","type","autoFocus","required","substring","disabled","aria-label","href","onClick","event","preventDefault","role","aria-current","toLocaleDateString","day","month","year","Swal","fire","title","text","icon","showCancelButton","cancelButtonColor","confirmButtonColor","confirmButtonText","cancelButtonText","then","deleteEmployeeLeave","dismiss","DismissReason","cancel","breakLabel","nextLabel","onPageChange","newOffset","forcePage","pageRangeDisplayed","previousLabel","renderOnZeroPageCount"],"mappings":"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","file":"static/js/37.c4a5098b.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useCookies } from \"react-cookie\";\nimport ReactPaginate from \"react-paginate\";\nimport { getEmployeeLeaves ,deleteEmployeeLeave,userLogout,getAllEmployee, updateEmployeeLeave,approveEmployee } from \"../../../utils/APIs\";\nimport { toast } from \"react-toastify\";\nimport { useHistory } from \"react-router-dom\";\nimport Swal from \"sweetalert2\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { useForm } from \"react-hook-form\";\nimport { Form } from 'react-bootstrap';\n\n\nconst Leave = () => {\n  const history = useHistory()\n  const [cookies,setCookie ] = useCookies([\"user\"]);\n  const [itemlist, setitemlist] = useState([]);\n  const [employeeList, setemployeeList] = useState([])\n  // We start with an empty list of items.\n  const [pageCount, setPageCount] = useState(0);\n  // Here we use item offsets; we could also use page offsets\n  // following the API or data you're working with.\n  const [itemOffset, setItemOffset] = useState(0);\n  const [itemsPerPage] = useState(10);\n  const [show, setShow] = React.useState(false);\n  const [valueToEdit, setvalueToEdit] = useState({});\n \n  const { register, handleSubmit,reset, formState: { errors , isDirty, isValid } } = useForm({\n    mode: \"onChange\"\n  });\n\n  const [modelMode, setmodelMode] = useState('create')\n\n  const onSubmit = async (data) => {\n    const date1 = new Date(data?.date_from);\n    const date2 = new Date(data?.date_to);\n    const diffTime = Math.abs(date2 - date1);\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)); \n    if(modelMode === 'edit'){\n    try {\n      const formData = JSON.stringify({\n        leave_id: valueToEdit?.id,\n        user: data.user,\n        reason: data?.reason,\n        leave_status: data?.leave_status,\n        total_leave : diffDays,\n        date_from : new Date(data?.date_from).toISOString(),\n        date_to : new Date(data?.date_to).toISOString(),\n      });\n      await updateEmployeeLeave(formData)\n      toast.success('Leave updated successfully',{\n        autoClose : true\n      })\n    } catch (error) {\n      if (\n        error &&\n        error.response &&\n        error.response.data &&\n        error.response.data.message\n      ) {\n        toast.error(error.response.data.message);\n      } else {\n        toast.error(process.env.REACT_APP_ERROR_MESSAGE);\n      }\n    }\n    finally {\n      handleClose()\n      getData()\n    }\n  }\n\n  if(modelMode === 'create'){\n    try {\n      const formData = JSON.stringify({\n        user: data.user,\n        reason: data?.reason,\n        leave_status: data?.leave_status,\n        total_leave : diffDays,\n        date_from : new Date(data?.date_from).toISOString(),\n        date_to : new Date(data?.date_to).toISOString(),\n      });\n      await approveEmployee(formData)\n      toast.success('Leave added successfully',{\n        autoClose : true\n      })\n    } catch (error) {\n      if (\n        error &&\n        error.response &&\n        error.response.data &&\n        error.response.data.message\n      ) {\n        toast.error(error.response.data.message);\n      } else {\n        toast.error(process.env.REACT_APP_ERROR_MESSAGE);\n      }\n    }\n    finally {\n      handleClose()\n      getData()\n    }\n  }\n  };\n\n  const handleClose = () => {\n    setShow(false)\n    setvalueToEdit({})\n    reset()\n  };\n\n\n  const handleShow = (value,mode) => { \n    reset()\n\n    if(mode === 'edit'){\n      setvalueToEdit(value)\n      setmodelMode('edit')\n    }\n\n    if(mode === 'create'){\n      setvalueToEdit(value)\n      setmodelMode('create')\n    }\n    setShow(true);\n  }\n\n  useEffect(() => {\n    getData()\n  }, [itemOffset, itemsPerPage]);\n\n  useEffect(() => {\n    getEmployeeData()\n  }, []);\n\n  const getEmployeeData = async () => {\n      try {\n        const result = await getAllEmployee()\n        setemployeeList(result.data.results)\n      } catch (error) {\n        getEmployeeData()\n      }\n  }\n\n  const getData = async () => {\n      try {\n        const result = await (await getEmployeeLeaves(itemsPerPage, itemOffset)).data;\n        setitemlist(result?.results);  \n        // Fetch items from another resources.\n        setPageCount(result?.totalPages);\n      } catch (error) {\n        if (\n          error?.response?.data?.message\n        ) {\n          toast.error(error.response.data.message);\n        } else {\n          toast.error(process.env.REACT_APP_ERROR_MESSAGE);\n        }\n\n        if(error?.response?.data?.code === 401){\n          const formData = JSON.stringify({\n            refreshToken: localStorage.getItem('refreshToken'),\n          });\n          setCookie('user', null , { path: '/' });\n          userLogout(formData).finally(() => {\n            history.push('/user-pages/login-1')\n          })\n        }\n      }\n\n  }\n\n  // Invoke when user click to request another page.\n  const handlePageClick = (event) => {\n    const newOffset = (event.selected + 1);\n    setItemOffset(newOffset);\n  };\n\n\n  const deleteData = (id) => {\n    Swal.fire({\n      title: \"Are you sure?\",\n      text: \"You will not be able to recover this imaginary file!\",\n      icon: \"warning\",\n      showCancelButton: true,\n      cancelButtonColor: \"#DD6B55\",\n      confirmButtonColor: \"#DD6B55\",\n      confirmButtonText: \"Yes, delete it!\",\n      cancelButtonText: \"No, keep it\",\n    }).then((result) => {\n      if (result.value) {\n        return (\n          deleteEmployeeLeave(id),\n          Swal.fire(\n            \"Deleted!\",\n            \"Your imaginary file has been deleted.\",\n            \"success\",\n          )\n        );\n      } else if (result.dismiss === Swal.DismissReason.cancel) {\n        Swal.fire(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\n      }\n    }).finally(() => {\n      getData()\n    })\n  }\n   \n  return (\n    <div>\n    <Modal\n      show={show}\n      onHide={handleClose}\n      backdrop=\"static\"\n      keyboard={false}\n    >\n      <Modal.Header closeButton>\n        <Modal.Title>{modelMode === 'edit' ? 'Update' : 'Create'} Leave</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n      <div className=\"row auth\">\n        <div className=\"col-12 grid-margin\">\n          <div className=\"card\">\n            <div className=\"card-body\">\n              <form className=\"form-sample\" onSubmit={handleSubmit(onSubmit)}>\n                <div className=\"row\">\n                  <div className=\"col-md-12\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-3 col-form-label\">User</label>\n                      <div className=\"col-sm-9\">\n                      <select\n                          name=\"user\"\n                          {...register(\"user\")}\n                          defaultValue={valueToEdit?.user?.id}\n                        >\n                            {employeeList?.map((item) => {\n                              return <>\n                                <option value={item?.id} selected={valueToEdit?.user?.id === item?.id}>{item?.name}</option>\n                              </>\n                            })}\n                        </select>\n                        {errors && errors.user && <p> select employee is required field</p>}\n                      </div>\n                    </Form.Group>\n                  </div>\n                </div>\n\n                <div className=\"row\">\n                  <div className=\"col-md-12\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-3 col-form-label\">\n                       Reason\n                      </label>\n                      <div className=\"col-sm-9\">\n                        <Form.Control\n                          type=\"text\"\n                          name=\"contactno\"\n                          defaultValue={valueToEdit?.reason}\n                          autoFocus\n                          {...register(\"reason\", {\n                            required: true,\n                          })}\n                        />\n                        {errors &&\n                          errors.reason &&\n                          errors.reason.type === \"required\" && (\n                            <p>reason is required field</p>\n                          )}\n                      </div>\n                    </Form.Group>\n                  </div>\n                  </div>\n                  <div className=\"row\">\n                  <div className=\"col-md-12\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-3 col-form-label\">Leave Status</label>\n                      <div className=\"col-sm-9\">\n                        <select\n                          name=\"leave_status\"\n                          {...register(\"leave_status\")}\n                        >\n                            <option value=\"pending\" selected={valueToEdit.leave_status === 'pending'} >pending</option>\n                            <option value=\"approved\" selected={valueToEdit.leave_status === 'approved'} >approved</option>\n                            <option value=\"rejected\" selected={valueToEdit.leave_status === 'rejected'} >rejected</option>\n                        </select>\n                        {errors && errors.leave_status && (\n                          <p>Leave status is required field</p>\n                        )}\n                      </div>\n                    </Form.Group>\n                  </div>\n                </div>\n                <div className=\"row\">\n                  <div className=\"col-md-12\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-3 col-form-label\">Date From</label>\n                      <div className=\"col-sm-9\">\n                        <Form.Control\n                          type=\"date\"\n                          defaultValue={(valueToEdit?.date_from)?.substring(0, 10)}\n                          name=\"date_from\"\n                          {...register(\"date_from\", { required: true })}\n                        />\n                        {errors && errors.date_from && (\n                          <p>date_from is required field</p>\n                        )}\n                      </div>\n                    </Form.Group>\n                  </div>\n                </div>\n                <div className=\"row\">\n                  <div className=\"col-md-12\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-3 col-form-label\">Date To</label>\n                      <div className=\"col-sm-9\">\n                        <Form.Control\n                          type=\"date\"\n                          defaultValue={(valueToEdit?.date_to)?.substring(0, 10)}\n                          name=\"date_to\"\n                          {...register(\"date_to\", { required: true })}\n                        />\n                        {errors && errors.date_to && (\n                          <p>date_to is required field</p>\n                        )}\n                      </div>\n                    </Form.Group>\n                  </div>\n                </div>\n                <div className=\"mt-3\">\n                  <button\n                    className=\"btn  btn-primary btn-lg font-weight-medium auth-form-btn\"\n                    type=\"submit\"\n                    disabled={!isDirty || !isValid}\n                  >\n                    {modelMode === 'edit' ? 'UPDATE' : 'CREATE'}\n                  </button>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n      </Modal.Body>\n     \n    \n    </Modal>\n      <div className=\"page-header\">\n        <h3 className=\"page-title\">Employee / Leave </h3>\n        <nav aria-label=\"breadcrumb\">\n          <ol className=\"breadcrumb\">\n            <li className=\"breadcrumb-item\">\n              <a href=\"!#\" onClick={(event) => event.preventDefault()}>\n                {cookies?.user?.role} Dashboard\n              </a>\n            </li>\n            <li className=\"breadcrumb-item active\" aria-current=\"page\">\n              Leave Management\n            </li>\n          </ol>\n        </nav>\n      </div>\n      <div className=\"col-lg-12 grid-margin stretch-card p0\">\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <h4 className=\"card-title\">Leave Management</h4>\n            <h4 className=\"card-title text-right\">\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-gradient-primary btn-fw\"\n                    onClick={() => handleShow({},'create')}\n                  >\n                    Add New\n                  </button>\n                </h4>\n                            {/* <button>hii</button> */}\n            <div className=\"table-responsive\">\n              <table className=\"table table-striped\">\n                <thead>\n                  <tr>\n                    <th> User </th>\n                    <th> Reason </th>\n                    <th> Leave Status </th>\n                    <th> Total Leave </th>\n                    <th> Date From </th>\n                    <th> Date To </th>\n                    <th> Edit </th>\n                    <th> Delete </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {itemlist?.map((item) => {\n                    return (\n                      <tr>\n                        <td>{item?.user.name}</td>\n                        <td>{item?.reason}</td>\n                        <td>{item?.leave_status}</td>\n                        <td>{item?.total_leave}</td>\n\n                        <td>{new Date(item?.date_from)?.toLocaleDateString('en-GB', { day: 'numeric', month: 'short', year: 'numeric' })}</td>\n                        <td>{new Date(item?.date_to)?.toLocaleDateString('en-GB', { day: 'numeric', month: 'short', year: 'numeric' })}</td>\n                        <td>\n                          <i onClick={()=> handleShow(item,'edit')} className=\"mdi mdi-lead-pencil\"></i>\n                        </td>\n                        <td>\n                         <i onClick={()=> deleteData(item?.id)} className=\"mdi mdi-delete\"> </i>\n                        </td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n              <ReactPaginate\n                breakLabel=\"...\"\n                nextLabel=\"next >\"\n                className=\"client-list\"\n                onPageChange={handlePageClick}\n                forcePage={0}\n                pageRangeDisplayed={5}\n                pageCount={pageCount}\n                previousLabel=\"< previous\"\n                renderOnZeroPageCount={null}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Leave;\n"],"sourceRoot":""}