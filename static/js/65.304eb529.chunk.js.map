{"version":3,"sources":["utils/Functions/useUrl.js","app/client-component/travel/QueryList.js"],"names":["useUrl","param","history","useHistory","useLocation","search","pathname","url","URLSearchParams","urlParam","get","useState","value","setValue","val","set","replace","toString","QueryList","pageCount","setPageCount","itemOffset","setItemOffset","itemsPerPage","useCookies","cookies","setCookie","itemlist","setitemlist","isLoading","setIsLoading","useEffect","list","deleteProduct","uid","Swal","fire","title","text","icon","showCancelButton","cancelButtonColor","confirmButtonColor","confirmButtonText","cancelButtonText","then","result","deleteTravelQuery","dismiss","DismissReason","cancel","getTravelQuery","data","items","results","totalPages","response","message","toast","error","process","code","formData","JSON","stringify","refreshToken","localStorage","getItem","path","userLogout","finally","push","className","aria-label","href","onClick","event","preventDefault","user","role","aria-current","Fragment","map","item","index","key","source","destination","start_date","end_date","name","id","onChange","e","formdata","travel_id","status","target","updateTravelQuery","success","autoClose","statusChanged","selected","breakLabel","nextLabel","onPageChange","pageRangeDisplayed","previousLabel","renderOnZeroPageCount","forcePage"],"mappings":"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","file":"static/js/65.304eb529.chunk.js","sourcesContent":["import { useState } from 'react'\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\n\r\nexport const useUrl = (param) => {\r\n\r\n    const history = useHistory()\r\n    const { search, pathname } = useLocation()\r\n    const url = new URLSearchParams(search)\r\n\r\n    const urlParam = url.get(param)\r\n    const [value, setValue] = useState(urlParam !== null ? urlParam : '')\r\n\r\n    function _setValue(val){\r\n        url.set(param, val)\r\n        history.replace({ pathname, search: url.toString() }); \r\n        setValue(val)\r\n    }\r\n\r\n    return [value, _setValue]\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { useCookies } from \"react-cookie\";\r\nimport ReactPaginate from \"react-paginate\";\r\nimport { deleteTravelQuery, getTravelQuery, userLogout, updateTravelQuery } from \"../../../utils/APIs\";\r\nimport Swal from \"sweetalert2\";\r\nimport Spinner from \"../../shared/Spinner\";\r\nimport { useUrl } from \"../../../utils/Functions/useUrl\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\nconst QueryList = () => {\r\n  // We start with an empty list of items.\r\n  const [pageCount, setPageCount] = useState(0);\r\n  // Here we use item offsets; we could also use page offsets\r\n  // following the API or data you're working with.\r\n  const [itemOffset, setItemOffset] = useUrl(\"page\");\r\n  const [itemsPerPage] = useState(20);\r\n  const [cookies, setCookie] = useCookies([\"user\"]);\r\n  const [itemlist, setitemlist] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  const history = useHistory()\r\n\r\n  useEffect(() => {\r\n    list();\r\n  }, [itemOffset, itemsPerPage]);\r\n\r\n  // Invoke when user click to request another page. \r\n  const handlePageClick = (event) => {\r\n    setItemOffset(event.selected);\r\n  };\r\n\r\n  const deleteProduct = async (uid) => {\r\n    Swal.fire({\r\n      title: \"Are you sure?\",\r\n      text: \"You will not be able to recover this imaginary file!\",\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      cancelButtonColor: \"#DD6B55\",\r\n      confirmButtonColor: \"#DD6B55\",\r\n      confirmButtonText: \"Yes, delete it!\",\r\n      cancelButtonText: \"No, keep it\",\r\n    }).then( async (result) => {\r\n      if (result.value) {\r\n            await  deleteTravelQuery(uid)\r\n              Swal.fire(\r\n                \"Deleted!\",\r\n                \"Your imaginary file has been deleted.\",\r\n                \"success\"\r\n                )\r\n                list()\r\n      } else if (result.dismiss === Swal.DismissReason.cancel) {\r\n        Swal.fire(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\r\n      }\r\n    });\r\n  };\r\n\r\n  const list = async () => {\r\n    setIsLoading(true)\r\n    try {\r\n      const items = await (\r\n        await getTravelQuery(\r\n          itemsPerPage,\r\n          +itemOffset + 1,\r\n        )\r\n      ).data;\r\n      setitemlist(items?.results);\r\n      setPageCount(items?.totalPages);\r\n      setIsLoading(false)\r\n    } catch (error) {\r\n      if (error?.response?.data?.message) {\r\n        toast.error(error.response.data.message);\r\n      } else {\r\n        toast.error(process.env.REACT_APP_ERROR_MESSAGE);\r\n      }\r\n\r\n      if (error?.response?.data?.code === 401) {\r\n        const formData = JSON.stringify({\r\n          refreshToken: localStorage.getItem(\"refreshToken\"),\r\n        });\r\n        setCookie(\"user\", null, { path: \"/\" });\r\n        userLogout(formData).finally(() => {\r\n          history.push(\"/user-pages/login-1\");\r\n        });\r\n      }\r\n    }\r\n  }\r\n  const statusChanged = (id, e) => {\r\n\r\n    const formdata = JSON.stringify({\r\n      travel_id : id,\r\n      status : e.target.value\r\n    })\r\n\r\n    updateTravelQuery(formdata)\r\n    toast.success('Status updated successfully', {\r\n      autoClose: true\r\n    })\r\n  }\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"page-header\">\r\n        <h3 className=\"page-title\">Travel / Show Queries </h3>\r\n        <nav aria-label=\"breadcrumb\">\r\n          <ol className=\"breadcrumb\">\r\n            <li className=\"breadcrumb-item\">\r\n              <a href=\"!#\" onClick={(event) => event.preventDefault()}>\r\n                {cookies?.user?.role} Dashboard\r\n              </a>\r\n            </li>\r\n            <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n              Show Products\r\n            </li>\r\n          </ol>\r\n        </nav>\r\n      </div>\r\n      <div className=\"col-lg-12 grid-margin stretch-card p0\">\r\n        <div className=\"card\">\r\n          <div className=\"card-body\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-6\">\r\n              </div>\r\n\r\n            </div>\r\n            <h4 className=\"card-title\">Query's list</h4>\r\n\r\n            <div className=\"table-responsive\">\r\n              <table className=\"table table-striped\">\r\n                <thead>\r\n                  <tr>\r\n                    <th> Source </th>\r\n                    <th> Destination </th>\r\n                    <th> Start Date </th>\r\n                    <th> End Date</th>\r\n                    <th> User </th>\r\n                    <th> Status </th>\r\n                    <th> Delete </th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {\r\n                    isLoading ? <React.Fragment><Spinner /></React.Fragment>\r\n                      :\r\n                      itemlist?.map((item, index) => {\r\n                        return (\r\n                          <tr key={index}>\r\n                            <td>{item?.source}</td>\r\n                            <td>{item?.destination}</td>\r\n                            <td>{item?.start_date}</td>\r\n                            <td>{item?.end_date}</td>\r\n                            <td>{item?.user?.name}</td>\r\n                            <td>\r\n                              <select\r\n                                id={item.id}\r\n                                onChange={(e) => statusChanged(item.id, e)}\r\n                              >\r\n                                <option\r\n                                  value=\"0\"\r\n                                  selected={item.status == 0 ? \"selected\" : false}\r\n                                >\r\n                                  pending\r\n                                </option>\r\n                                <option\r\n                                  value=\"1\"\r\n                                  selected={item.status == 1 ? \"selected\" : false}\r\n                                >\r\n                                  approved\r\n                                </option>\r\n                                <option\r\n                                  value=\"1\"\r\n                                  selected={item.status == 2 ? \"selected\" : false}\r\n                                >\r\n                                  declined\r\n                                </option>\r\n                              </select>\r\n                            </td>\r\n                            <td>\r\n                              <i\r\n                                onClick={() => deleteProduct(item?.id)}\r\n                                className=\"mdi mdi-delete\"\r\n                              ></i>\r\n                            </td>\r\n                          </tr>\r\n                        );\r\n                      })}\r\n                </tbody>\r\n              </table>\r\n              <ReactPaginate\r\n                breakLabel=\"...\"\r\n                nextLabel=\"next >\"\r\n                className=\"client-list\"\r\n                onPageChange={handlePageClick}\r\n                pageRangeDisplayed={5}\r\n                pageCount={pageCount}\r\n                previousLabel=\"< previous\"\r\n                renderOnZeroPageCount={null}\r\n                forcePage={itemOffset}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div >\r\n  );\r\n};\r\n\r\nexport default QueryList;\r\n"],"sourceRoot":""}