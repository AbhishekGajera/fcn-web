{"version":3,"sources":["app/Admin-components/BranchesCreate/index.js"],"names":["CreateBranches","useCookies","cookies","setCookie","useState","productList","setproductList","isShow","setIsShow","branchlist","setBranchlist","history","useHistory","phone","setPhone","useForm","mode","register","handleSubmit","formState","errors","getValues","isDirty","isValid","strongRegex","RegExp","strongaadharcode","values","onSubmit","data","Data","FormData","append","image","ImageUpload","fileResult","error","toast","message","IBO","secure_url","role","contactno","CreateUser","success","push","console","info","response","process","toInputUppercase","e","target","value","toUpperCase","branchList","getIBOsClient","items","results","code","formData","JSON","stringify","refreshToken","localStorage","getItem","path","userLogout","finally","getAllProducts","getProductsList","allProducts","useEffect","className","aria-label","href","onClick","event","preventDefault","user","aria-current","Group","Control","type","name","required","address","inputExtraProps","autoFocus","country","onChange","pattern","email","max","moment","format","dob","style","float","marginTop","marginRight","password","id","map","item","index","key","label","bankAccNo","onInput","bankIfscCode","b_head_name","b_head_contact_no","b_pan_card_no","b_aadhar_card_no","multiple","element","document","getElementById","click","placeholder","maxamount","selectProduct","minamount"],"mappings":"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","file":"static/js/71.f66dacda.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { Form } from \"react-bootstrap\";\nimport { useCookies } from \"react-cookie\";\nimport { toast } from \"react-toastify\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { CreateUser, ImageUpload, getProductsList, getIBOsClient, userLogout } from \"../../../utils/APIs\";\nimport moment from 'moment';\nimport PhoneInput from \"react-phone-input-2\";\nimport 'react-phone-input-2/lib/style.css'\n\n\nconst CreateBranches = () => {\n  const [cookies, setCookie] = useCookies([\"user\"]);\n  const [productList, setproductList] = useState([]);\n  const [isShow, setIsShow] = useState(false);\n  const [branchlist, setBranchlist] = useState([]);\n  const history = useHistory();\n  const [phone, setPhone] = useState('+91');\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors, isDirty, isValid },\n    getValues,\n  } = useForm({\n    mode: \"onChange\",\n  });\n  var strongRegexMo = new RegExp(\n    \"^\\\\s*(?:\\\\+?(\\\\d{1,3}))?[-. (]*(\\\\d{3})[-. )]*(\\\\d{3})[-. ]*(\\\\d{4})(?: *x(\\\\d+))?\\\\s*$\"\n  );\n  var strongRegex = new RegExp(\"^(?=.*[A-Za-z])(?=.*[0-9])(?=.{8,})\");\n\n  var strongRegexcode = new RegExp(\"^[A-Z]{4}0[A-Z0-9]{6}$\");\n\n  var strongaadharcode = new RegExp(\"^([0-9]){12}$\");\n\n  const values = getValues();\n\n  const handleOnChange = value => {\n    setPhone(value);\n  }\n\n  const onSubmit = async (data) => {\n\n    const Data = new FormData();\n    Data.append('file', data.image[0]);\n    const fileResult = await ImageUpload(Data)\n    if (fileResult.error) {\n      toast.error(fileResult.error.message);\n    } else {\n      try {\n        if(data.IBO  === ''){\n          delete data.IBO;\n        }\n        data.image = fileResult.secure_url;\n        data.role = 'branch'\n        data.contactno = phone;\n        const result = await CreateUser(data)\n        toast.success(\"user created successfully\");\n        history.push('/branches/brancheslist')\n      } catch (error) {\n        console.info(\"error \", error)\n        if (\n          error &&\n          error.response &&\n          error.response.data &&\n          error.response.data.message\n        ) {\n          toast.error(error.response.data.message);\n        } else {\n          toast.error(process.env.REACT_APP_ERROR_MESSAGE);\n        }\n      }\n    }\n  };\n  const toInputUppercase = e => {\n    e.target.value = (\"\" + e.target.value).toUpperCase();\n  };\n  const branchList = async () => {\n    try {\n      const items = await (await getIBOsClient()).data;\n      // console.log(\"itm\",items)\n      setBranchlist(items?.results);\n      // setPageCount(items?.totalPages);\n    } catch (error) {\n      if (error?.response?.data?.message) {\n        toast.error(error.response.data.message);\n      } else {\n        toast.error(process.env.REACT_APP_ERROR_MESSAGE);\n      }\n\n      if (error?.response?.data?.code === 401) {\n        const formData = JSON.stringify({\n          refreshToken: localStorage.getItem(\"refreshToken\"),\n        });\n        setCookie(\"user\", null, { path: \"/\" });\n        userLogout(formData).finally(() => {\n          history.push(\"/user-pages/login-1\");\n        });\n      }\n    }\n  };\n\n  const getAllProducts = async () => {\n    const allProducts = await getProductsList(3000);\n    setproductList(allProducts?.data?.results);\n  };\n\n  useEffect(() => {\n    branchList();\n    getAllProducts();\n  }, []);\n\n  const handleUpload = (e) => {\n    e.preventDefault()\n    const element = document.getElementById('input-id');\n    if (element) {\n      element.click()\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"page-header\">\n        <h3 className=\"page-title\">Clients / Create Branches </h3>\n        <nav aria-label=\"breadcrumb\">\n          <ol className=\"breadcrumb\">\n            <li className=\"breadcrumb-item\">\n              <a href=\"!#\" onClick={(event) => event.preventDefault()}>\n                {cookies?.user?.role} Dashboard\n              </a>\n            </li>\n            <li className=\"breadcrumb-item active\" aria-current=\"page\">\n              Create Branches\n            </li>\n          </ol>\n        </nav>\n      </div>\n      <div className=\"row auth\">\n        <div className=\"col-12 grid-margin\">\n          <div className=\"card\">\n            <div className=\"card-body\">\n              <form className=\"form-sample\" onSubmit={handleSubmit(onSubmit)}>\n                <p className=\"card-description\"> Personal info </p>\n                <div className=\"row\">\n                  <div className=\"col-md-12\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-2 col-form-label\">Name</label>\n                      <div className=\"col-sm-10\">\n                        <Form.Control\n                          type=\"text\"\n                          name=\"name\"\n                          {...register(\"name\", { required: true })}\n                        />\n                        {errors && errors.name && <p>name is required field</p>}\n                      </div>\n                    </Form.Group>\n                  </div>\n                </div>\n\n                <div className=\"row\">\n                  <div className=\"col-md-6\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-3 col-form-label\">\n                        Address{\" \"}\n                      </label>\n                      <div className=\"col-sm-9\">\n                        <Form.Control\n                          type=\"text\"\n                          name=\"address\"\n                          {...register(\"address\", { required: true })}\n                        />\n                        {errors && errors.address && (\n                          <p>address is required field</p>\n                        )}\n                      </div>\n                    </Form.Group>\n                  </div>\n                  <div className=\"col-md-6\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-3 col-form-label\">\n                        Contact No\n                      </label>\n                      <div className=\"col-sm-9 contact_no\">\n                        <PhoneInput\n                          inputExtraProps={{\n                            name: \"contactno\",\n                            required: true,\n                            autoFocus: true\n                          }}\n                          country={\"US\"}\n                          value={phone}\n                          onChange={handleOnChange}\n                        />\n                      </div>\n                    </Form.Group>\n                  </div>\n                </div>\n\n                <div className=\"row\">\n                  <div className=\"col-md-6\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-3 col-form-label\">Email</label>\n                      <div className=\"col-sm-9\">\n                        <Form.Control\n                          type=\"text\"\n                          name=\"email\"\n                          {...register(\"email\", {\n                            required: true,\n                            pattern: /^\\S+@\\S+$/i,\n                          })}\n                        />\n                        {errors &&\n                          errors.email &&\n                          errors.email.type === \"required\" && (\n                            <p>email is required field</p>\n                          )}\n                        {errors &&\n                          errors.email &&\n                          errors.email.type === \"pattern\" && (\n                            <p>invalid email formate</p>\n                          )}\n                      </div>\n                    </Form.Group>\n                  </div>\n                  <div className=\"col-md-6\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-3 col-form-label\">DOB</label>\n                      <div className=\"col-sm-9\">\n                        <Form.Control\n                          type=\"date\"\n                          name=\"dob\"\n                          max={moment().format(\"YYYY-MM-DD\")}\n                          {...register(\"dob\", { required: true })}\n                        />\n                        {errors && errors.dob && <p>DOB is required field</p>}\n                      </div>\n                    </Form.Group>\n                  </div>\n                </div>\n                <div className=\"row\">\n                  <div className=\"col-md-6\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-3 col-form-label\">\n                        Password\n                      </label>\n                      <div className=\"col-sm-9\">\n                        <Form.Control\n                          type={isShow ? \"text\" : \"password\"}\n                          name=\"password\"\n                          {...register(\"password\", {\n                            required: true,\n                            pattern: strongRegex,\n                          })}\n                        />\n\n                        <span className=\"d-flex\" style={{ float: 'right', marginTop: \"10px\" }} >\n                          <input style={{ marginRight: \"10px\" }} type=\"checkbox\" value={isShow} onChange={() => {\n                            if (isShow) {\n                              setIsShow(false)\n                            } else {\n                              setIsShow(true)\n                            }\n                          }} />\n                          show password\n                        </span>\n                        {errors &&\n                          errors.password &&\n                          errors.password.type === \"required\" && (\n                            <p>password is required field</p>\n                          )}\n                        {errors &&\n                          errors.password &&\n                          errors.password.type === \"pattern\" && (\n                            <p>\n                              password should have at least 8 characters , 1\n                              number and latter\n                            </p>\n                          )}\n                      </div>\n                    </Form.Group>\n                  </div>\n                  <div className=\"col-md-6\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-3 col-form-label\">Ibo</label>\n                      <div className=\"col-sm-9\">\n\n                        <select\n                          className=\"form-control form-control-lg\"\n                          id=\"exampleFormControlSelect2\"\n                          name=\"IBO\"\n                          {...register(\"IBO\", {\n                            required: false,\n                          })}\n                        >\n                          <option value=''>--Select ibo--</option>\n                          {branchlist.map((item, index) => (\n                            <option key={index} value={item?.id} label={item?.name}></option>\n                          ))}\n                        </select>\n                      </div>\n                      {/* <div className=\"col-sm-9\">\n                        <Form.Control\n                          type=\"text\"\n                          name=\"branch\"\n                          {...register(\"branch\", { required: true })}\n                        />\n                        {errors && errors.branch && (\n                          <p>branch is required field</p>\n                        )}\n                      </div> */}\n                    </Form.Group>\n                  </div>\n                  {/* <div className=\"col-md-6\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-3 col-form-label\">Select Country</label>\n                      <div className=\"col-sm-9\">\n                        <select\n                          className=\"form-control form-control-lg\"\n                          id=\"exampleFormControlSelect2\"\n                          name=\"country\"\n                          {...register(\"country\", {\n                            required: true,\n                          })}\n                        >\n                          <option>Country</option>\n                          <option>United States of America</option>\n                          <option selected>India</option>\n                          <option>United Kingdom</option>\n                          <option>Germany</option>\n                          <option>Argentina</option>\n                        </select>\n                      </div>\n                    </Form.Group>\n                  </div> */}\n                </div>\n                <div className=\"row\">\n                  <div className=\"col-md-6\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-4 col-form-label\">\n                        Bank Account no\n                      </label>\n                      <div className=\"col-sm-8\">\n                        <Form.Control\n                          type=\"text\"\n                          name=\"bankAccNo\"\n                          {...register(\"bankAccNo\", { required: true })}\n                        />\n                        {errors && errors.bankAccNo && (\n                          <p>Bank Account number is required field</p>\n                        )}\n                      </div>\n                    </Form.Group>\n                  </div>\n                  <div className=\"col-md-6\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-4 col-form-label\">\n                        IFSC code\n                      </label>\n                      <div className=\"col-sm-8\">\n                        <Form.Control\n                          type=\"text\"\n                          name=\"bankIfscCode\"\n                          onInput={toInputUppercase}\n                          {...register(\"bankIfscCode\", { required: true})}\n                        />\n                        {errors && errors.bankIfscCode &&\n                          errors.bankIfscCode.type === \"required\" && (\n                            <p>Bank IFSC number is required field</p>\n                          )}\n                        {errors &&\n                          errors.bankIfscCode &&\n                          errors.bankIfscCode.type === \"pattern\" && (\n                            <p>\n                              IFSC code should have Capital latter and Number\n                            </p>\n                          )}\n                      </div>\n                    </Form.Group>\n                  </div>\n                </div>\n                <div className=\"row\">\n                  <div className=\"col-md-6\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-5 col-form-label\">Branch Head Name</label>\n                      <div className=\"col-sm-7\">\n                        <Form.Control\n                          type=\"text\"\n                          name=\"b_head_name\"\n                          {...register(\"b_head_name\", { required: true })}\n                        />\n                        {errors && errors.b_head_name && <p>branch head name is required field</p>}\n                      </div>\n                    </Form.Group>\n                  </div>\n                  <div className=\"col-md-6\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-5 col-form-label\">\n                        Branch Head Contact\n                      </label>\n                      <div className=\"col-sm-7\">\n                        <Form.Control\n                          type=\"text\"\n                          name=\"b_head_contact_no\"\n                          {...register(\"b_head_contact_no\", { required: true })}\n                        />\n                        {errors && errors.b_head_contact_no && (\n                          <p>branch head number is required field</p>\n                        )}\n                      </div>\n                    </Form.Group>\n                  </div>\n                </div>\n                <div className=\"row\">\n                  <div className=\"col-md-6\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-4 col-form-label\">\n                        PanCard Number\n                      </label>\n                      <div className=\"col-sm-8\">\n                        <Form.Control\n                          type=\"text\"\n                          name=\"b_pan_card_no\"\n                          onInput={toInputUppercase}\n\n                          {...register(\"b_pan_card_no\", { required: true })}\n                        />\n                        {errors && errors.b_pan_card_no && (\n                          <p>PanCard number is required field</p>\n                        )}\n                      </div>\n                    </Form.Group>\n                  </div>\n                  <div className=\"col-md-6\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-5 col-form-label\">\n                        AadharCard Number\n                      </label>\n                      <div className=\"col-sm-7\">\n                        <Form.Control\n                          type=\"text\"\n                          name=\"b_aadhar_card_no\"\n                          {...register(\"b_aadhar_card_no\", { required: true, pattern: strongaadharcode })}\n                        />\n                        {errors && errors.b_aadhar_card_no &&\n                          errors.b_aadhar_card_no.type === \"required\" && (\n                            <p>Aadharcard number is required field</p>\n                          )}\n                        {errors &&\n                          errors.b_aadhar_card_no &&\n                          errors.b_aadhar_card_no.type === \"pattern\" && (\n                            <p>\n                              Aadharcard should have number\n                            </p>\n                          )}\n                      </div>\n                    </Form.Group>\n                  </div>\n                </div>\n                <div className=\"row\">\n                  <div className=\"col-md-6\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-6 col-form-label\">\n                        Upload Cancel cheque copy{\" \"}</label>\n\n                      <div className=\"col-sm-6\">\n                        <Form.Control\n                          id=\"input-id\"\n                          className=\"d-none\"\n                          type=\"file\"\n                          name=\"image\"\n                          multiple={false}\n                          {...register(\"image\", { required: true })}\n                        />\n\n                        <button\n                          onClick={handleUpload}\n                          className={`btn btn-outline-${values?.image?.[0]?.name ? \" btn-primary\" : \" btn-primary\"\n                            }`}\n                        >\n                          {values?.image?.[0]?.name ? values?.image?.[0]?.name : \"Upload Image\"}\n                        </button>\n                        {errors && errors.image && (\n                          <p>Upload image is required field</p>\n                        )}\n                      </div>\n                    </Form.Group>\n                  </div>\n                  <div className=\"col-md-6\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-3 col-form-label\">\n                        Max Amount{\" \"}</label>\n\n                      <div className=\"col-sm-9\">\n                        <Form.Control\n                          id=\"maxamount\"\n                          className=\"form-control\"\n                          type=\"number\"\n                          name=\"maxAmount\"\n                          placeholder=\"maxamount\"\n                          {...register(\"maxAmount\", { required: true })}\n                        />\n                        {errors && errors.maxamount && (\n                          <p>Product maxamount is required field</p>\n                        )}\n                      </div>\n                    </Form.Group>\n                  </div>\n                </div>\n                {/* <div className=\"row\">\n                  <div className=\"col-md-6\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-3 col-form-label\">\n                        Head Office Number\n                      </label>\n                      <div className=\"col-sm-9\">\n                        <Form.Control\n                          type=\"text\"\n                          name=\"headofficeNo\"\n                          {...register(\"headofficeNo\", { required: true })}\n                        />\n                        {errors && errors.headofficeNo && (\n                          <p> Head Office Number number is required field</p>\n                        )}\n                      </div>\n                    </Form.Group>\n                  </div>\n                </div> */}\n                <div className=\"row\">\n                  <div className=\"col-md-6\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-4 col-form-label\">\n                        Select Product\n                      </label>\n                      <div className=\"col-sm-8\">\n                        <select\n                          className=\"form-control form-control-lg\"\n                          id=\"exampleFormControlSelect2\"\n                          name=\"selectProduct\"\n                          {...register(\"selectProduct\", {\n                            required: true,\n                          })}\n                        >\n                          <option value=''>--Select Product--</option>\n                          {productList?.map((item, index) => (\n                            <option\n                              key={index}\n                              value={item?.id}\n                              label={item?.name}\n                            ></option>\n                          ))}\n                        </select>\n                        {errors && errors.selectProduct && (\n                          <p>Selecting a product is required field</p>\n                        )}\n                      </div>\n                    </Form.Group>\n                  </div>\n                  <div className=\"col-md-6\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-3 col-form-label\">\n                        Min Amount{\" \"}</label>\n\n                      <div className=\"col-sm-9\">\n                        <Form.Control\n                          id=\"minamount\"\n                          className=\"form-control\"\n                          type=\"number\"\n                          name=\"minAmount\"\n                          placeholder=\"minAmount\"\n                          {...register(\"minAmount\", { required: true })}\n                        />\n                        {errors && errors.minamount && (\n                          <p>Product minamount is required field</p>\n                        )}\n                      </div>\n                    </Form.Group>\n                  </div>\n                </div>\n                <div className=\"mt-3\">\n                  <button\n                    className=\"btn  btn-primary btn-lg font-weight-medium auth-form-btn\"\n                    type=\"submit\"\n                  >\n                    SUBMIT\n                  </button>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CreateBranches;\n"],"sourceRoot":""}