{"version":3,"sources":["utils/Functions/useDebounce.js","utils/Functions/useUrl.js","app/Admin-components/Appointment/FetchAppoinments.js"],"names":["useDebounce","value","delay","useState","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","useUrl","param","history","useHistory","useLocation","search","pathname","url","URLSearchParams","urlParam","get","setValue","val","set","replace","toString","FetchAppoinments","searchTerm","setSearchTerm","debouncedSearchTerm","pageCount","setPageCount","itemOffset","setItemOffset","itemsPerPage","useCookies","cookies","setCookie","itemlist","setitemlist","isLoading","setIsLoading","list","user","role","getAppoinmentsList","data","items","getAppoinmentsListByUser","id","results","totalPages","response","message","toast","error","process","code","formData","JSON","stringify","refreshToken","localStorage","getItem","path","userLogout","finally","push","className","aria-label","href","onClick","event","preventDefault","aria-current","action","type","placeholder","onChange","e","target","Fragment","map","item","index","key","fromDate","toDate","Description","name","uid","Swal","fire","title","text","icon","showCancelButton","cancelButtonColor","confirmButtonColor","confirmButtonText","cancelButtonText","then","result","deleteAppoinmentById","dismiss","DismissReason","cancel","breakLabel","nextLabel","onPageChange","selected","pageRangeDisplayed","previousLabel","renderOnZeroPageCount","forcePage"],"mappings":"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","file":"static/js/21.70484c54.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\n\n// Hook\nexport const useDebounce = (value, delay) => {\n    // State and setters for debounced value\n    const [debouncedValue, setDebouncedValue] = useState(value);\n    useEffect(\n      () => {\n        // Update debounced value after delay\n        const handler = setTimeout(() => {\n          setDebouncedValue(value);\n        }, delay);\n        // Cancel the timeout if value changes (also on delay change or unmount)\n        // This is how we prevent debounced value from updating if value is changed ...\n        // .. within the delay period. Timeout gets cleared and restarted.\n        return () => {\n          clearTimeout(handler);\n        };\n      },\n      [value, delay] // Only re-call effect if value or delay changes\n    );\n    return debouncedValue;\n  }","import { useState } from 'react'\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nexport const useUrl = (param) => {\n\n    const history = useHistory()\n    const { search, pathname } = useLocation()\n    const url = new URLSearchParams(search)\n\n    const urlParam = url.get(param)\n    const [value, setValue] = useState(urlParam !== null ? urlParam : '')\n\n    function _setValue(val){\n        url.set(param, val)\n        history.replace({ pathname, search: url.toString() }); \n        setValue(val)\n    }\n\n    return [value, _setValue]\n}","import React, { useEffect, useState } from \"react\";\nimport { useCookies } from \"react-cookie\";\nimport ReactPaginate from \"react-paginate\";\nimport { deleteAppoinmentById, getAppoinmentsListByUser,getAppoinmentsList ,userLogout } from \"../../../utils/APIs\";\nimport Swal from \"sweetalert2\";\nimport { useDebounce } from \"../../../utils/Functions/useDebounce\";\nimport Spinner from \"../../shared/Spinner\";\nimport { useUrl } from \"../../../utils/Functions/useUrl\";\nimport { toast } from \"react-toastify\";\nimport { useHistory } from \"react-router-dom\";\n\n\nconst FetchAppoinments = () => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const debouncedSearchTerm = useDebounce(searchTerm, 500);\n\n  // We start with an empty list of items.\n  const [pageCount, setPageCount] = useState(0);\n  // Here we use item offsets; we could also use page offsets\n  // following the API or data you're working with.\n  const [itemOffset, setItemOffset] = useUrl(\"page\");\n  const [itemsPerPage] = useState(10);\n  const [cookies,setCookie] = useCookies([\"user\"]);\n  const [itemlist, setitemlist] = useState([]);\n  const [isLoading, setIsLoading] = useState(true)\n  const history = useHistory()\n  \n  useEffect(() => {\n    list();\n  }, [itemOffset, itemsPerPage, debouncedSearchTerm]);\n\n  // Invoke when user click to request another page. \n  const handlePageClick = (event) => {\n    setItemOffset(event.selected);\n  };\n\n  const deleteAppoinment = (uid) => {\n    Swal.fire({\n      title: \"Are you sure?\",\n      text: \"You will not be able to recover this imaginary file!\",\n      icon: \"warning\",\n      showCancelButton: true,\n      cancelButtonColor: \"#DD6B55\",\n      confirmButtonColor: \"#DD6B55\",\n      confirmButtonText: \"Yes, delete it!\",\n      cancelButtonText: \"No, keep it\",\n    }).then((result) => {\n      if (result.value) {\n        return (\n          deleteAppoinmentById(uid).finally(() => list()),\n          Swal.fire(\n            \"Deleted!\",\n            \"Your imaginary file has been deleted.\",\n            \"success\"\n          )\n        );\n      } else if (result.dismiss === Swal.DismissReason.cancel) {\n        Swal.fire(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\n      }\n    });\n  };\n\n  const list = async () => {\n    setIsLoading(true);\n    try {\n      let items \n      \n      if(cookies?.user?.role === 'admin'){\n        items = await (\n         await getAppoinmentsList(itemsPerPage, +itemOffset + 1)\n       ).data;\n      }\n\n      if(cookies?.user?.role !== 'admin'){\n        items = await (\n         await getAppoinmentsListByUser(itemsPerPage, +itemOffset + 1, cookies?.user?.id)\n       ).data;\n      }\n\n      setitemlist(items?.results);\n      setPageCount(items?.totalPages);\n      setIsLoading(false);\n    } catch (error) {\n      if (error?.response?.data?.message) {\n        toast.error(error.response.data.message);\n      } else {\n        toast.error(process.env.REACT_APP_ERROR_MESSAGE);\n      }\n\n      if (error?.response?.data?.code === 401) {\n        const formData = JSON.stringify({\n          refreshToken: localStorage.getItem(\"refreshToken\"),\n        });\n        setCookie(\"user\", null, { path: \"/\" });\n        userLogout(formData).finally(() => {\n          history.push(\"/user-pages/login-1\");\n        });\n      }\n    }    \n}\n\n  return (\n    <div>\n      <div className=\"page-header\">\n        <h3 className=\"page-title\">Appoinments / Fetch Appoinments </h3>\n        <nav aria-label=\"breadcrumb\">\n          <ol className=\"breadcrumb\">\n            <li className=\"breadcrumb-item\">\n              <a href=\"!#\" onClick={(event) => event.preventDefault()}>\n                {cookies?.user?.role} Dashboard\n              </a>\n            </li>\n            <li className=\"breadcrumb-item active\" aria-current=\"page\">\n              Fetch Appoinments\n            </li>\n          </ol>\n        </nav>\n      </div>\n      <div className=\"col-lg-12 grid-margin stretch-card p0\">\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <div className=\"row\">\n              <div className=\"col-md-6\">\n              </div>\n\n              <div className=\"col-md-6\">\n                <div className=\"search-field d-none d-md-block\">\n                  <form className=\"d-flex align-items-center h-100\" action=\"#\">\n                    <div className=\"input-group\">\n                      <div className=\"input-group-prepend outline-gray bg-transparent\">\n                        <i className=\"input-group-text border-0 mdi mdi-magnify\"></i>\n                      </div>\n                      <input\n                        type=\"text\"\n                        className=\"form-control outline-gray bg-transparent border-0\"\n                        placeholder=\"Search Appoinments\"\n                        value={searchTerm}\n                        onChange={(e) => {\n                          setSearchTerm(e?.target?.value);\n                          setItemOffset(0);\n                        }}\n                      />\n                    </div>\n                  </form>\n                </div>\n              </div>\n\n            </div>\n            <h4 className=\"card-title\">Appoinment list</h4>\n\n            <div className=\"table-responsive\">\n              <table className=\"table table-striped\">\n                <thead>\n                  <tr>\n                    <th> From </th>\n                    <th> To </th>\n                    <th> Description </th>\n                    <th> User </th>\n                    <th> User Type </th>\n                    <th> Delete </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {\n                  isLoading ? <React.Fragment><Spinner /></React.Fragment>\n                    :\n                    itemlist?.map((item, index) => {\n                      return (\n                        <tr key={index}>\n                          <td>{item?.fromDate}</td>\n                          <td>{item?.toDate}</td>\n                          <td>{item?.Description}</td>\n                          <td>{item?.user?.name}</td>\n                          <td>{item?.user?.role}</td>\n                          <td>\n                            <i\n                              onClick={() => deleteAppoinment(item?.id)}\n                              className=\"mdi mdi-delete\"\n                            ></i>\n                          </td>\n                        </tr>\n                      );\n                    })}\n                </tbody>\n              </table>\n              <ReactPaginate\n                breakLabel=\"...\"\n                nextLabel=\"next >\"\n                className=\"client-list\"\n                onPageChange={handlePageClick}\n                pageRangeDisplayed={5}\n                pageCount={pageCount}\n                previousLabel=\"< previous\"\n                renderOnZeroPageCount={null}\n                forcePage={itemOffset}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FetchAppoinments;\n"],"sourceRoot":""}