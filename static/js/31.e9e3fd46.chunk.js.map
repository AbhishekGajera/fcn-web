{"version":3,"sources":["utils/Functions/useDebounce.js","app/Admin-components/Transaction/index.js"],"names":["useDebounce","value","delay","useState","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","Transaction","history","useHistory","useCookies","cookies","setCookie","React","show","setShow","valueToEdit","setvalueToEdit","itemlist","setitemlist","searchTerm","setSearchTerm","debouncedSearchTerm","pageCount","setPageCount","useUrl","itemOffset","setItemOffset","itemsPerPage","isLoading","setIsLoading","list","user","role","getTransaction","data","items","getTransactionUsrs","id","results","totalPages","response","message","toast","error","process","code","formData","JSON","stringify","refreshToken","localStorage","getItem","path","userLogout","finally","push","useForm","mode","register","handleSubmit","reset","formState","errors","onSubmit","isDirty","isValid","trasaction_id","updatedData","updateTransaction","success","autoClose","onHide","backdrop","keyboard","Header","closeButton","Title","Body","className","Group","name","required","selected","status","type","aria-label","href","onClick","event","preventDefault","aria-current","action","placeholder","onChange","e","target","map","item","from_user","to_user","total","formateStatus","uid","Swal","fire","title","text","icon","showCancelButton","cancelButtonColor","confirmButtonColor","confirmButtonText","cancelButtonText","then","result","deleteTransaction","dismiss","DismissReason","cancel","breakLabel","nextLabel","onPageChange","window","scrollTo","pageRangeDisplayed","previousLabel","renderOnZeroPageCount","forcePage"],"mappings":"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","file":"static/js/31.e9e3fd46.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\n// Hook\r\nexport const useDebounce = (value, delay) => {\r\n    // State and setters for debounced value\r\n    const [debouncedValue, setDebouncedValue] = useState(value);\r\n    useEffect(\r\n      () => {\r\n        // Update debounced value after delay\r\n        const handler = setTimeout(() => {\r\n          setDebouncedValue(value);\r\n        }, delay);\r\n        // Cancel the timeout if value changes (also on delay change or unmount)\r\n        // This is how we prevent debounced value from updating if value is changed ...\r\n        // .. within the delay period. Timeout gets cleared and restarted.\r\n        return () => {\r\n          clearTimeout(handler);\r\n        };\r\n      },\r\n      [value, delay] // Only re-call effect if value or delay changes\r\n    );\r\n    return debouncedValue;\r\n  }","import React, { useEffect, useState } from \"react\";\r\nimport { useCookies } from \"react-cookie\";\r\nimport ReactPaginate from \"react-paginate\";\r\nimport {\r\n    getTransaction,\r\n    userLogout,\r\n    getTransactionUsrs,\r\n    updateTransaction,\r\n    deleteTransaction,\r\n} from \"../../../utils/APIs\";\r\n\r\nimport { toast } from \"react-toastify\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Swal from \"sweetalert2\";\r\nimport { useUrl } from \"../../../utils/Functions/useUrl\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Form } from 'react-bootstrap';\r\nimport { useDebounce } from \"../../../utils/Functions/useDebounce\";\r\nimport Spinner from \"../../shared/Spinner\";\r\n\r\nconst Transaction = () => {\r\n    const history = useHistory();\r\n    const [cookies, setCookie] = useCookies([\"user\"]);\r\n    const [show, setShow] = React.useState(false);\r\n    const [valueToEdit, setvalueToEdit] = useState({});\r\n    const [itemlist, setitemlist] = useState([]);\r\n    const [searchTerm, setSearchTerm] = useState(\"\");\r\n    const debouncedSearchTerm = useDebounce(searchTerm, 500);\r\n\r\n\r\n\r\n    // We start with an empty list of items.\r\n    const [pageCount, setPageCount] = useState(0);\r\n    const [itemOffset, setItemOffset] = useUrl(\"page\");\r\n    const [itemsPerPage] = useState(20);\r\n    const [isLoading, setIsLoading] = useState(true)\r\n\r\n\r\n    useEffect(() => {\r\n        list();\r\n    }, [itemOffset, itemsPerPage]);\r\n\r\n    useEffect(() => {\r\n        list();\r\n    }, [debouncedSearchTerm]);\r\n\r\n    const list = async () => {\r\n        setIsLoading(true)\r\n        try {\r\n            let items\r\n\r\n            if (cookies?.user?.role === 'admin') {\r\n              items = await (\r\n                await getTransaction(itemsPerPage, +itemOffset + 1)\r\n              ).data;\r\n            }\r\n            if (cookies?.user?.role === 'IBO' || cookies?.user?.role === 'branch' || cookies?.user?.role === 'user' ) {\r\n                \r\n                items = await (\r\n                  await getTransactionUsrs(cookies?.user?.id,itemsPerPage, +itemOffset + 1)\r\n                ).data;\r\n              }\r\n            setitemlist(items?.results);\r\n            setPageCount(items?.totalPages);\r\n        } catch (error) {\r\n            if (error?.response?.data?.message) {\r\n                toast.error(error.response.data.message);\r\n            } else {\r\n                toast.error(process.env.REACT_APP_ERROR_MESSAGE);\r\n            }\r\n            if (error?.response?.data?.code === 401) {\r\n                const formData = JSON.stringify({\r\n                    refreshToken: localStorage.getItem(\"refreshToken\"),\r\n                });\r\n                setCookie(\"user\", null, { path: \"/\" });\r\n                userLogout(formData).finally(() => {\r\n                    history.push(\"/user-pages/login-1\");\r\n                });\r\n            }\r\n        }\r\n        setIsLoading(false)\r\n    };\r\n\r\n\r\n    // Invoke when user click to request another page.\r\n    const handlePageClick = (event) => {\r\n        window.scrollTo(0, 0);\r\n        setItemOffset(event.selected);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setShow(false)\r\n        setvalueToEdit({})\r\n        reset()\r\n    };\r\n\r\n    const handleShow = (value) => {\r\n        reset()\r\n        setvalueToEdit(value)\r\n        setShow(true);\r\n    }\r\n\r\n    const { register, handleSubmit, reset, formState: { errors, isDirty, isValid } } = useForm({\r\n        mode: \"onChange\"\r\n    });\r\n\r\n    const deleteData = (uid) => {\r\n        Swal.fire({\r\n            title: \"Are you sure?\",\r\n            text: \"You will not be able to recover this imaginary file!\",\r\n            icon: \"warning\",\r\n            showCancelButton: true,\r\n            cancelButtonColor: \"#DD6B55\",\r\n            confirmButtonColor: \"#DD6B55\",\r\n            confirmButtonText: \"Yes, delete it!\",\r\n            cancelButtonText: \"No, keep it\",\r\n        }).then((result) => {\r\n            if (result.value) {\r\n                return (\r\n                    deleteTransaction(uid).finally(() => list()),\r\n                    Swal.fire(\r\n                        \"Deleted!\",\r\n                        \"Your imaginary file has been deleted.\",\r\n                        \"success\"\r\n                    )\r\n                );\r\n            } else if (result.dismiss === Swal.DismissReason.cancel) {\r\n                Swal.fire(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\r\n            }\r\n        });\r\n    };\r\n\r\n    const onSubmit = async (data) => {\r\n        try {\r\n            data.trasaction_id = valueToEdit?.id;\r\n            const updatedData = JSON.stringify(data)\r\n            await updateTransaction(updatedData)\r\n            toast.success('Transaction updated Successfully', {\r\n                autoClose: 3000\r\n            })\r\n            list()\r\n        } catch (error) {\r\n            if (\r\n                error &&\r\n                error.response &&\r\n                error.response.data &&\r\n                error.response.data.message\r\n            ) {\r\n                toast.error(error.response.data.message);\r\n            } else {\r\n                toast.error(process.env.REACT_APP_ERROR_MESSAGE);\r\n            }\r\n        } finally {\r\n            setShow(false)\r\n        }\r\n    };\r\n\r\n    const formateStatus = (status) => {\r\n        switch (+status) {\r\n            case (0):\r\n                return 'Pending';\r\n            case (1):\r\n                return 'approved';\r\n            case (2):\r\n                return 'Declined'            \r\n            default:\r\n                return 'Pending';\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Modal\r\n                show={show}\r\n                onHide={handleClose}\r\n                backdrop=\"static\"\r\n                keyboard={false}\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Update Transaction</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <div className=\"row auth\">\r\n                        <div className=\"col-12 grid-margin\">\r\n                            <div className=\"card\">\r\n                                <div className=\"card-body\">\r\n                                    <form className=\"form-sample\" onSubmit={handleSubmit(onSubmit)}>\r\n                                        <p className=\"card-description\"> Update Transaction </p>\r\n                                        <div className=\"row\" >\r\n                                            <div className=\"col-md-12\">\r\n                                                <Form.Group className=\"row\">\r\n                                                    <label className=\"col-sm-3 col-form-label\">Status</label>\r\n                                                    <div className=\"col-sm-9\">\r\n                                                        <select\r\n                                                            className=\"form-control form-control-lg\"\r\n                                                            id=\"exampleFormControlSelect2\"\r\n                                                            name=\"status\"\r\n                                                            {...register(\"status\", {\r\n                                                                required: true,\r\n                                                            })}>\r\n                                                            <option value=''>--Select Status--</option>\r\n                                                            <option value='0' selected={valueToEdit.status === 0}>Pending</option>\r\n                                                            <option value='1' selected={valueToEdit.status === 1}>approved</option>\r\n                                                            <option value='2' selected={valueToEdit.status === 2}>Declined</option>\r\n                                                        </select>\r\n                                                        {errors && errors.status && (\r\n                                                            <p>status is required field</p>\r\n                                                        )}\r\n                                                    </div>\r\n                                                </Form.Group>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"mt-3\">\r\n                                            <button\r\n                                                className=\"btn  btn-primary btn-lg font-weight-medium auth-form-btn\"\r\n                                                type=\"submit\"\r\n                                            >\r\n                                                UPDATE\r\n                                            </button>\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div >\r\n                </Modal.Body>\r\n            </Modal>\r\n            <div className=\"page-header\">\r\n                <h3 className=\"page-title\">Transaction / Show Transaction </h3>\r\n                <nav aria-label=\"breadcrumb\">\r\n                    <ol className=\"breadcrumb\">\r\n                        <li className=\"breadcrumb-item\">\r\n                            <a href=\"!#\" onClick={(event) => event.preventDefault()}>\r\n                                {cookies?.user?.role} Dashboard\r\n                            </a>\r\n                        </li>\r\n                        <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n                            Show Transaction\r\n                        </li>\r\n                    </ol>\r\n                </nav>\r\n            </div>\r\n            <div className=\"col-lg-12 grid-margin stretch-card p0\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-6\"></div>\r\n                            <div className=\"col-md-6\">\r\n                                <div className=\"search-field d-none d-md-block\">\r\n                                    <form className=\"d-flex align-items-center h-100\" action=\"#\">\r\n                                        <div className=\"input-group\">\r\n                                            <div className=\"input-group-prepend outline-gray bg-transparent\">\r\n                                                <i className=\"input-group-text border-0 mdi mdi-magnify\"></i>\r\n                                            </div>\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                className=\"form-control outline-gray bg-transparent border-0\"\r\n                                                placeholder=\"Search Transaction\"\r\n                                                value={searchTerm}\r\n                                                onChange={(e) => {\r\n                                                    setSearchTerm(e?.target?.value);\r\n                                                    setItemOffset(0);\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <h4 className=\"card-title\">Transaction list</h4>\r\n\r\n                        <div className=\"table-responsive\">\r\n                            <table className=\"table table-striped\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th> From </th>\r\n                                        <th> TO </th>\r\n                                        <th> Amount </th>\r\n                                        <th> Type </th>\r\n                                        <th> Status </th>\r\n                                        <th> Edit </th>\r\n                                        <th> Delete </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {isLoading ? <Spinner />\r\n                                        :\r\n                                        itemlist?.map((item) => {\r\n                                            return (\r\n                                                <tr>\r\n                                                    <td>{item?.from_user?.name}</td>\r\n                                                    <td>{item?.to_user?.name}</td>\r\n                                                    <td>{item?.total}</td>\r\n                                                    <td>{item?.type}</td>\r\n                                                    <td>{formateStatus(item?.status)}</td>\r\n                                                    <td><i onClick={() => handleShow(item)} className=\"mdi mdi-lead-pencil\"></i></td>\r\n                                                    <td>\r\n                                                        <i\r\n                                                            onClick={() => deleteData(item?.id)}\r\n                                                            className=\"mdi mdi-delete\"\r\n                                                        >\r\n                                                            {\" \"}\r\n                                                        </i>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            );\r\n                                        })}\r\n                                </tbody>\r\n                            </table>\r\n                            <ReactPaginate\r\n                                breakLabel=\"...\"\r\n                                nextLabel=\"next >\"\r\n                                className=\"client-list\"\r\n                                onPageChange={handlePageClick}\r\n                                pageRangeDisplayed={5}\r\n                                pageCount={pageCount}\r\n                                previousLabel=\"< previous\"\r\n                                renderOnZeroPageCount={null}\r\n                                forcePage={itemOffset}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Transaction;\r\n"],"sourceRoot":""}