{"version":3,"sources":["app/Admin-components/Notification/DashboardNotification.js"],"names":["DashboardNotification","history","useHistory","useCookies","cookies","setCookie","React","useState","show","setShow","pageCount","setPageCount","useUrl","itemOffset","setItemOffset","itemsPerPage","itemlist","setitemlist","isLoading","setIsLoading","img","setimg","handleClose","reset","useEffect","list","timer","setTimeout","clearTimeout","getDashboardNotification","data","items","results","totalPages","response","message","toast","error","process","code","formData","JSON","stringify","refreshToken","localStorage","getItem","path","userLogout","finally","push","useForm","mode","register","handleSubmit","formState","errors","onSubmit","isDirty","isValid","getValues","Data","FormData","append","ImageUpload","fileResult","attachment","secure_url","user","id","type","status","addDashboardNotification","success","onHide","backdrop","keyboard","Header","closeButton","Title","Body","className","Group","Control","name","required","title","value","content","onChange","e","target","files","onClick","preventDefault","element","document","getElementById","click","aria-label","href","event","aria-current","style","marginBottom","role","map","item","targetAudience","uid","Swal","fire","text","icon","showCancelButton","cancelButtonColor","confirmButtonColor","confirmButtonText","cancelButtonText","then","result","deleteDashboardNotification","dismiss","DismissReason","cancel","breakLabel","nextLabel","onPageChange","selected","pageRangeDisplayed","previousLabel","renderOnZeroPageCount","forcePage"],"mappings":";+jNAmVeA,UArUe,WAAO,IAAD,EAE1BC,EAAUC,cAChB,EAA6BC,YAAW,CAAC,SAAzC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAwBC,IAAMC,UAAS,GAAvC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAkCF,mBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAoCC,YAAO,QAA3C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAuBP,mBAAS,IAAzBQ,EAAP,oBACA,EAAgCR,mBAAS,IAAzC,mBAAOS,EAAP,KAAiBC,EAAjB,KACA,EAAkCV,oBAAS,GAA3C,mBAAOW,EAAP,KAAkBC,EAAlB,KACA,EAAsBZ,qBAAtB,mBAAOa,EAAP,KAAYC,EAAZ,KAOMC,EAAc,WAChBb,GAAQ,GACRc,KAGJC,qBAAU,WACNC,MACD,CAACZ,EAAYE,IAEhBS,qBAAU,WACN,IAAME,EAAQC,YAAW,WACrBF,MACD,KACH,OAAO,kBAAMG,aAAaF,MAC3B,IAEH,IA2BMD,EAAI,uCAAG,qGACTN,GAAa,GADJ,kBAIKU,aAAyBd,GAAeF,EAAa,GAJ1D,8BAKHiB,KALG,OAGCC,EAHD,OAMLd,EAAW,OAACc,QAAD,IAACA,OAAD,EAACA,EAAOC,SACnBrB,EAAY,OAACoB,QAAD,IAACA,OAAD,EAACA,EAAOE,YAPf,mDASL,sCAAI,KAAOC,gBAAX,iBAAI,EAAiBJ,YAArB,aAAI,EAAuBK,SACvBC,IAAMC,MAAM,KAAMH,SAASJ,KAAKK,SAEhCC,IAAMC,MAAMC,wFAEoB,OAAhC,2CAAOJ,gBAAP,mBAAiBJ,YAAjB,eAAuBS,QACjBC,EAAWC,KAAKC,UAAU,CAC5BC,aAAcC,aAAaC,QAAQ,kBAEvCxC,EAAU,OAAQ,KAAM,CAAEyC,KAAM,MAChCC,aAAWP,GAAUQ,SAAQ,WACzB/C,EAAQgD,KAAK,2BApBhB,QAwBT9B,GAAa,GAxBJ,0DAAH,qDAuCV,EAMI+B,YAAQ,CACRC,KAAM,aANNC,EADJ,EACIA,SACAC,EAFJ,EAEIA,aACA9B,EAHJ,EAGIA,MAHJ,KAII+B,UAAaC,GAJjB,GAIiBA,OAQXC,IAZN,GAIyBC,QAJzB,GAIkCC,SAMnBC,EAVf,EAKIA,aAOU,uCAAG,WAAO7B,GAAP,8EACbR,IACMsC,EAAO,IAAIC,UAEbzC,EAJS,uBAKTwC,EAAKE,OAAO,OAAQ1C,GALX,SAMU2C,YAAYH,GANtB,QAMTI,EANS,QAOM3B,OACXD,IAAMC,MAAM2B,EAAW3B,MAAMF,SARxB,uBAYTL,EAAKmC,WAAaD,EAAaA,EAAWE,WAAa,GACvDpC,EAAKqC,KAAL,OAAY/D,QAAZ,IAAYA,GAAZ,UAAYA,EAAS+D,YAArB,aAAY,EAAeC,GAC3BtC,EAAKuC,KAAO,MACZvC,EAAKwC,OAAS,EAfL,UAgBYC,YAAyBzC,GAhBrC,eAiBTM,IAAMoC,QAAQ,6CACd/C,IAlBS,kDAqBL,MACA,KAAMS,UACN,KAAMA,SAASJ,MACf,KAAMI,SAASJ,KAAKK,QAEpBC,IAAMC,MAAM,KAAMH,SAASJ,KAAKK,SAEhCC,IAAMC,MAAMC,wFA5BP,0DAAH,uDAmCd,OACI,6BACI,kBAAC,IAAD,CACI9B,KAAMA,EACNiE,OAAQnD,EACRoD,SAAS,SACTC,UAAU,GAEV,kBAAC,IAAMC,OAAP,CAAcC,aAAW,GACrB,kBAAC,IAAMC,MAAP,qCAEJ,kBAAC,IAAMC,KAAP,KACI,yBAAKC,UAAU,YACX,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,aACX,0BAAMA,UAAU,cAAcxB,SAAUH,EAAaG,KACjD,uBAAGwB,UAAU,oBAAb,iCACA,yBAAKA,UAAU,OACX,yBAAKA,UAAU,aACX,kBAAC,IAAKC,MAAN,CAAYD,UAAU,OAClB,2BAAOA,UAAU,2BAAjB,SACA,yBAAKA,UAAU,YACX,kBAAC,IAAKE,QAAN,eACIb,KAAK,OACLc,KAAK,SACD/B,EAAS,QAAS,CAAEgC,UAAU,MAGrC7B,IAAUA,GAAO8B,OAAS,wDAGnC,kBAAC,IAAKJ,MAAN,CAAYD,UAAU,OAClB,2BAAOA,UAAU,2BAAjB,wBAC0B,KAE1B,yBAAKA,UAAU,YACX,0CAAQG,KAAK,iBAAiBH,UAAU,gCAChC5B,EAAS,iBAAkB,CAC3BgC,UAAU,KAEd,4BAAQE,MAAM,OAAd,OACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,UAAd,aAIZ,kBAAC,IAAKL,MAAN,CAAYD,UAAU,OAClB,2BAAOA,UAAU,2BAAjB,cACgB,KAEhB,yBAAKA,UAAU,YACX,kBAAC,IAAKE,QAAN,eACIb,KAAK,OACLc,KAAK,WACD/B,EAAS,UAAW,CAAEgC,UAAU,MAEvC7B,IAAUA,GAAOgC,SACd,0DAIZ,kBAAC,IAAKN,MAAN,CAAYD,UAAU,OAClB,2BAAOA,UAAU,2BAAjB,qBACuB,KAEvB,yBAAKA,UAAU,YACX,2BAAOX,KAAK,OAAOD,GAAG,WAAWY,UAAU,SAASQ,SAzMlF,SAACC,GAAO,IAAD,EACzBpE,EAAM,OAACoE,QAAD,IAACA,GAAD,UAACA,EAAGC,cAAJ,aAAC,EAAWC,MAAM,OAyMwB,4BACIC,QA7HnC,SAACH,GAClBA,EAAEI,iBACF,IAAMC,EAAUC,SAASC,eAAe,YACpCF,GACAA,EAAQG,SA0HwCjB,UAAS,2BAAwB,OAAH5D,QAAG,IAAHA,KAAK+D,KAAO,mBAGtC,OAAH/D,QAAG,IAAHA,OAAA,EAAAA,EAAK+D,MAAL,OAAY/D,QAAZ,IAAYA,OAAZ,EAAYA,EAAK+D,KAAO,oBAM7C,yBAAKH,UAAU,QACX,4BACIA,UAAU,2DACVX,KAAK,UAFT,gBAchC,yBAAKW,UAAU,eACX,wBAAIA,UAAU,cAAd,2BACA,yBAAKkB,aAAW,cACZ,wBAAIlB,UAAU,cACV,wBAAIA,UAAU,mBACV,uBAAGmB,KAAK,KAAKP,QAAS,SAACQ,GAAD,OAAWA,EAAMP,mBAAvC,cAIJ,wBAAIb,UAAU,yBAAyBqB,eAAa,QAApD,UAMZ,yBAAKrB,UAAU,yCACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,MAAMsB,MAAO,CAAEC,aAAc,SACxC,yBAAKvB,UAAU,YACc,WAAjB,OAAP5E,QAAO,IAAPA,GAAA,UAAAA,EAAS+D,YAAT,eAAeqC,OACZ,4BAAQxB,UAAU,kCAAkCX,KAAK,SAASuB,QAAS,kBAAMnF,GAAQ,KAAzF,gCAKR,yBAAKuE,UAAU,cAGnB,wBAAIA,UAAU,cAAd,+BAEA,yBAAKA,UAAU,oBACX,2BAAOA,UAAU,uBACb,+BACI,4BACI,uCACA,yCACA,sCACA,iDACA,0CAGR,+BACK9D,EAAY,kBAAC,IAAD,MAAH,OAENF,QAFM,IAENA,OAFM,EAENA,EAAUyF,KAAI,SAACC,GACX,OACI,4BACI,mCAAKA,QAAL,IAAKA,OAAL,EAAKA,EAAMrB,OACX,wBAAIL,UAAU,iBAAd,OAA+B0B,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAMnB,SACrC,mCAAKmB,QAAL,IAAKA,OAAL,EAAKA,EAAMrC,MACX,mCAAKqC,QAAL,IAAKA,OAAL,EAAKA,EAAMC,gBACX,4BACI,4BACI,uBACIf,QAAS,kBAvQ/BgB,EAuQiE,OAACF,QAAD,IAACA,OAAD,EAACA,EAAMtC,QAtQ1GyC,IAAKC,KAAK,CACNzB,MAAO,gBACP0B,KAAM,uDACNC,KAAM,UACNC,kBAAkB,EAClBC,kBAAmB,UACnBC,mBAAoB,UACpBC,kBAAmB,kBACnBC,iBAAkB,gBACnBC,MAAK,SAACC,GACL,GAAIA,EAAOjC,MACP,OACIkC,YAA4BZ,GAAK5D,SAAQ,kBAAMvB,OAC/CoF,IAAKC,KACD,WACA,wCACA,WAGDS,EAAOE,UAAYZ,IAAKa,cAAcC,QAC7Cd,IAAKC,KAAK,YAAa,iCAAkC,YArBhC,IAACF,GAwQsB5B,UAAU,2BAS9C,kBAAC,IAAD,CACI4C,WAAW,MACXC,UAAU,SACV7C,UAAU,cACV8C,aA/NJ,SAAC1B,GACrBtF,EAAcsF,EAAM2B,WA+NIC,mBAAoB,EACpBtH,UAAWA,EACXuH,cAAc,aACdC,sBAAuB,KACvBC,UAAWtH","file":"static/js/60.b0a53afc.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useUrl } from \"../../../utils/Functions/useUrl\";\r\nimport { Form } from 'react-bootstrap';\r\nimport { ImageUpload, userLogout, addDashboardNotification, getDashboardNotification, deleteDashboardNotification } from \"../../../utils/APIs\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useCookies } from \"react-cookie\";\r\nimport Spinner from \"../../shared/Spinner\";\r\nimport ReactPaginate from \"react-paginate\";\r\nimport Swal from \"sweetalert2\";\r\n\r\n\r\nconst DashboardNotification = () => {\r\n\r\n    const history = useHistory();\r\n    const [cookies, setCookie] = useCookies([\"user\"]);\r\n    const [show, setShow] = React.useState(false);\r\n    const [pageCount, setPageCount] = useState(0);\r\n    const [itemOffset, setItemOffset] = useUrl(\"page\");\r\n    const [itemsPerPage] = useState(10);\r\n    const [itemlist, setitemlist] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [img, setimg] = useState()\r\n\r\n\r\n    const onChangeImage = (e) => {\r\n        setimg(e?.target?.files[0])\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setShow(false)\r\n        reset()\r\n    };\r\n\r\n    useEffect(() => {\r\n        list()\r\n    }, [itemOffset, itemsPerPage])\r\n\r\n    useEffect(() => {\r\n        const timer = setTimeout(() => {\r\n            list()\r\n        }, 5000);\r\n        return () => clearTimeout(timer);\r\n    }, [])\r\n\r\n    const deleteDashboardNotifications = (uid) => {\r\n        Swal.fire({\r\n            title: \"Are you sure?\",\r\n            text: \"You will not be able to recover this imaginary file!\",\r\n            icon: \"warning\",\r\n            showCancelButton: true,\r\n            cancelButtonColor: \"#DD6B55\",\r\n            confirmButtonColor: \"#DD6B55\",\r\n            confirmButtonText: \"Yes, delete it!\",\r\n            cancelButtonText: \"No, keep it\",\r\n        }).then((result) => {\r\n            if (result.value) {\r\n                return (\r\n                    deleteDashboardNotification(uid).finally(() => list()),\r\n                    Swal.fire(\r\n                        \"Deleted!\",\r\n                        \"Your imaginary file has been deleted.\",\r\n                        \"success\"\r\n                    )\r\n                );\r\n            } else if (result.dismiss === Swal.DismissReason.cancel) {\r\n                Swal.fire(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\r\n            }\r\n        });\r\n    };\r\n\r\n\r\n    const list = async () => {\r\n        setIsLoading(true)\r\n        try {\r\n            const items = await (\r\n                await getDashboardNotification(itemsPerPage, +itemOffset + 1,)\r\n            ).data;\r\n            setitemlist(items?.results);\r\n            setPageCount(items?.totalPages);\r\n        } catch (error) {\r\n            if (error?.response?.data?.message) {\r\n                toast.error(error.response.data.message);\r\n            } else {\r\n                toast.error(process.env.REACT_APP_ERROR_MESSAGE);\r\n            }\r\n            if (error?.response?.data?.code === 401) {\r\n                const formData = JSON.stringify({\r\n                    refreshToken: localStorage.getItem(\"refreshToken\"),\r\n                });\r\n                setCookie(\"user\", null, { path: \"/\" });\r\n                userLogout(formData).finally(() => {\r\n                    history.push(\"/user-pages/login-1\");\r\n                });\r\n            }\r\n        }\r\n        setIsLoading(false)\r\n    };\r\n\r\n    const handlePageClick = (event) => {\r\n        setItemOffset(event.selected);\r\n    };\r\n\r\n    const handleUpload = (e) => {\r\n        e.preventDefault()\r\n        const element = document.getElementById('input-id');\r\n        if (element) {\r\n            element.click()\r\n        }\r\n    };\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        reset,\r\n        formState: { errors, isDirty, isValid },\r\n        getValues,\r\n    } = useForm({\r\n        mode: \"onChange\",\r\n    });\r\n\r\n    const values = getValues();\r\n\r\n    const onSubmit = async (data) => {\r\n        handleClose();\r\n        const Data = new FormData();\r\n        let fileResult;\r\n        if (img) {\r\n            Data.append('file', img);\r\n            fileResult = await ImageUpload(Data)\r\n            if (fileResult.error) {\r\n                toast.error(fileResult.error.message);\r\n            }\r\n        }\r\n        try {\r\n            data.attachment = fileResult ? fileResult.secure_url : '';\r\n            data.user = cookies?.user?.id;\r\n            data.type = \"all\";\r\n            data.status = 1;\r\n            const result = await addDashboardNotification(data)\r\n            toast.success(\"DashBoard Notification Added successfully\");\r\n            list();\r\n        } catch (error) {\r\n            if (\r\n                error &&\r\n                error.response &&\r\n                error.response.data &&\r\n                error.response.data.message\r\n            ) {\r\n                toast.error(error.response.data.message);\r\n            } else {\r\n                toast.error(process.env.REACT_APP_ERROR_MESSAGE);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Modal\r\n                show={show}\r\n                onHide={handleClose}\r\n                backdrop=\"static\"\r\n                keyboard={false}\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Send Dashboard Notification</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <div className=\"row auth\">\r\n                        <div className=\"col-12 grid-margin\">\r\n                            <div className=\"card\">\r\n                                <div className=\"card-body\">\r\n                                    <form className=\"form-sample\" onSubmit={handleSubmit(onSubmit)}>\r\n                                        <p className=\"card-description\"> Send Dashboard Notification </p>\r\n                                        <div className=\"row\">\r\n                                            <div className=\"col-md-12\">\r\n                                                <Form.Group className=\"row\">\r\n                                                    <label className=\"col-sm-3 col-form-label\">Title</label>\r\n                                                    <div className=\"col-sm-9\">\r\n                                                        <Form.Control\r\n                                                            type=\"text\"\r\n                                                            name=\"title\"\r\n                                                            {...register(\"title\", { required: true })}\r\n\r\n                                                        />\r\n                                                        {errors && errors.title && <p>Title is required field</p>}\r\n                                                    </div>\r\n                                                </Form.Group>\r\n                                                <Form.Group className=\"row\">\r\n                                                    <label className=\"col-sm-3 col-form-label\">\r\n                                                        Select targetAudience{\" \"}\r\n                                                    </label>\r\n                                                    <div className=\"col-sm-8\">\r\n                                                        <select name='targetAudience' className=\"form-control form-control-lg\"\r\n                                                            {...register(\"targetAudience\", {\r\n                                                                required: true,\r\n                                                            })}>\r\n                                                            <option value=\"all\">All</option>\r\n                                                            <option value=\"branch\">Branch</option>\r\n                                                            <option value=\"ibo\">IBO</option>\r\n                                                            <option value=\"client\">Client</option>\r\n                                                        </select>\r\n                                                    </div>\r\n                                                </Form.Group>\r\n                                                <Form.Group className=\"row\">\r\n                                                    <label className=\"col-sm-3 col-form-label\">\r\n                                                        Description{\" \"}\r\n                                                    </label>\r\n                                                    <div className=\"col-sm-8\">\r\n                                                        <Form.Control\r\n                                                            type=\"text\"\r\n                                                            name=\"content\"\r\n                                                            {...register(\"content\", { required: true })}\r\n                                                        />\r\n                                                        {errors && errors.content && (\r\n                                                            <p>Content is required field</p>\r\n                                                        )}\r\n                                                    </div>\r\n                                                </Form.Group>\r\n                                                <Form.Group className=\"row\">\r\n                                                    <label className=\"col-sm-4 col-form-label\">\r\n                                                        Notification Image{\" \"}</label>\r\n\r\n                                                    <div className=\"col-sm-8\">\r\n                                                        <input type=\"file\" id=\"input-id\" className=\"d-none\" onChange={onChangeImage} />\r\n                                                        <button\r\n                                                            onClick={handleUpload}\r\n                                                            className={`btn btn-outline-${img?.name ? \" btn-primary\" : \" btn-primary\"\r\n                                                                }`}\r\n                                                        >\r\n                                                            {img?.name ? img?.name : \"Upload Image\"}\r\n                                                        </button>\r\n                                                    </div>\r\n                                                </Form.Group>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"mt-3\">\r\n                                            <button\r\n                                                className=\"btn  btn-primary btn-lg font-weight-medium auth-form-btn\"\r\n                                                type=\"submit\"\r\n                                            >\r\n                                                Send\r\n                                            </button>\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </Modal.Body>\r\n            </Modal>\r\n            <div className=\"page-header\">\r\n                <h3 className=\"page-title\">Dashboard Notification </h3>\r\n                <nav aria-label=\"breadcrumb\">\r\n                    <ol className=\"breadcrumb\">\r\n                        <li className=\"breadcrumb-item\">\r\n                            <a href=\"!#\" onClick={(event) => event.preventDefault()}>\r\n                                Dashboard\r\n                            </a>\r\n                        </li>\r\n                        <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n                            All\r\n                        </li>\r\n                    </ol>\r\n                </nav>\r\n            </div>\r\n            <div className=\"col-lg-12 grid-margin stretch-card p0\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                        <div className=\"row\" style={{ marginBottom: '14px' }}>\r\n                            <div className=\"col-md-4\">\r\n                                {cookies?.user?.role === \"admin\" && (\r\n                                    <button className=\"btn btn-gradient-primary btn-lg\" type=\"button\" onClick={() => setShow(true)}>\r\n                                        Send Dashboard Notification\r\n                                    </button>\r\n                                )}\r\n                            </div>\r\n                            <div className=\"col-md-8\">\r\n                            </div>\r\n                        </div>\r\n                        <h4 className=\"card-title\">Dashboard Notification list</h4>\r\n\r\n                        <div className=\"table-responsive\">\r\n                            <table className=\"table table-striped\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th> Title </th>\r\n                                        <th> content </th>\r\n                                        <th> Type </th>\r\n                                        <th> Target Audience </th>\r\n                                        <th> Action </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {isLoading ? <Spinner />\r\n                                        :\r\n                                        itemlist?.map((item) => {\r\n                                            return (\r\n                                                <tr>\r\n                                                    <td>{item?.title}</td>\r\n                                                    <td className=\"max-width-200\">{item?.content}</td>\r\n                                                    <td>{item?.type}</td>\r\n                                                    <td>{item?.targetAudience}</td>\r\n                                                    <td>\r\n                                                        <td>\r\n                                                            <i\r\n                                                                onClick={() => deleteDashboardNotifications(item?.id)}\r\n                                                                className=\"mdi mdi-delete\"\r\n                                                            ></i>\r\n                                                        </td>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            );\r\n                                        })}\r\n                                </tbody>\r\n                            </table>\r\n                            <ReactPaginate\r\n                                breakLabel=\"...\"\r\n                                nextLabel=\"next >\"\r\n                                className=\"client-list\"\r\n                                onPageChange={handlePageClick}\r\n                                pageRangeDisplayed={5}\r\n                                pageCount={pageCount}\r\n                                previousLabel=\"< previous\"\r\n                                renderOnZeroPageCount={null}\r\n                                forcePage={itemOffset}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DashboardNotification;\r\n\r\n"],"sourceRoot":""}