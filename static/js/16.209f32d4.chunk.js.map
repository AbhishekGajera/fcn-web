{"version":3,"sources":["utils/Functions/useUrl.js","utils/Functions/useDebounce.js","utils/Functions/commonOptions.js","utils/Functions/passwordGenerator.js","app/IBO-components/ClientList/index.js"],"names":["useUrl","param","history","useHistory","useLocation","search","pathname","url","URLSearchParams","urlParam","get","useState","value","setValue","val","set","replace","toString","useDebounce","delay","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","statusOption","label","roleOption","roleOptionForAmin","timeOption","Date","setDate","getDate","optionForExpenceType","optionForCostCategory","formateStatus","status","formateStatusForTargets","password_generator","len","length","string","password","character","entity1","Math","ceil","random","entity2","hold","charAt","toUpperCase","split","sort","join","substr","ClientList","useCookies","cookies","setCookie","itemlist","setitemlist","searchTerm","setSearchTerm","debouncedSearchTerm","useForm","mode","register","handleSubmit","reset","formState","errors","strongRegexMo","isDirty","isValid","RegExp","onSubmit","data","updateStatus","branch","branchUpdate","role","roleUpdate","updatedData","JSON","stringify","updateProfile","valueToEdit","id","toast","success","autoClose","list","response","message","error","process","code","formData","refreshToken","localStorage","getItem","path","userLogout","finally","push","setShow","pageCount","setPageCount","itemOffset","setItemOffset","itemsPerPage","React","show","setvalueToEdit","setupdateStatus","branchList","setbranchList","selectedBranch","setselectedBranch","IBOList","setIBOList","selectedIBO","setselectedIBO","setbranchUpdate","IBOUpdate","setIBOUpdate","setroleUpdate","isLoading","setIsLoading","getBranchList","getIBOList","getBranches","items","results","getIBOs","user","getUserBranch","name","getUserIbo","getUsers","totalPages","generatePassword","randomPassword","newPassword","onHide","backdrop","keyboard","Header","closeButton","Title","Body","className","Group","Control","type","defaultValue","required","address","contactno","pattern","email","onChange","e","target","map","i","selected","aadhar_card_no","pan_card_no","aria-label","href","onClick","event","preventDefault","aria-current","action","placeholder","item","IBO","uid","Swal","fire","title","text","icon","showCancelButton","cancelButtonColor","confirmButtonColor","confirmButtonText","cancelButtonText","then","result","deleteUsr","dismiss","DismissReason","cancel","breakLabel","nextLabel","onPageChange","window","scrollTo","pageRangeDisplayed","previousLabel","renderOnZeroPageCount","forcePage"],"mappings":"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","file":"static/js/16.209f32d4.chunk.js","sourcesContent":["import { useState } from 'react'\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nexport const useUrl = (param) => {\n\n    const history = useHistory()\n    const { search, pathname } = useLocation()\n    const url = new URLSearchParams(search)\n\n    const urlParam = url.get(param)\n    const [value, setValue] = useState(urlParam !== null ? urlParam : '')\n\n    function _setValue(val){\n        url.set(param, val)\n        history.replace({ pathname, search: url.toString() }); \n        setValue(val)\n    }\n\n    return [value, _setValue]\n}","import { useEffect, useState } from \"react\";\n\n// Hook\nexport const useDebounce = (value, delay) => {\n    // State and setters for debounced value\n    const [debouncedValue, setDebouncedValue] = useState(value);\n    useEffect(\n      () => {\n        // Update debounced value after delay\n        const handler = setTimeout(() => {\n          setDebouncedValue(value);\n        }, delay);\n        // Cancel the timeout if value changes (also on delay change or unmount)\n        // This is how we prevent debounced value from updating if value is changed ...\n        // .. within the delay period. Timeout gets cleared and restarted.\n        return () => {\n          clearTimeout(handler);\n        };\n      },\n      [value, delay] // Only re-call effect if value or delay changes\n    );\n    return debouncedValue;\n  }","export const statusOption = [\n    { value : 0, label : 'Active' },\n    { value : 1, label : 'In Active' },\n    { value : 2, label : 'Terminated' }\n]\n\nexport const roleOption = [\n    { value : 'user', label : 'User' },\n    { value : 'admin', label : 'Admin' },\n    { value : 'IBO', label : 'IBO' },\n    { value : 'branch', label : 'Branch' }\n]\n\nexport const roleOptionForAmin = [\n    { value : 'IBO', label : 'IBO' },\n    { value : 'branch', label : 'Branch' }\n]\n\nexport const timeOption = [\n    { value : new Date().setDate(new Date().getDate() - 7), label : '1 week' },\n    { value : new Date().setDate(new Date().getDate() - 30), label : '1 month' },\n    { value : new Date().setDate(new Date().getDate() - 90), label : '3 month' },\n    { value : new Date().setDate(new Date().getDate() - 180), label : '6 month' },\n    { value : new Date().setDate(new Date().getDate() - 365), label : '1 Year' }\n]\n\nexport const optionForExpenceType = [\n    { value : 'Office expence', label : 'Office expence' },\n    { value : 'Employee expence', label : 'Employee expence' },\n    { value : 'Misleniuneous expence', label : 'Misleniuneous expence' },\n    { value : 'Other expence', label : 'Other expence' }\n]\n\nexport const optionForCostCategory = [\n    { value : 'Petrol', label : 'Petrol' },\n    { value : 'Food', label : 'Food' },\n    { value : 'Rent', label : 'Rent' },\n    { value : 'Tea', label : 'Tea' },\n    { value : 'Transport', label : 'Transport' },\n    { value : 'Gift', label : 'Gift' },\n    { value : 'Printing', label : 'Printing' },\n    { value : 'Advertising', label : 'Advertising' },\n    { value : 'Electricity Bill', label : 'Electricity Bill' },\n    { value : 'Cleaning', label : 'Cleaning' },\n    { value : 'Salary', label : 'Salary' },\n    { value : 'Medical Expences', label : 'Medical Expences' },\n    { value : 'Insurance', label : 'Insurance' },\n    { value : 'Legal & Professionals Fees', label : 'Legal & Professionals Fees' },\n    { value : 'Phone Bill', label : 'Phone Bill' },\n    { value : 'Internet Bill', label : 'Internet Bill' },\n    { value : 'Stationaries Bill', label : 'Stationaries Bill' },\n    { value : 'Depreciation', label : 'Depreciation' },\n    { value : 'Row materials', label : 'Row materials' },\n    { value : 'Books and magazine subscriptions', label : 'Books and magazine subscriptions' }\n]\n\nexport const formateStatus = (status) => {\n    switch (+status) {\n        case (0):\n            return 'Active';\n        case (1):\n            return 'In Active';\n        case (2):\n            return 'Terminated'            \n        default:\n            return 'Active';\n    }\n}\n\nexport const formateStatusForTargets = (status) => {\n    switch (+status) {\n        case (1):\n            return 'Running';\n        case (2):\n            return 'Finished';\n        case (3):\n            return 'Cancelled';\n        case (4):\n            return 'Archieved';         \n        default:\n            return 'Cancelled';\n    }\n}","export const password_generator = ( len ) => {\n    let length = (len)?(len):(10);\n    let string = \"abcdefghijklmnopqrstuvwxyz\"; //to upper \n    let numeric = '0123456789';\n    let password = \"\";\n    let character = \"\";\n    let crunch = true;\n    while( password.length<length ) {\n       let entity1 = Math.ceil(string.length * Math.random()*Math.random());\n       let entity2 = Math.ceil(numeric.length * Math.random()*Math.random());\n       let hold = string.charAt( entity1 );\n        hold = (password.length%2==0)?(hold.toUpperCase()):(hold);\n        character += hold;\n        character += numeric.charAt( entity2 );\n        password = character;\n    }\n    password=password.split('').sort(function(){return 0.5-Math.random()}).join('');\n    return password.substr(0,len);\n}\n","import React, { useEffect, useState } from \"react\";\nimport { useCookies } from \"react-cookie\";\nimport ReactPaginate from \"react-paginate\";\nimport {\n  getUsers,\n  userLogout,\n  deleteUsr,\n  updateProfile,\n  getBranches,\n  getIBOs,\n  getUserBranch,\n  getUserIbo\n} from \"../../../utils/APIs\";\n\nimport { toast } from \"react-toastify\";\nimport { useHistory } from \"react-router-dom\";\nimport Swal from \"sweetalert2\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { useForm } from \"react-hook-form\";\nimport { Form } from \"react-bootstrap\";\nimport { password_generator } from \"../../../utils/Functions/passwordGenerator\";\nimport { useUrl } from \"../../../utils/Functions/useUrl\";\nimport {\n  statusOption,\n  formateStatus,\n  roleOption\n} from \"../../../utils/Functions/commonOptions\";\nimport { useDebounce } from \"../../../utils/Functions/useDebounce\";\nimport Spinner from \"../../shared/Spinner\";\n\nconst ClientList = () => {\n  const history = useHistory();\n  const [cookies, setCookie] = useCookies([\"user\"]);\n  const [itemlist, setitemlist] = useState([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const debouncedSearchTerm = useDebounce(searchTerm, 500);\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors, isDirty, isValid },\n  } = useForm({\n    mode: \"onChange\",\n  });\n  var strongRegexMo = new RegExp(\n    \"^\\\\s*(?:\\\\+?(\\\\d{1,3}))?[-. (]*(\\\\d{3})[-. )]*(\\\\d{3})[-. ]*(\\\\d{4})(?: *x(\\\\d+))?\\\\s*$\"\n  );\n\n  const onSubmit = async (data) => {\n    data.status = updateStatus;\n    data.branch = branchUpdate;\n    // data.IBO = IBOUpdate;\n    data.role = roleUpdate;\n    if (data.password === \"\") {\n      delete data.password;\n    }\n    try {\n      const updatedData = JSON.stringify(data);\n      await updateProfile(updatedData, valueToEdit?.id);\n      toast.success(\"User updated Successfully\", {\n        autoClose: 3000,\n      });\n      list();\n    } catch (error) {\n      if (error?.response?.data?.message) {\n        toast.error(error.response.data.message);\n      } else {\n        toast.error(process.env.REACT_APP_ERROR_MESSAGE);\n      }\n\n      if (error?.response?.data?.code === 401) {\n        const formData = JSON.stringify({\n          refreshToken: localStorage.getItem(\"refreshToken\"),\n        });\n        setCookie(\"user\", null, { path: \"/\" });\n        userLogout(formData).finally(() => {\n          history.push(\"/user-pages/login-1\");\n        });\n      }\n    } finally {\n      setShow(false);\n    }\n  };\n\n  // We start with an empty list of items.\n  const [pageCount, setPageCount] = useState(0);\n  // Here we use item offsets; we could also use page offsets\n  // following the API or data you're working with.\n  const [itemOffset, setItemOffset] = useUrl(\"page\");\n  const [itemsPerPage] = useState(10);\n  const [show, setShow] = React.useState(false);\n  const [valueToEdit, setvalueToEdit] = useState({});\n  const [updateStatus, setupdateStatus] = useState(0);\n  const [branchList, setbranchList] = useState([]);\n  const [selectedBranch, setselectedBranch] = useState(\"\");\n  const [IBOList, setIBOList] = useState([]);\n  const [selectedIBO, setselectedIBO] = useState(\"\");\n  const [branchUpdate, setbranchUpdate] = useState('')\n  const [IBOUpdate, setIBOUpdate] = useState('')\n  const [roleUpdate, setroleUpdate] = useState('')\n  const [isLoading, setIsLoading] = useState(true)\n  const onChangeBranchUpdate = (e) => {\n    setbranchUpdate(e?.target?.value)\n  }\n\n  const onChangeStatusForm = (e) => {\n    setupdateStatus(+e?.target?.value || 0);\n  };\n\n  const onChangeIBOpdate = (e) => {\n    setIBOUpdate(e?.target?.value)\n  }\n\n  const onChangeRolepdate = (e) => {\n    setroleUpdate(e?.target?.value)\n  }\n\n  const handleClose = () => {\n    setShow(false);\n    setvalueToEdit({});\n    setupdateStatus(0);\n    setbranchUpdate('');\n    setIBOUpdate('');\n    setroleUpdate('')\n    reset()\n  };\n\n  const handleShow = (value) => {\n    reset()\n    setvalueToEdit(value);\n    setupdateStatus(value?.status || 0);\n    setbranchUpdate(value?.branch)\n    setIBOUpdate(value?.IBO)\n    setroleUpdate(value?.role)\n    setShow(true);\n  };\n\n  useEffect(() => {\n    list();\n  }, [itemOffset, itemsPerPage, selectedBranch, selectedIBO]);\n\n  useEffect(() => {\n    list();\n  }, [debouncedSearchTerm]);\n\n  useEffect(() => {\n    getBranchList();\n    getIBOList();\n  }, []);\n\n  const getBranchList = async () => {\n    const items = await (await getBranches(5000, 1, \"\", \"branch\")).data;\n\n    setbranchList(items?.results);\n  };\n\n  const onChangeHandlerBranch = (e) => {\n    setItemOffset(0);\n    setselectedBranch(e.target.value);\n  };\n\n  const getIBOList = async () => {\n    const items = await (await getIBOs(5000, 1, \"\")).data;\n    setIBOList(items?.results);\n  };\n\n  const onChangeHandlerIBO = (e) => {\n    setItemOffset(0);\n    setselectedIBO(e.target.value);\n  };\n\n  const list = async () => {\n    setIsLoading(true)\n    try {\n      let items\n      if (cookies?.user?.role === \"branch\") {\n        items = await (\n          await getUserBranch(\n            cookies?.user?.name\n          )\n        ).data;\n        setitemlist(items);\n      } else if (cookies?.user?.role === \"IBO\") {\n        items = await (\n          await getUserIbo(\n            cookies?.user?.id\n          )\n        ).data;\n        setitemlist([items]);\n      } else {\n        items = await (\n          await getUsers(\n            itemsPerPage,\n            +itemOffset + 1,\n            searchTerm,\n            \"user\",\n            selectedBranch,\n            selectedIBO\n          )\n        ).data;\n        setitemlist(items?.results);\n      }\n      setPageCount(items?.totalPages);\n    } catch (error) {\n      if (error?.response?.data?.message) {\n        toast.error(error.response.data.message);\n      } else {\n        toast.error(process.env.REACT_APP_ERROR_MESSAGE);\n      }\n      if (error?.response?.data?.code === 401) {\n        const formData = JSON.stringify({\n          refreshToken: localStorage.getItem(\"refreshToken\"),\n        });\n        setCookie(\"user\", null, { path: \"/\" });\n        userLogout(formData).finally(() => {\n          history.push(\"/user-pages/login-1\");\n        });\n      }\n    }\n    setIsLoading(false)\n  };\n\n  const generatePassword = async (id) => {\n    const randomPassword = password_generator();\n    const newPassword = JSON.stringify({\n      password: randomPassword,\n    });\n\n    try {\n      await updateProfile(newPassword, id);\n      toast.success(\n        \"Password generated and sended to user via Email successfully\",\n        { autoClose: 3000 }\n      );\n    } catch (error) {\n      toast.error(\"Password generation failed, please try again later\");\n    }\n  };\n\n  // Invoke when user click to request another page.\n  const handlePageClick = (event) => {\n    window.scrollTo(0, 0);\n    setItemOffset(event.selected);\n  };\n\n  const deleteData = (uid) => {\n    Swal.fire({\n      title: \"Are you sure?\",\n      text: \"You will not be able to recover this imaginary file!\",\n      icon: \"warning\",\n      showCancelButton: true,\n      cancelButtonColor: \"#DD6B55\",\n      confirmButtonColor: \"#DD6B55\",\n      confirmButtonText: \"Yes, delete it!\",\n      cancelButtonText: \"No, keep it\",\n    }).then((result) => {\n      if (result.value) {\n        return (\n          deleteUsr(uid).finally(() => list()),\n          Swal.fire(\n            \"Deleted!\",\n            \"Your imaginary file has been deleted.\",\n            \"success\"\n          )\n        );\n      } else if (result.dismiss === Swal.DismissReason.cancel) {\n        Swal.fire(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\n      }\n    });\n  };\n\n  return (\n    <div>\n      <Modal\n        show={show}\n        onHide={handleClose}\n        backdrop=\"static\"\n        keyboard={false}\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>Update Client</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <div className=\"row auth\">\n            <div className=\"col-12 grid-margin\">\n              <div className=\"card\">\n                <div className=\"card-body\">\n                  <form\n                    className=\"form-sample\"\n                    onSubmit={handleSubmit(onSubmit)}\n                  >\n                    <p className=\"card-description\"> Update Client </p>\n                    <div className=\"row\">\n                      <div className=\"col-md-12\">\n                        <Form.Group className=\"row\">\n                          <label className=\"col-sm-4 col-form-label\">\n                            Name\n                          </label>\n                          <div className=\"col-sm-8\">\n                            <Form.Control\n                              type=\"text\"\n                              name=\"name\"\n                              defaultValue={valueToEdit.name}\n                              {...register(\"name\", { required: true })}\n                            />\n                            {errors && errors.name && (\n                              <p>name is required field</p>\n                            )}\n                          </div>\n                        </Form.Group>\n                      </div>\n                    </div>\n\n                    <div className=\"row\">\n                      <div className=\"col-md-12\">\n                        <Form.Group className=\"row\">\n                          <label className=\"col-sm-4 col-form-label\">\n                            Address{\" \"}\n                          </label>\n                          <div className=\"col-sm-8\">\n                            <Form.Control\n                              type=\"text\"\n                              name=\"address\"\n                              defaultValue={valueToEdit.address}\n                              {...register(\"address\", { required: true })}\n                            />\n                            {errors && errors.address && (\n                              <p>address is required field</p>\n                            )}\n                          </div>\n                        </Form.Group>\n                      </div>\n                    </div>\n\n                    <div className=\"row\">\n                      <div className=\"col-md-12\">\n                        <Form.Group className=\"row\">\n                          <label className=\"col-sm-4 col-form-label\">\n                            Contact No\n                          </label>\n                          <div className=\"col-sm-8 contact_no\">\n                            <Form.Control\n                              type=\"text\"\n                              name=\"contactno\"\n                              defaultValue={valueToEdit.contactno}\n                              {...register(\"contactno\", {\n                                required: true,\n                                pattern: strongRegexMo,\n                              })}\n                            />\n                            {errors &&\n                              errors.contactno &&\n                              errors.contactno.type === \"required\" && (\n                                <p>contact number is required field</p>\n                              )}\n                            {errors &&\n                              errors.contactno &&\n                              errors.contactno.type === \"pattern\" && (\n                                <p>\n                                  invalid phone number please use valid formate\n                                </p>\n                              )}\n                          </div>\n                        </Form.Group>\n                      </div>\n                    </div>\n\n                    <div className=\"row\">\n                      <div className=\"col-md-12\">\n                        <Form.Group className=\"row\">\n                          <label className=\"col-sm-4 col-form-label\">\n                            Email\n                          </label>\n                          <div className=\"col-sm-8\">\n                            <Form.Control\n                              type=\"text\"\n                              name=\"email\"\n                              defaultValue={valueToEdit.email}\n                              {...register(\"email\", {\n                                required: true,\n                                pattern: /^\\S+@\\S+$/i,\n                              })}\n                            />\n                            {errors &&\n                              errors.email &&\n                              errors.email.type === \"required\" && (\n                                <p>email is required field</p>\n                              )}\n                            {errors &&\n                              errors.email &&\n                              errors.email.type === \"pattern\" && (\n                                <p>invalid email formate</p>\n                              )}\n                          </div>\n                        </Form.Group>\n                      </div>\n                    </div>\n\n                    <div className=\"row\">\n                      <div className=\"col-md-12\">\n                        <Form.Group className=\"row\">\n                          <label className=\"col-sm-4 col-form-label\">\n                            status\n                          </label>\n                          <div className=\"col-sm-8\">\n                            <select\n                              className=\"form-control form-control-sm\"\n                              id=\"exampleFormControlSelect3\"\n                              name=\"status\"\n                              onChange={onChangeStatusForm}\n                            >\n                              {statusOption?.map((i) => {\n                                return (\n                                  <option\n                                    value={i?.value}\n                                    selected={+updateStatus === +i?.value}\n                                  >\n                                    {i?.label}\n                                  </option>\n                                );\n                              })}\n                            </select>\n                          </div>\n                        </Form.Group>\n                      </div>\n                    </div>\n\n                    <div className=\"row\">\n                      <div className=\"col-md-12\">\n                        <Form.Group className=\"row\">\n                          <label className=\"col-sm-4 col-form-label\">\n                            Search Branch\n                          </label>\n                          <div className=\"col-sm-8\">\n                            <select\n                              className=\"form-control form-control-sm\"\n                              id=\"exampleFormControlSelect2\"\n                              name=\"branch\"\n                              onChange={onChangeBranchUpdate}\n                            >\n                              {branchList?.map((i) => {\n                                return (\n                                  <>\n                                    <option\n                                      selected={i.name === branchUpdate}\n                                      value={i.name}\n                                    >\n                                      {i.name}\n                                    </option>\n                                  </>\n                                );\n                              })}\n                            </select>\n                          </div>\n                        </Form.Group>\n                      </div>\n                    </div>\n\n                    <div className=\"row\">\n                      <div className=\"col-md-12\">\n                        <Form.Group className=\"row\">\n                          <label className=\"col-sm-4 col-form-label\">\n                            Select IBO\n                          </label>\n                          <div className=\"col-sm-8\">\n                            <select\n                              className=\"form-control form-control-sm\"\n                              id=\"exampleFormControlSelect2\"\n                              name=\"branch\"\n                              onChange={onChangeIBOpdate}\n                            >\n                              {IBOList?.map((i) => {\n                                return (\n                                  <>\n                                    <option\n                                      selected={i.name === IBOUpdate}\n                                      value={i.name}\n                                    >\n                                      {i.name}\n                                    </option>\n                                  </>\n                                );\n                              })}\n                            </select>\n                          </div>\n                        </Form.Group>\n                      </div>\n                    </div>\n\n                    <div className=\"row\">\n                      <div className=\"col-md-12\">\n                        <Form.Group className=\"row\">\n                          <label className=\"col-sm-4 col-form-label\">\n                            Select Role\n                          </label>\n                          <div className=\"col-sm-8\">\n                            <select\n                              className=\"form-control form-control-sm\"\n                              id=\"exampleFormControlSelect2\"\n                              name=\"branch\"\n                              onChange={onChangeRolepdate}\n                            >\n                              {roleOption?.map((i) => {\n                                return (\n                                  <>\n                                    <option\n                                      selected={i.value === roleUpdate}\n                                      value={i.value}\n                                    >\n                                      {i.label}\n                                    </option>\n                                  </>\n                                );\n                              })}\n                            </select>\n                          </div>\n                        </Form.Group>\n                      </div>\n                    </div>\n\n                    <div className=\"row\">\n                      <div className=\"col-md-12\">\n                        <Form.Group className=\"row\">\n                          <label className=\"col-sm-4 col-form-label\">\n                            AadharCard Number\n                          </label>\n                          <div className=\"col-sm-8\">\n                            <Form.Control\n                              type=\"text\"\n                              name=\"aadhar_card_no\"\n                              defaultValue={valueToEdit.aadhar_card_no}\n                              {...register(\"aadhar_card_no\", { required: true })}\n                            />\n                            {errors && errors.aadhar_card_no && (\n                              <p>Aadharcard number is required field</p>\n                            )}\n                          </div>\n                        </Form.Group>\n                      </div>\n                    </div>\n\n                    <div className=\"row\">\n                      <div className=\"col-md-12\">\n                        <Form.Group className=\"row\">\n                          <label className=\"col-sm-4 col-form-label\">\n                            PanCard Number\n                          </label>\n                          <div className=\"col-sm-8\">\n                            <Form.Control\n                              type=\"text\"\n                              name=\"pan_card_no\"\n                              defaultValue={valueToEdit.pan_card_no}\n                              {...register(\"pan_card_no\", { required: true })}\n                            />\n                            {errors && errors.pan_card_no && (\n                              <p>PanCard number is required field</p>\n                            )}\n                          </div>\n                        </Form.Group>\n                      </div>\n                    </div>\n\n                    <div className=\"row\">\n                      <div className=\"col-md-12\">\n                        <Form.Group className=\"row\">\n                          <label className=\"col-sm-4 col-form-label\">\n                            Password\n                          </label>\n                          <div className=\"col-sm-8\">\n                            <Form.Control\n                              type=\"password\"\n                              name=\"password\"\n                              {...register(\"password\")}\n                            />\n                          </div>\n                        </Form.Group>\n                      </div>\n                    </div>\n\n                    <div className=\"mt-3\">\n                      <button\n                        className=\"btn  btn-primary btn-lg font-weight-medium auth-form-btn\"\n                        type=\"submit\"\n                      >\n                        UPDATE\n                      </button>\n                    </div>\n                  </form>\n                </div>\n              </div>\n            </div>\n          </div>\n        </Modal.Body>\n      </Modal>\n      <div className=\"page-header\">\n        <h3 className=\"page-title\">Clients / Show Clients </h3>\n        <nav aria-label=\"breadcrumb\">\n          <ol className=\"breadcrumb\">\n            <li className=\"breadcrumb-item\">\n              <a href=\"!#\" onClick={(event) => event.preventDefault()}>\n                {cookies?.user?.role} Dashboard\n              </a>\n            </li>\n            <li className=\"breadcrumb-item active\" aria-current=\"page\">\n              Show clients\n            </li>\n          </ol>\n        </nav>\n      </div>\n      <div className=\"col-lg-12 grid-margin stretch-card p0\">\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <div className=\"row\">\n              {cookies?.user?.role !== \"IBO\" && cookies?.user?.role !== \"branch\" && (\n                <>\n                  <div className=\"col-md-4\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-6 col-form-label\">\n                        Search Branch\n                      </label>\n                      <div className=\"col-sm-6\">\n                        <select\n                          className=\"form-control form-control-sm\"\n                          id=\"exampleFormControlSelect2\"\n                          name=\"branch\"\n                          onChange={onChangeHandlerBranch}\n                        >\n                          <option selected={\"\" === selectedBranch} value={\"\"}>\n                            Not Selected\n                          </option>\n                          {branchList?.map((i) => {\n                            return (\n                              <>\n                                <option\n                                  selected={i.name === selectedBranch}\n                                  value={i.name}\n                                >\n                                  {i.name}\n                                </option>\n                              </>\n                            );\n                          })}\n                        </select>\n                      </div>\n                    </Form.Group>\n                  </div>\n\n                  <div className=\"col-md-4\">\n                    <Form.Group className=\"row\">\n                      <label className=\"col-sm-5 col-form-label\">Search IBO</label>\n                      <div className=\"col-sm-7\">\n                        <select\n                          className=\"form-control form-control-sm\"\n                          id=\"exampleFormControlSelect2\"\n                          name=\"branch\"\n                          onChange={onChangeHandlerIBO}\n                        >\n                          <option selected={\"\" === selectedIBO} value={\"\"}>\n                            Not Selected\n                          </option>\n                          {IBOList?.map((i) => {\n                            return (\n                              <>\n                                <option\n                                  selected={i.name === selectedIBO}\n                                  value={i.name}\n                                >\n                                  {i.name}\n                                </option>\n                              </>\n                            );\n                          })}\n                        </select>\n                      </div>\n                    </Form.Group>\n                  </div>\n\n                  <div className=\"col-md-4\">\n                    <div className=\"search-field d-none d-md-block\">\n                      <form className=\"d-flex align-items-center h-100\" action=\"#\">\n                        <div className=\"input-group\">\n                          <div className=\"input-group-prepend outline-gray bg-transparent\">\n                            <i className=\"input-group-text border-0 mdi mdi-magnify\"></i>\n                          </div>\n                          <input\n                            type=\"text\"\n                            className=\"form-control outline-gray bg-transparent border-0\"\n                            placeholder=\"Search Clients\"\n                            value={searchTerm}\n                            onChange={(e) => {\n                              setSearchTerm(e?.target?.value);\n                              setItemOffset(0);\n                            }}\n                          />\n                        </div>\n                      </form>\n                    </div>\n                  </div>\n                </>\n              )}\n            </div>\n            <h4 className=\"card-title\">Client list</h4>\n\n            <div className=\"table-responsive\">\n              <table className=\"table table-striped\">\n                <thead>\n                  <tr>\n                    <th> Name </th>\n                    <th> Contact no. </th>\n                    <th> Branch </th>\n                    <th> IBO </th>\n                    <th> Email </th>\n                    <th> Role </th>\n                    <th> Status </th>\n                    <th> Generate Password </th>\n                    <th> Edit </th>\n                    <th> Delete </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {isLoading ? <Spinner />\n                    :\n                    itemlist?.map((item) => {\n                      return (\n                        <tr>\n                          <td>{item?.name}</td>\n                          <td>{item?.contactno}</td>\n                          <td>{item?.branch}</td>\n                          <td>{item?.IBO}</td>\n                          <td>{item?.email}</td>\n                          <td>{item?.role}</td>\n                          <td>{formateStatus(item?.status)}</td>\n                          <td>\n                            <button\n                              type=\"button\"\n                              className=\"btn btn-gradient-primary btn-sm \"\n                              onClick={() => generatePassword(item?.id)}\n                            >\n                              Generate\n                            </button>\n                          </td>\n                          <td>\n                            <i\n                              onClick={() => handleShow(item)}\n                              className=\"mdi mdi-lead-pencil\"\n                            ></i>\n                          </td>\n                          <td>\n                            <i\n                              onClick={() => deleteData(item?.id)}\n                              className=\"mdi mdi-delete\"\n                            >\n                              {\" \"}\n                            </i>\n                          </td>\n                        </tr>\n                      );\n                    })}\n                </tbody>\n              </table>\n              <ReactPaginate\n                breakLabel=\"...\"\n                nextLabel=\"next >\"\n                className=\"client-list\"\n                onPageChange={handlePageClick}\n                pageRangeDisplayed={5}\n                pageCount={pageCount}\n                previousLabel=\"< previous\"\n                renderOnZeroPageCount={null}\n                forcePage={itemOffset}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ClientList;\n"],"sourceRoot":""}